<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alex Liang</title>
  <subtitle>在新創公司擔任全端工程師，記錄我的學習歷程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kuroro0718.github.io/"/>
  <updated>2017-07-30T14:24:12.000Z</updated>
  <id>https://kuroro0718.github.io/</id>
  
  <author>
    <name>Alex Liang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Koa--使用koa-joi-router驗證API參數及其測試</title>
    <link href="https://kuroro0718.github.io/Koa-%E4%BD%BF%E7%94%A8koa-joi-router%E9%A9%97%E8%AD%89API%E5%8F%83%E6%95%B8%E5%8F%8A%E5%85%B6%E6%B8%AC%E8%A9%A6/"/>
    <id>https://kuroro0718.github.io/Koa-使用koa-joi-router驗證API參數及其測試/</id>
    <published>2017-07-30T13:17:59.000Z</published>
    <updated>2017-07-30T14:24:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司新的專案想用koa2來實作API服務，除了一般的post data外還會有第三方傳來的multipart-post data。我們使用koa-joi-router這個套件驗證傳進來的資料，同時使用supertest做測試。</p>
<a id="more"></a>
<p>首先說明koa-joi-router跟其它套件有什麼不同，它使用joi這個物件描述語言定義javascript object的schema，我們能限制輸入參數的型態、字元個數及是不是必要欄位。<br>而<a href="https://github.com/hapijs/joi" target="_blank" rel="external">joi</a>這個套件也能用在一般的javascript object</p>
<p>由於koa-joi-router己內建co-body及await-busboy這二套body-parser，我們不需要再另外裝body-parser。</p>
<p>以下是一個post API的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</div><div class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-joi-router'</span>);</div><div class="line"><span class="keyword">const</span> Joi = router.Joi;</div><div class="line"></div><div class="line"><span class="keyword">const</span> public = router();</div><div class="line"></div><div class="line">public.route(&#123;</div><div class="line">  method: <span class="string">'post'</span>,</div><div class="line">  path: <span class="string">'/comments'</span>,</div><div class="line">  validate: &#123;</div><div class="line">    type: <span class="string">'json'</span>,</div><div class="line">    body: &#123;</div><div class="line">      title: Joi.string().max(<span class="number">100</span>).required,</div><div class="line">      content: Joi.string().required</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  handler: <span class="keyword">async</span> (ctx) =&gt; &#123;</div><div class="line">    <span class="comment">// create article</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</div><div class="line">app.use(public.middleware());</div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<p>我們必須指定傳進來的資料類型及body要檢查的參數，koa-joi-router有三種type可以使用：json, form和multipart。要注意的是，如果傳進來資料型態和宣告的不同，會直接return 400. 要檢查的參數如果條件不符也會直接回400</p>
<p>而測試程式碼如下（使用mocha和supertest)：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> superagent = <span class="built_in">require</span>(<span class="string">'supertest'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">'src/app'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> superagent(app.listen());</div><div class="line">&#125;</div><div class="line"></div><div class="line">describe(<span class="string">'API Test /1/comments'</span>, () =&gt; &#123;</div><div class="line">	it(<span class="string">'Create a new comment'</span>, (done) =&gt; &#123;</div><div class="line">	   <span class="keyword">const</span> testData = &#123;</div><div class="line">	     title: <span class="string">'Test'</span>,</div><div class="line">	     content: <span class="string">'This is a test comment'</span></div><div class="line">	   &#125;;</div><div class="line">	   </div><div class="line">	   request()</div><div class="line">	     .post(<span class="string">'/1/comments'</span>)</div><div class="line">	     .send(testData)</div><div class="line">	     .expect(<span class="number">200</span>)</div><div class="line">	     .end(done);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>假如API傳進來的資料為form data，則validate的type設定要改為form</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public.route(&#123;</div><div class="line">  method: <span class="string">'post'</span>,</div><div class="line">  path: <span class="string">'/blog'</span>,</div><div class="line">  validate: &#123;</div><div class="line">    type: <span class="string">'form'</span>,</div><div class="line">    body: &#123;</div><div class="line">      title: Joi.string().max(<span class="number">100</span>).required,</div><div class="line">      content: Joi.string().required</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  handler: <span class="keyword">async</span> (ctx) =&gt; &#123;</div><div class="line">    <span class="comment">// create blog post</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>測試如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'API Test /1/blog'</span>, () =&gt; &#123;</div><div class="line">	it(<span class="string">'Create a new blog post'</span>, (done) =&gt; &#123;</div><div class="line">	   <span class="keyword">const</span> testData = &#123;</div><div class="line">	     title: <span class="string">'Blog Test'</span>,</div><div class="line">	     content: <span class="string">'This is a test post'</span></div><div class="line">	   &#125;;</div><div class="line">	   </div><div class="line">	   request()</div><div class="line">	     .post(<span class="string">'/1/blog'</span>)</div><div class="line">	     .type(<span class="string">'form'</span>)</div><div class="line">	     .send(testData)</div><div class="line">	     .expect(<span class="number">200</span>)</div><div class="line">	     .end(done);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>最後則是multipart的資料，此種資料一般為上傳檔案或是stream會用到。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public.route(&#123;</div><div class="line">  method: <span class="string">'post'</span>,</div><div class="line">  path: <span class="string">'/files'</span>,</div><div class="line">  validate: &#123;</div><div class="line">    type: <span class="string">'multipart'</span>,</div><div class="line">  &#125;,</div><div class="line">  handler: <span class="keyword">async</span> (ctx) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> parts = ctx.request.parts;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> part;</div><div class="line">    </div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">while</span> ((part = <span class="keyword">await</span> parts)) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`Receive stream key: <span class="subst">$&#123;part[0]&#125;</span>, value: <span class="subst">$&#123;part[1]&#125;</span>);</span></div><div class="line">      &#125;</div><div class="line">    &#125; catch (err) &#123;</div><div class="line">      throw new Error(err);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    const fileContent = parts.field.File;</div><div class="line">    // upload file</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Test code:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'API Test /1/files'</span>, () =&gt; &#123;</div><div class="line">	it(<span class="string">'Upload a file'</span>, (done) =&gt; &#123;</div><div class="line">	   <span class="keyword">const</span> testData = &#123;</div><div class="line">	     File: <span class="string">'file content'</span></div><div class="line">	   &#125;;</div><div class="line">	   </div><div class="line">	   request()</div><div class="line">	     .post(<span class="string">'/1/blog'</span>)</div><div class="line">		  .field(<span class="string">'File'</span>, testData)</div><div class="line">	     .expect(<span class="number">200</span>)</div><div class="line">	     .end(done);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果本地端使用postman測試的話，<a href="https://stackoverflow.com/questions/16015548/tool-for-sending-multipart-form-data-request" target="_blank" rel="external">這篇文章</a>的答案對於設定會有幫助。</p>
<p>參考資料：<br><a href="https://github.com/koajs/joi-router" target="_blank" rel="external">koa-joi-router github</a><br><a href="https://github.com/visionmedia/supertest" target="_blank" rel="external">supertest github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近公司新的專案想用koa2來實作API服務，除了一般的post data外還會有第三方傳來的multipart-post data。我們使用koa-joi-router這個套件驗證傳進來的資料，同時使用supertest做測試。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://kuroro0718.github.io/tags/Node-js/"/>
    
      <category term="koa" scheme="https://kuroro0718.github.io/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>使用jschardet偵測網頁編碼</title>
    <link href="https://kuroro0718.github.io/%E4%BD%BF%E7%94%A8jschardet%E5%81%B5%E6%B8%AC%E7%B6%B2%E9%A0%81%E7%B7%A8%E7%A2%BC/"/>
    <id>https://kuroro0718.github.io/使用jschardet偵測網頁編碼/</id>
    <published>2017-06-26T14:18:09.000Z</published>
    <updated>2017-06-26T14:45:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>寫爬蟲的過程中常需要對網頁選擇適當的編碼。</p>
<p>今天介紹一個jschardet module能自動檢測網頁編碼</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> iconv     = <span class="built_in">require</span>(<span class="string">'iconv-lite'</span>);</div><div class="line"><span class="keyword">const</span> jschardet = <span class="built_in">require</span>(<span class="string">'jschardet'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchRawHtml</span>(<span class="params">linkURL, callback</span>) </span>&#123;	</div><div class="line">	request.get(&#123;</div><div class="line">      url:       linkURL,</div><div class="line">      encoding:  <span class="literal">null</span>,</div><div class="line">    &#125;, (error, response, body) =&gt; &#123;</div><div class="line">      <span class="keyword">if</span> (error) &#123;</div><div class="line">        <span class="built_in">console</span>.error(error);</div><div class="line">        callback(error);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (response.statusCode !== <span class="number">200</span>) &#123;</div><div class="line">        callback(<span class="string">`Status code: <span class="subst">$&#123;response.statusCode&#125;</span>`</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">const</span> buf = iconv.decode(<span class="keyword">new</span> Buffer(body), jschardet.detect(body).encoding);</div><div class="line"></div><div class="line">      callback(<span class="literal">null</span>, buf);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>jschardet.detect(body).encoding會回傳該網頁的編碼，對module實作有興趣的人可以參考原始碼，基本上是列出該編碼常用字元，算出網頁使用編碼的機率有多高</p>
<p>如此一來，以後遇到big5或其它語系的編碼不用另外記錄，可以直接取得正確的raw data</p>
<p>參考資料：<br><a href="https://github.com/aadsm/jschardet" target="_blank" rel="external">官方github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;寫爬蟲的過程中常需要對網頁選擇適當的編碼。&lt;/p&gt;
&lt;p&gt;今天介紹一個jschardet module能自動檢測網頁編碼&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://kuroro0718.github.io/tags/javascript/"/>
    
      <category term="Node.js" scheme="https://kuroro0718.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>使用MongoHub執行aggregate數量錯誤問題</title>
    <link href="https://kuroro0718.github.io/%E4%BD%BF%E7%94%A8MongoHub%E5%9F%B7%E8%A1%8Caggregate%E6%95%B8%E9%87%8F%E9%8C%AF%E8%AA%A4%E5%95%8F%E9%A1%8C/"/>
    <id>https://kuroro0718.github.io/使用MongoHub執行aggregate數量錯誤問題/</id>
    <published>2017-04-10T14:57:35.000Z</published>
    <updated>2017-04-10T15:23:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>在os X的環境下，常使用<a href="https://github.com/jeromelebel/MongoHub-Mac" target="_blank" rel="external">MongoHub</a>檢視資料庫及執行aggregate的動作。</p>
<p>前陣子使用aggregate檢查資料數量時，發現怎麼找數量總是多一筆。本來以為是指令下錯了，簡單做個實驗後，發現MongoHub的aggregate結果會有個預設值，如下圖</p>
<p><img src="MongoHub-aggregate.png" alt="MongoHub-aggregate"></p>
<p>在date match空值的情況下，仍然有1個document被找到，但根本沒這個document。<br>下次做aggregate時結果的數量得先減個1才準。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在os X的環境下，常使用&lt;a href=&quot;https://github.com/jeromelebel/MongoHub-Mac&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MongoHub&lt;/a&gt;檢視資料庫及執行aggregate的動作。&lt;/p&gt;
&lt;
    
    </summary>
    
    
      <category term="MongoDB" scheme="https://kuroro0718.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB Aggregation介紹</title>
    <link href="https://kuroro0718.github.io/MongoDB-Aggregation%E4%BB%8B%E7%B4%B9/"/>
    <id>https://kuroro0718.github.io/MongoDB-Aggregation介紹/</id>
    <published>2017-02-19T05:10:50.000Z</published>
    <updated>2017-02-19T05:53:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>實際使用mongoDB時，遇到無法簡單下query得到結果的情況（例如計算不同科目上課學生的平均分數），我們會使用aggregation。</p>
<a id="more"></a>
<p>先來看一段aggregation的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">db.companies.aggregate( [</div><div class="line">    &#123; $match: &#123; <span class="string">"relationships.person"</span>: &#123; $ne: <span class="literal">null</span> &#125; &#125; &#125;,</div><div class="line">    &#123; $project: &#123; relationships: <span class="number">1</span>, _id: <span class="number">0</span> &#125; &#125;,</div><div class="line">    &#123; $unwind: <span class="string">"$relationships"</span> &#125;,</div><div class="line">    &#123; $group: &#123;</div><div class="line">        _id: <span class="string">"$relationships.person"</span>,</div><div class="line">        count: &#123; $sum: <span class="number">1</span> &#125;</div><div class="line">    &#125; &#125;,</div><div class="line">    &#123; $sort: &#123; count: <span class="number">-1</span> &#125; &#125;</div><div class="line">] )</div></pre></td></tr></table></figure>
<p>aggregation的語法是以[]封裝所有的流程，裡面每一個{}可視為stage，類似linux command line可以將shell script的結果傳給下一個；以上例來說，先找出companies裡relationships的person不為空值的結果，將其傳給下一階段。</p>
<p>而常見的stage有$match, $project, $unwind和$group</p>
<p>$match能夠找出指定條件的document<br>$project和query的使用方式一樣，選擇結果想要出現的欄位<br>$unwind則是將document的陣列元素打散產生數個document，使新的document只出現一個該陣列元素<br>$group能將collection裡依條件做分群的動作，之後還能對新document做數值運算</p>
<p>再回到上例，$match的結果到$project stage時，選擇只要relationships這個陣列的資料，在$unwind根據relationships產生數個document，每個document就是一筆陣列元素。接下來$group把relationships的person當作新document的_id，以person分群並計算同一個人參與多少公司。最後根據count由大排到小。</p>
<p>一般建議的作法是先使用$match或$unwind限縮document的數量，讓之後的處理能加快。</p>
<p>下一個例子是找出學校科目中學生平均最高的例子，document內容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"_id"</span> : ObjectId(<span class="string">"50b59cd75bed76f46522c392"</span>),</div><div class="line">    <span class="string">"student_id"</span> : <span class="number">10</span>,</div><div class="line">    <span class="string">"class_id"</span> : <span class="number">5</span>,</div><div class="line">    <span class="string">"scores"</span> : [</div><div class="line">        &#123;</div><div class="line">            <span class="string">"type"</span> : <span class="string">"exam"</span>,</div><div class="line">            <span class="string">"score"</span> : <span class="number">69.17634380939022</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="string">"type"</span> : <span class="string">"quiz"</span>,</div><div class="line">            <span class="string">"score"</span> : <span class="number">61.20182926719762</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="string">"type"</span> : <span class="string">"homework"</span>,</div><div class="line">            <span class="string">"score"</span> : <span class="number">73.3293624199466</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="string">"type"</span> : <span class="string">"homework"</span>,</div><div class="line">            <span class="string">"score"</span> : <span class="number">15.206314042622903</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="string">"type"</span> : <span class="string">"homework"</span>,</div><div class="line">            <span class="string">"score"</span> : <span class="number">36.75297723087603</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="string">"type"</span> : <span class="string">"homework"</span>,</div><div class="line">            <span class="string">"score"</span> : <span class="number">64.42913107330241</span></div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我們要找的目標只包含homework和exam，不包括quiz，所以第一階階使用$match和$unwind</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; db.grades.aggregate( [ </div><div class="line">	&#123; <span class="variable">$unwind</span>: <span class="string">"<span class="variable">$scores</span>"</span> &#125;, </div><div class="line">	&#123; <span class="variable">$match</span>: &#123; <span class="string">"scores.type"</span>: &#123; <span class="variable">$ne</span>: <span class="string">"quiz"</span> &#125; &#125; &#125;</div><div class="line">])</div></pre></td></tr></table></figure>
<p>結果：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50b59cd75bed76f46522c34e"</span>), <span class="string">"student_id"</span> : 0, <span class="string">"class_id"</span> : 2, <span class="string">"scores"</span> : &#123; <span class="string">"type"</span> : <span class="string">"exam"</span>, <span class="string">"score"</span> : 57.92947112575566 &#125; &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50b59cd75bed76f46522c34e"</span>), <span class="string">"student_id"</span> : 0, <span class="string">"class_id"</span> : 2, <span class="string">"scores"</span> : &#123; <span class="string">"type"</span> : <span class="string">"homework"</span>, <span class="string">"score"</span> : 68.1956781058743 &#125; &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50b59cd75bed76f46522c34e"</span>), <span class="string">"student_id"</span> : 0, <span class="string">"class_id"</span> : 2, <span class="string">"scores"</span> : &#123; <span class="string">"type"</span> : <span class="string">"homework"</span>, <span class="string">"score"</span> : 67.95019716560351 &#125; &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50b59cd75bed76f46522c34e"</span>), <span class="string">"student_id"</span> : 0, <span class="string">"class_id"</span> : 2, <span class="string">"scores"</span> : &#123; <span class="string">"type"</span> : <span class="string">"homework"</span>, <span class="string">"score"</span> : 18.81037253352722 &#125; &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50b59cd75bed76f46522c351"</span>), <span class="string">"student_id"</span> : 0, <span class="string">"class_id"</span> : 16, <span class="string">"scores"</span> : &#123; <span class="string">"type"</span> : <span class="string">"exam"</span>, <span class="string">"score"</span> : 59.1805667559299 &#125; &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50b59cd75bed76f46522c351"</span>), <span class="string">"student_id"</span> : 0, <span class="string">"class_id"</span> : 16, <span class="string">"scores"</span> : &#123; <span class="string">"type"</span> : <span class="string">"homework"</span>, <span class="string">"score"</span> : 6.48470951607214 &#125; &#125;</div></pre></td></tr></table></figure>
<p>再來做group，以’class_id’為新collection的_id並計算該科的平均分數，最後再做排序：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; db.grades.aggregate( [ </div><div class="line"> 	&#123; <span class="variable">$unwind</span>: <span class="string">"<span class="variable">$scores</span>"</span> &#125;, </div><div class="line"> 	&#123; <span class="variable">$match</span>: &#123; <span class="string">"scores.type"</span>: &#123; <span class="variable">$ne</span>: <span class="string">"quiz"</span> &#125; &#125; &#125;, </div><div class="line"> 	&#123; <span class="variable">$group</span>: &#123; _id: &#123; <span class="string">"class"</span>: <span class="string">"<span class="variable">$class_id</span>"</span> &#125;, avg: &#123; <span class="variable">$avg</span>: <span class="string">"<span class="variable">$scores</span>.score"</span> &#125; &#125; &#125;, </div><div class="line"> 	&#123; <span class="variable">$sort</span>: &#123; avg: -1 &#125;&#125;</div><div class="line"> ])</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 1 &#125;, <span class="string">"avg"</span> : 64.89462395242741 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 9 &#125;, <span class="string">"avg"</span> : 58.32770509408073 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 5 &#125;, <span class="string">"avg"</span> : 56.80408386154663 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 26 &#125;, <span class="string">"avg"</span> : 55.73775030281308 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 4 &#125;, <span class="string">"avg"</span> : 55.51344573971435 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 20 &#125;, <span class="string">"avg"</span> : 54.06379996612098 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 24 &#125;, <span class="string">"avg"</span> : 53.72872750965091 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 16 &#125;, <span class="string">"avg"</span> : 53.36304538085671 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 13 &#125;, <span class="string">"avg"</span> : 52.10852066426234 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 14 &#125;, <span class="string">"avg"</span> : 51.843459264371795 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 23 &#125;, <span class="string">"avg"</span> : 51.55076295987544 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 11 &#125;, <span class="string">"avg"</span> : 51.52594302618334 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 3 &#125;, <span class="string">"avg"</span> : 51.415324716021125 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 29 &#125;, <span class="string">"avg"</span> : 50.190997428907586 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 0 &#125;, <span class="string">"avg"</span> : 49.79223626365225 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 17 &#125;, <span class="string">"avg"</span> : 49.63426020975154 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 6 &#125;, <span class="string">"avg"</span> : 49.51404572271715 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 27 &#125;, <span class="string">"avg"</span> : 49.195554303080606 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 19 &#125;, <span class="string">"avg"</span> : 48.92999492446235 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 7 &#125;, <span class="string">"avg"</span> : 48.78360353370019 &#125;</div></pre></td></tr></table></figure>
<p><a href="https://docs.mongodb.com/manual/meta/aggregation-quick-reference/?_ga=1.93590685.1899033787.1479731611" target="_blank" rel="external">官方參考文件</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;實際使用mongoDB時，遇到無法簡單下query得到結果的情況（例如計算不同科目上課學生的平均分數），我們會使用aggregation。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MongoDB" scheme="https://kuroro0718.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Node.js爬蟲實戰：如何query動態網頁資料</title>
    <link href="https://kuroro0718.github.io/Node-js%E7%88%AC%E8%9F%B2%E5%AF%A6%E6%88%B0%EF%BC%9A%E5%A6%82%E4%BD%95query%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81%E8%B3%87%E6%96%99/"/>
    <id>https://kuroro0718.github.io/Node-js爬蟲實戰：如何query動態網頁資料/</id>
    <published>2017-02-05T12:00:49.000Z</published>
    <updated>2017-02-05T13:09:00.000Z</updated>
    
    <content type="html"><![CDATA[<p> 前陣子工作上需要寫爬蟲撈政府機關的資料回來，一般的靜態網頁可以由URL的規則找到資料連結，而動態網頁常無法使用此方式。最常遇到的是client端按下button後送javascript的動作給後端，然後才render網頁。</p>
<p> 這篇簡單記錄如何抓取這類型網站的資料。<br> <a id="more"></a></p>
<p> 我們以<a href="https://www.laws.taipei.gov.tw/lawsystem/wfLaw_Interpretation_SearchResult.aspx" target="_blank" rel="external">北市府法規局</a>網站為例，使用chrome的開發者工具。<br> 這裡分成2個部分：</p>
<ol>
<li>檢視送出query的header帶了哪些參數</li>
<li>觀察取得下一頁資料時，header又加入哪些參數</li>
</ol>
<p>一開始我們先測試最少需要哪些輸入才能查詢，在這個例子中至少需要勾選一個類別加上發布期間才能query資料。假設查詢營建類，從105年1月1日到105年12月31日。開啟開發人員工具，進入Network頁面，此時按”送出查詢”。</p>
<p> 在Network頁面下，我們找到wfLaw_Interpretation_SearchResult.aspx，點進去後可看到以下畫面：<br> <img src="FormData.png" alt="HTTP Request"><br> 紅色框起來的部分便是query送出的表格資料，這裡可以看到有三個欄位需要控制：’TCGC’, ‘TADF’及’TADT’。程式需要二個套件: request和cheerio，前者可送出HTTP request;後者可以把回傳的網頁資料透過類似jQuery的selector抓取需要的內容</p>
<figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Request = <span class="built_in">require</span>(<span class="string">'request'</span>);</div><div class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> request = Request.defaults(&#123;</div><div class="line">  jar: <span class="literal">true</span>,</div><div class="line">  timeout: <span class="number">60</span> * <span class="number">1000</span>,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">request.post(&#123;</div><div class="line">  url: <span class="string">'http://www.laws.taipei.gov.tw/lawsystem/wfLaw_Interpretation_SearchResult.aspx'</span>,</div><div class="line">  form: &#123;</div><div class="line">    TCGC: <span class="string">'003008'</span>,</div><div class="line">    TLC1: <span class="string">'AND'</span>,</div><div class="line">    TLC2: <span class="string">'AND'</span>,</div><div class="line">    TADF: <span class="string">'1010604'</span>,</div><div class="line">    TADT: <span class="string">'1010604'</span></div><div class="line">  &#125;,</div><div class="line">&#125;, (error, response, body) =&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (error) &#123;</div><div class="line">    <span class="built_in">console</span>.error(error);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (response.statusCode !== <span class="number">200</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(response.statusCode);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> $ = cheerio.load(body);</div><div class="line">  <span class="keyword">const</span> span = $(<span class="string">'#ContentPlaceHolder1_gvList_lblRecordCount'</span>);</div><div class="line">  <span class="keyword">let</span> count = $(span[<span class="number">0</span>]).text();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`Query結果共<span class="subst">$&#123;count&#125;</span>筆資料`</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>這段程式碼會印出query結果的資料數量。到此解決第一部分。<br>如果query數量超過一頁的上限，想抓取下一頁的資料會發現HTML並無下一頁的連結<br><img src="NextPage.png" alt="Next Page"></p>
<p>它是透過javascript去產生下一頁的結果，我們使用開發者工具觀察點擊下一頁的動作：<br><img src="NextPageQuery1.png" alt="Form Data 1"><br><img src="NextPageQuery2.png" alt="Form Data 2"></p>
<p>Form Data有</p>
<ol>
<li>_EVENTTARGET</li>
<li>_VIEWSTATE</li>
<li>_VIEWGERNERATOR</li>
<li>_EVENTVALIDATION</li>
<li>ctl00$ContentPlaceHolder1$gvList$ctl01$ddlPage</li>
<li>ctl00$ContentPlaceHolder1$gvList$ctl24$ddlPage</li>
</ol>
<p>這6個值，其中_EVENTTARGET是固定的；ctl00$ContentPlaceHolder1$gvList$ctl01$ddlPage和ctl00$ContentPlaceHolder1$gvList$ctl24$ddlPage為從第幾頁過來和目前頁數-1</p>
<p>而2, 3, 4這三個值與cookie有關，在前一頁可取出這些值。於是程式碼需改寫成：</p>
<figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Request = <span class="built_in">require</span>(<span class="string">'request'</span>);</div><div class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> request = Request.defaults(&#123;</div><div class="line">  jar: <span class="literal">true</span>,</div><div class="line">  timeout: <span class="number">60</span> * <span class="number">1000</span>,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">request.post(&#123;</div><div class="line">  url: <span class="string">'http://www.laws.taipei.gov.tw/lawsystem/wfLaw_Interpretation_SearchResult.aspx'</span>,</div><div class="line">  form: &#123;</div><div class="line">    TCGC: <span class="string">'003010'</span>,</div><div class="line">    TLC1: <span class="string">'AND'</span>,</div><div class="line">    TLC2: <span class="string">'AND'</span>,</div><div class="line">    TADF: <span class="string">'1050101'</span>,</div><div class="line">    TADT: <span class="string">'1051231'</span></div><div class="line">  &#125;,</div><div class="line">&#125;, (error, response, body) =&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (error) &#123;</div><div class="line">    <span class="built_in">console</span>.error(error);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (response.statusCode !== <span class="number">200</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(response.statusCode);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> $ = cheerio.load(body);</div><div class="line">  <span class="comment">// Get next page raw HTML</span></div><div class="line">  <span class="keyword">const</span> eventValidation = $(<span class="string">'#__EVENTVALIDATION'</span>).val();</div><div class="line">  <span class="keyword">const</span> viewState = $(<span class="string">'#__VIEWSTATE'</span>).val();</div><div class="line">  <span class="keyword">const</span> viewStateGenerator = $(<span class="string">'#__VIEWSTATEGENERATOR'</span>).val();</div><div class="line"></div><div class="line">  request.post(&#123;</div><div class="line">      url:  <span class="string">'http://www.laws.taipei.gov.tw/lawsystem/wfLaw_Interpretation_SearchResult.aspx'</span>,</div><div class="line">      form: &#123;</div><div class="line">        __EVENTTARGET:                                  <span class="string">'ctl00$ContentPlaceHolder1$gvList$ctl01$ddlPage'</span>,</div><div class="line">        __VIEWSTATE:                                    viewState,</div><div class="line">        __VIEWSTATEGENERATOR:                           viewStateGenerator,</div><div class="line">        __EVENTVALIDATION:                              eventValidation,</div><div class="line">        ctl00$ContentPlaceHolder1$gvList$ctl01$ddlPage: <span class="number">1</span>,</div><div class="line">        ctl00$ContentPlaceHolder1$gvList$ctl24$ddlPage: <span class="number">1</span></div><div class="line">      &#125;,</div><div class="line">    &#125;, (err, resp, nextPage) =&gt; &#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.error(err);</div><div class="line">        callback(err);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="built_in">console</span>.log(nextPage);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p>取得第一個頁面後，記下view state等內容，再送出一個request並帶入剛才得到的狀態。如此可印出下一頁的內容。</p>
<p>最後給個提醒，面對這種動態網站時，如果我們使用async queue一次跑多個worker抓取資料，request的設定就不能使用default。原因是很有可能不同worker會用到同一個request object去query，假如A worker在抓取第二頁時，B worker送出另一個第二頁的query，會發生回傳內容不如預期的情況。<br>這時我們需要改變request object為區域變數，並且使用request.jar()取得custom cookie jar，範例如下：</p>
<figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">crawler4DynamicPage</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">const</span> customJar = request.jar();</div><div class="line">  	<span class="keyword">const</span> options = &#123;</div><div class="line">    	jar:     customJar,</div><div class="line">    	timeout: <span class="number">60</span> * <span class="number">1000</span>,</div><div class="line">  	&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>送query時再帶入options，這樣才能避免worker之間打架的情形</p>
<p><a href="http://yhsiang.logdown.com/posts/2014/05/10/how-to-write-a-crawler" target="_blank" rel="external">參考資料</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 前陣子工作上需要寫爬蟲撈政府機關的資料回來，一般的靜態網頁可以由URL的規則找到資料連結，而動態網頁常無法使用此方式。最常遇到的是client端按下button後送javascript的動作給後端，然後才render網頁。&lt;/p&gt;
&lt;p&gt; 這篇簡單記錄如何抓取這類型網站的資料。&lt;br&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://kuroro0718.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB初探及CRUD筆記</title>
    <link href="https://kuroro0718.github.io/MongoDB%E5%88%9D%E6%8E%A2%E5%8F%8ACRUD%E7%AD%86%E8%A8%98/"/>
    <id>https://kuroro0718.github.io/MongoDB初探及CRUD筆記/</id>
    <published>2017-01-23T13:40:58.000Z</published>
    <updated>2017-02-05T07:08:16.000Z</updated>
    
    <content type="html"><![CDATA[<p> 由於工作的關係開始使用MongoDB，我註冊官方的<a href="https://university.mongodb.com/courses/M101JS/about" target="_blank" rel="external">MongoDB for Node.js Developer</a>及<a href="https://university.mongodb.com/courses/M102/about" target="_blank" rel="external">MongoDB for DBAS</a>。這一系列文章為上課筆記和心得。</p>
 <a id="more"></a>
<p>MongoDB是NoSQL的其中一種類別，它是document-base，適合存放文檔類型的database。<br>而NoSQL主要改善傳統SQL database在join table的操作，在系統scale-out時能降低複雜度及改善效能。</p>
<p>一般來說，NoSQL不需要shema（專案需要加上schema的規則也是可以）採用key-value的存取方式，其格式類似json，以下介紹MongoDB CRUD的操作。</p>
<h2 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h2><p>假設本地端己建立一個collection名為movieDetails。其內容格式如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">"_id"</span> : ObjectId(<span class="string">"569190ca24de1e0ce2dfcd4f"</span>),</div><div class="line">	<span class="attr">"title"</span> : <span class="string">"Once Upon a Time in the West"</span>,</div><div class="line">	<span class="attr">"year"</span> : <span class="number">1968</span>,</div><div class="line">	<span class="attr">"rated"</span> : <span class="string">"PG-13"</span>,</div><div class="line">	<span class="attr">"released"</span> : ISODate(<span class="string">"1968-12-21T05:00:00Z"</span>),</div><div class="line">	<span class="attr">"runtime"</span> : <span class="number">175</span>,</div><div class="line">	<span class="attr">"countries"</span> : [</div><div class="line">		<span class="string">"Italy"</span>,</div><div class="line">		<span class="string">"USA"</span>,</div><div class="line">		<span class="string">"Spain"</span></div><div class="line">	],</div><div class="line">	<span class="attr">"genres"</span> : [</div><div class="line">		<span class="string">"Western"</span></div><div class="line">	],</div><div class="line">	<span class="attr">"director"</span> : <span class="string">"Sergio Leone"</span>,</div><div class="line">	<span class="attr">"writers"</span> : [</div><div class="line">		<span class="string">"Sergio Donati"</span>,</div><div class="line">		<span class="string">"Sergio Leone"</span>,</div><div class="line">		<span class="string">"Dario Argento"</span>,</div><div class="line">		<span class="string">"Bernardo Bertolucci"</span>,</div><div class="line">		<span class="string">"Sergio Leone"</span></div><div class="line">	],</div><div class="line">	<span class="attr">"actors"</span> : [</div><div class="line">		<span class="string">"Claudia Cardinale"</span>,</div><div class="line">		<span class="string">"Henry Fonda"</span>,</div><div class="line">		<span class="string">"Jason Robards"</span>,</div><div class="line">		<span class="string">"Charles Bronson"</span></div><div class="line">	],</div><div class="line">	<span class="attr">"imdb"</span> : &#123;</div><div class="line">		<span class="attr">"id"</span> : <span class="string">"tt0064116"</span>,</div><div class="line">		<span class="attr">"rating"</span> : <span class="number">8.6</span>,</div><div class="line">		<span class="attr">"votes"</span> : <span class="number">201283</span></div><div class="line">	&#125;,</div><div class="line">	<span class="attr">"metacritic"</span> : <span class="number">80</span>,</div><div class="line">	<span class="attr">"awards"</span> : &#123;</div><div class="line">		<span class="attr">"wins"</span> : <span class="number">4</span>,</div><div class="line">		<span class="attr">"nominations"</span> : <span class="number">5</span>,</div><div class="line">		<span class="attr">"text"</span> : <span class="string">"4 wins &amp; 5 nominations."</span></div><div class="line">	&#125;,</div><div class="line">	<span class="attr">"type"</span> : <span class="string">"movie"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果我要找出上映年份為2000年的電影，那該如何下指令呢？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; db.movieDetails.find(&#123;year: 2000&#125;).pretty()</div></pre></td></tr></table></figure>
<p>find為基本的query指令，{}裡是query條件，而pretty能讓輸出結果像上面那樣編排整齊。<br>如果query條件不只一個，則使用,分開。要注意的是欄位的型別，例如查詢string型別（例如<br>title）必需使用單引號包起來</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; db.movieDetails.find(&#123;title: <span class="string">'Once Upon a Time in the West'</span>&#125;).pretty()</div></pre></td></tr></table></figure>
<p>如果要限制query結果的數量可用limit；想依特定欄位排序則使用sort，skip可略過指定的數量的結果，例如</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; db.movieDetails.find(&#123; year: 1968 &#125;).sort(&#123; runtime: -1 &#125;).skip(10).limit(5)</div></pre></td></tr></table></figure>
<p>sort({ runtime: -1 })表示query結果依runtime的值做遞減排序；反之為1<br>skip(10)是省略前10筆結果；limit(5)表示只顯示5筆結果<br>要注意的是skip, sort和limit在實際運作時有預設的順序。分別為sort，skip最後才是limit</p>
<p>更多query方式請參考<a href="https://docs.mongodb.com/manual/tutorial/query-documents/" target="_blank" rel="external">官方文件</a></p>
<h2 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h2><p>建立資料則是使用insertOne或insertMany。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; db.movieDetails.insertOne(&#123; title: <span class="string">'Batman'</span>, year: 2008, runtime: 150 &#125;)</div></pre></td></tr></table></figure>
<p>上例是insertOne簡易的用法。{}裡的語法和find類似，我們可以建立指定的資料。<br>而insertMany則需要將多筆資料放在array裡：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; db.movieDetail.insertMany( [</div><div class="line">&gt;   &#123; title: <span class="string">'Batman'</span>, year: 2008, runtime: 150 &#125;,</div><div class="line">&gt;   &#123; title: <span class="string">'Taken'</span>, year: 2007, runtime: 124 &#125;,</div><div class="line">&gt;   &#123; title: <span class="string">'Iron Man'</span>, year: 2008, runtime: 130 &#125;</div><div class="line">&gt; ])</div></pre></td></tr></table></figure>
<h2 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h2><p>刪除資料可使用deleteOne, deleteMany和remove。<br>deleteOne及deleteMany和find一樣，必須給予query條件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; db.movieDetails.insertOne(&#123; title: <span class="string">'Batman'</span> &#125;)</div></pre></td></tr></table></figure>
<p>假如要刪除collection所有資料，則使用remove</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; db.movieDetails.remove()</div></pre></td></tr></table></figure>
<p>remove也可以只刪除一筆資料，例如</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; db.movieDetails.remove(&#123; title: <span class="string">'Batman'</span> &#125;, 1)</div></pre></td></tr></table></figure>
<p>只要給予justOne參數為1即可</p>
<h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><p>更新資料可使用updateOne和updateMany。假如加上upsert: true，如果沒找到資料會新增一筆進DB</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; db.movieDetails.updateOne(</div><div class="line">	&#123; title: <span class="string">'Batman'</span> &#125;,</div><div class="line">	&#123; title: <span class="string">'Batman 2'</span> &#125;,</div><div class="line">	&#123;</div><div class="line">		upsert: <span class="literal">true</span></div><div class="line">	&#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>上例中，我們將”Batman”資料的title更新為”Batman 2”，假如沒找到Batman這筆資料則新增一筆Batman 2</p>
<p>參考來源：<br><a href="https://docs.mongodb.com/manual/crud/" target="_blank" rel="external">官方文件</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 由於工作的關係開始使用MongoDB，我註冊官方的&lt;a href=&quot;https://university.mongodb.com/courses/M101JS/about&quot;&gt;MongoDB for Node.js Developer&lt;/a&gt;及&lt;a href=&quot;https://university.mongodb.com/courses/M102/about&quot;&gt;MongoDB for DBAS&lt;/a&gt;。這一系列文章為上課筆記和心得。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://kuroro0718.github.io/tags/Node-js/"/>
    
      <category term="MongoDB" scheme="https://kuroro0718.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>The Effective Engineer讀書筆記-Optimize for Learning</title>
    <link href="https://kuroro0718.github.io/The-Effective-Engineer%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98-Optimize-for-Learning/"/>
    <id>https://kuroro0718.github.io/The-Effective-Engineer讀書筆記-Optimize-for-Learning/</id>
    <published>2016-12-13T14:55:04.000Z</published>
    <updated>2016-12-13T14:59:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者在google瀏覽source code及內部工具，學習程式語言的best practice<br>和同事們合作開發working demo並呈現給創辦人<br>二年後離開google，因為那裡己經不是適合的學習環境<br>接下來加入startup，尋求最大化自我成長</p>
<blockquote>
<p>最佳化學習是high leverage的項目 找到適合成長的環境</p>
</blockquote>
<a id="more"></a>
<h3 id="Adopt-a-Growth-Mindset"><a href="#Adopt-a-Growth-Mindset" class="headerlink" title="Adopt a Growth Mindset"></a>Adopt a Growth Mindset</h3><p>跨出自己的舒適圈</p>
<blockquote>
<p>別讓過去的經驗困住自己，別害怕學習新技能<br>決定論 vs 目的論<br>前者認為過去的經驗影響現在的自己；後者認為設定未來的自己才是目的<br>own your story</p>
</blockquote>
<h3 id="Invest-in-Your-Rate-of-Learning"><a href="#Invest-in-Your-Rate-of-Learning" class="headerlink" title="Invest in Your Rate of Learning"></a>Invest in Your Rate of Learning</h3><p>在學習初期，進步的幅度會很慢，但只要持續下去，後期會呈指數型成長<br>成長的百分比1%會影響結果很大<br>長期做重複性高的工作對成長沒有幫助</p>
<blockquote>
<p>thinking yourself as a startup or product<br>每天進步1%，一年後會成長37倍</p>
</blockquote>
<h3 id="Seek-Work-Environments-Conducive-to-Learning"><a href="#Seek-Work-Environments-Conducive-to-Learning" class="headerlink" title="Seek Work Environments Conducive to Learning"></a>Seek Work Environments Conducive to Learning</h3><p>六個選擇新環境的因素</p>
<ol>
<li>Fast growth</li>
<li>Training</li>
<li>開放心態</li>
<li>迅速回饋</li>
<li>同事</li>
<li>自主</li>
</ol>
<h3 id="Dedicate-Time-on-the-Job-to-Develop-New-Skills"><a href="#Dedicate-Time-on-the-Job-to-Develop-New-Skills" class="headerlink" title="Dedicate Time on the Job to Develop New Skills"></a>Dedicate Time on the Job to Develop New Skills</h3><p>20% time working on side project or learning new skills<br>擴展自己的能力圈(by reading, online course, writing code)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者在google瀏覽source code及內部工具，學習程式語言的best practice&lt;br&gt;和同事們合作開發working demo並呈現給創辦人&lt;br&gt;二年後離開google，因為那裡己經不是適合的學習環境&lt;br&gt;接下來加入startup，尋求最大化自我成長&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最佳化學習是high leverage的項目 找到適合成長的環境&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="讀書筆記" scheme="https://kuroro0718.github.io/tags/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>The Effective Engineer讀書筆記-Focus on High-Leverage Activities</title>
    <link href="https://kuroro0718.github.io/The-Effective-Engineer%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98-Focus-on-High-Leverage-Activities/"/>
    <id>https://kuroro0718.github.io/The-Effective-Engineer讀書筆記-Focus-on-High-Leverage-Activities/</id>
    <published>2016-12-06T13:36:48.000Z</published>
    <updated>2016-12-06T14:05:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>今年7月我參加一個雲端讀書會，主題為這本<a href="https://www.amazon.com/Effective-Engineer-Engineering-Disproportionate-Meaningful/dp/0996128107" target="_blank" rel="external">The Effective Engineer</a>。這本書由一位前google工程師撰寫，整本書圍繞在一個中心思想：如何讓工程師在有限的時間內產出最多的價值。</p>
<p>在讀這本書不僅學到一流人才的思考邏輯，同時也認識一群努力學習的好夥伴。我將這十週的讀書筆記整理在這系列的文章。</p>
<a id="more"></a>
<p>本書前言裡作者提出一個問題：是什麼原因讓那些最有效率的工程師與一般工程師的產出有很大的差距？<br>他使用leverage（槓桿）這個詞來檢視工程師的績效，意即好的工程師會將時間花在對工作和團隊最有效益的地方，工作項目leverage越高表示產出越大。</p>
<p>作者在章節裡提出幾項檢視的問題：</p>
<h2 id="3個自我檢視問題："><a href="#3個自我檢視問題：" class="headerlink" title="3個自我檢視問題："></a>3個自我檢視問題：</h2><ol>
<li>How can I complete this activity in a shorter amount of time?</li>
<li>How can I increase the value produced by this activity?</li>
<li>Is there something else that I could spend my time on that would produce more value?</li>
</ol>
<h2 id="提高leverage的方法："><a href="#提高leverage的方法：" class="headerlink" title="提高leverage的方法："></a>提高leverage的方法：</h2><ol>
<li>從縮短開會時間著手（先定義會議的目的，不要為了開會而開會）</li>
<li>減少開發或測試手動的比例（導入CI）</li>
<li>針對工作排出優先順序，找出最大價值的項目</li>
<li>找出客戶最大的痛點（網站裝線上客服，想辦法收集客戶的feedback）</li>
<li>使用profiling tool找出系統的bottleneck （或是找出客戶使用app卡住的地方）</li>
<li>建立onboarding flow（可設計像treehouse或其它線上程式教學網站的內容）</li>
</ol>
<h2 id="ORID練習"><a href="#ORID練習" class="headerlink" title="ORID練習"></a>ORID練習</h2><p>在讀書會中，organizer提倡使用ORID來討論事情。ORID為四個層次的問題，分別為Objective(客觀性層次)、Reflective(反應性層次)、Interpretive(詮釋性層次)、Decisional(決定性層次)。</p>
<ul>
<li>O: 作者在Quora建立onboarding flow，幫助新進工程師快速進入狀況<br>   之前待過的公司，不管團隊人數(200人或10人)，缺乏訓練規劃讓新進工程師容易犯錯</li>
<li>R:  新成員不敢更動code base，對產品和流程一知半解。還是得由資深RD指導</li>
<li>I:   如果建立onboarding flow，公司能節省training的總成本，新加入的工程師能很快就戰鬥位置</li>
<li>D:  在選擇公司時，將訓練這一環列入考慮(對新手來說); 公司的資深人員可討論如何建立onboarding flow</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年7月我參加一個雲端讀書會，主題為這本&lt;a href=&quot;https://www.amazon.com/Effective-Engineer-Engineering-Disproportionate-Meaningful/dp/0996128107&quot;&gt;The Effective Engineer&lt;/a&gt;。這本書由一位前google工程師撰寫，整本書圍繞在一個中心思想：如何讓工程師在有限的時間內產出最多的價值。&lt;/p&gt;
&lt;p&gt;在讀這本書不僅學到一流人才的思考邏輯，同時也認識一群努力學習的好夥伴。我將這十週的讀書筆記整理在這系列的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="讀書筆記" scheme="https://kuroro0718.github.io/tags/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS Event Emitter介紹</title>
    <link href="https://kuroro0718.github.io/NodeJS-Event-Emitter%E4%BB%8B%E7%B4%B9/"/>
    <id>https://kuroro0718.github.io/NodeJS-Event-Emitter介紹/</id>
    <published>2016-12-04T04:54:02.000Z</published>
    <updated>2017-02-05T07:05:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>NodeJS是以非同步事件驅動為導向的設計，而基本的事件要有發射端和接受端，以下做個介紹。</p>
<a id="more"></a>
<p>NodeJS有二種event: system event和custom event<br>前者為底層操作如檔案系統和網路協定，以C++為核心寫在libuv裡<br>後者是本文要介紹的event emitter</p>
<p>以下範例實做簡單的event emitter</p>
<figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Emitter = <span class="built_in">require</span>(<span class="string">'./emitter'</span>);</div><div class="line"><span class="keyword">var</span> emtr = <span class="keyword">new</span> Emitter();</div><div class="line"></div><div class="line">emtr.on(<span class="string">'greet'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello, this is Alex'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">emtr.on(<span class="string">'greet'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Thanks'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</div><div class="line">emtr.emit(<span class="string">'greet'</span>);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>emitter.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Emitter</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.events = &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Emitter.prototype.on = <span class="function"><span class="keyword">function</span>(<span class="params">type, listener</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.events[type] = <span class="keyword">this</span>.events[type] || [];</div><div class="line">    <span class="keyword">this</span>.events[type].push(listener);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Emitter.prototype.emit = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.events[type]) &#123;</div><div class="line">        <span class="keyword">this</span>.events[type].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">listener</span>) </span>&#123;</div><div class="line">            listener();</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = Emitter;</div></pre></td></tr></table></figure>
<p>在emitter.js中，我們先宣告Emitter，其中包含一個空的events property。<br>接著定義on，此為事件的接收端，每次有人呼叫on時，將listener加入陣列中；emit則是發射端(emitter在電子學裡為電晶體的發射極，沒想到會借用這個字）負責把同類型事件的listener都執行一次</p>
<p>而app.js一開始先定義’greet’這個event的二個listener，再來呼叫emit，最後的結果如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ Hello</div><div class="line">$ Hello, this is Alex</div><div class="line">$ Thanks</div></pre></td></tr></table></figure>
<p>從上例知道emitter的實作後，我們改用內建的events api來實作：</p>
<figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Emitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"><span class="keyword">var</span> emtr = <span class="keyword">new</span> Emitter();</div><div class="line"></div><div class="line">emtr.on(<span class="string">'greet'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello, this is Alex'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">emtr.on(<span class="string">'greet'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Thanks'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</div><div class="line">emtr.emit(<span class="string">'greet'</span>);</div></pre></td></tr></table></figure>
<p>其實只要改成require內建的events即可。但這個程式還有一個問題：出現很多次’greet’這個magic string。我們可以使用config.js將其包裝：</p>
<figure class="highlight javascript"><figcaption><span>config.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    events : &#123;</div><div class="line">        GREET: <span class="string">'greet'</span>,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Emitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"><span class="keyword">var</span> eventConfig = <span class="built_in">require</span>(<span class="string">'./config'</span>).events;</div><div class="line"></div><div class="line"><span class="keyword">var</span> emtr = <span class="keyword">new</span> Emitter();</div><div class="line"></div><div class="line">emtr.on(eventConfig.GREET, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello, this is Alex'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">emtr.on(eventConfig.GREET, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Thanks'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</div><div class="line">emtr.emit(<span class="string">'greet'</span>);</div></pre></td></tr></table></figure>
<p>如此一來，以後要加入／修改事件類型，只要改config.js就好，省去許多複製貼上和debug的時間。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NodeJS是以非同步事件驅動為導向的設計，而基本的事件要有發射端和接受端，以下做個介紹。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://kuroro0718.github.io/tags/javascript/"/>
    
      <category term="Node.js" scheme="https://kuroro0718.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>一天搞懂深度學習課後心得</title>
    <link href="https://kuroro0718.github.io/%E4%B8%80%E5%A4%A9%E6%90%9E%E6%87%82%E6%B7%B1%E5%BA%A6%E5%AD%B8%E7%BF%92%E8%AA%B2%E5%BE%8C%E5%BF%83%E5%BE%97/"/>
    <id>https://kuroro0718.github.io/一天搞懂深度學習課後心得/</id>
    <published>2016-11-27T01:11:58.000Z</published>
    <updated>2016-12-04T04:49:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>11/26參加台灣資料科學年會辦的”一天搞懂深度學習”，由台大李宏毅老師主講。<br>碩班曾接觸過機器學習，學習SVM,hMM和KNN等方法做分類和辯識，也使用matlab寫程式實作演算法。<br>那個時候才知道線性代數和機率如何應用在機器學習。而近年來深度學習的竄起，也讓我對這個題目感到好奇，所以報名這次的講座。</p>
<a id="more"></a>
<h2 id="Introduction-of-Deep-Learning"><a href="#Introduction-of-Deep-Learning" class="headerlink" title="Introduction of Deep Learning"></a>Introduction of Deep Learning</h2><p>一開始先介紹machine learning，它的目的是找出一個function可以辯識聲音，影像的內容；或是指導電腦在特定情境下做出回應，如下圍棋。<br>做過machine learning的人都知道，最大的挑戰在於針對問題找出合適的feature，然後建構function來解決特定問題。</p>
<p>也就是說，今天我要分辯影像中有沒有狗，那第一步得先研究狗的影像特徵是什麼？ 是形狀？顏色？或是其它空間的特徵？<br>有了特徵就能進一步建立數學式或是套用機器學習的模型，在餵給系統夠多的training data之後，丟給它一組testing data看結果如何</p>
<p>這個過程在deep learning就不太一樣了，我們一樣需要準備training data和testing data，但”訓練”的過程是調整deep learning的model和參數。</p>
<p>deep learning是由<a href="https://en.wikipedia.org/wiki/Artificial_neural_network" target="_blank" rel="external">Neural Network</a>建構。基本單位是neuron，是一個input * weights + bias再經過activation function的model。</p>
<p>Neural Network正是許多neuron所建立的網絡，將網絡決定好後也就得到一組function set。</p>
<p>這裡老師特別講解為何是”deep”而不是”fat”，其原因和電子電路一樣，我們可以使用簡單的邏輯閘（and,or,not)去組成複雜的電路。優點是參數的量會減少，也就是更有效率。</p>
<p>有了function set，便要估算它的效果。這裡會計算output和ground truth(上課是用target，在碩班時我們都習慣稱ground truth)之間的落差，也就是loss</p>
<p>老師用了一個非常有趣的例子說明為何找不到全域中最小的loss，在各種數學式的課程裡加進實際的例子會讓學生比較有感覺，效果也更好。</p>
<p>live demo使用<a href="https://keras.io/" target="_blank" rel="external">Keras</a>分辯手寫數字影像，在GPU和各種tuning parameter的手法下，不用一分鐘就能達到95%的正確率，心裡想如果以前有這個工具，做研究也能快上許多。</p>
<p>在QA時間，老師也說明遇到未知問題時，不見得要用deep learning的手法來解決，可以試著先用SVM。</p>
<h2 id="Deep-Learning-Model"><a href="#Deep-Learning-Model" class="headerlink" title="Deep Learning Model"></a>Deep Learning Model</h2><p>這個session介紹二種learning model: CNN和RNN<br>CNN將問題拆解成各種子問題，特別適合用在影像處理上。例如我們能建立第一層layer處理顏色；第二層處理紋路材質。<br>透過downsampling便很適合餵給CNN處理</p>
<p>CNN的另一種應用是套用style，網路上常有人分享使用deep learning將某種風格的畫作套用在照片上，便是使用此手法。</p>
<p>另一種model是RNN，擁有記憶功能，適合用在文字和語音等長度不一及前後文相關的問題上。<br>舉例來說，好棒和好棒棒這個二詞只差一個字但意思差很多的問題，便很適合用RNN來解決</p>
<h2 id="Beyond-Supervised-Learning"><a href="#Beyond-Supervised-Learning" class="headerlink" title="Beyond Supervised Learning"></a>Beyond Supervised Learning</h2><p>這節是我覺得deep learning最神奇的地方。</p>
<p>這個手法的重點是將encoder和decoder的輸出輸入接起來，讓encoder的輸入和decoder的輸出越接近越好，由此可得到一個auto-encoder<br>而auto-encoder也可以拿來當neural network的pre-train<br>最後我們能餵給大量training data情況下自動完成分類</p>
<p>另一種auto-encoder，Variational Auto Encoder(VAE)可幫助RNN提升正確率，而且它能透過演化讓結果越來越好</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>今天的演講充滿各種鄉民梗，也讓本來生硬的內容活潑易懂。<br>最後老師也以成為武林高手的條件來勉勵大家，要內外兼修才能達到高手的境界，也就是具備運算環境和解決問題的技巧。<br>一整天下來有點累，但也蠻多收獲的，知道現在的技術能達到什麼程度，以及該如何使用。<br>至於做的好不好就要看經驗啦 XD</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;11/26參加台灣資料科學年會辦的”一天搞懂深度學習”，由台大李宏毅老師主講。&lt;br&gt;碩班曾接觸過機器學習，學習SVM,hMM和KNN等方法做分類和辯識，也使用matlab寫程式實作演算法。&lt;br&gt;那個時候才知道線性代數和機率如何應用在機器學習。而近年來深度學習的竄起，也讓我對這個題目感到好奇，所以報名這次的講座。&lt;/p&gt;
    
    </summary>
    
    
      <category term="演講筆記" scheme="https://kuroro0718.github.io/tags/%E6%BC%94%E8%AC%9B%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS - 初探Module (2)</title>
    <link href="https://kuroro0718.github.io/NodeJS%E5%88%9D%E6%8E%A2-Module-Exports-2/"/>
    <id>https://kuroro0718.github.io/NodeJS初探-Module-Exports-2/</id>
    <published>2016-11-25T05:12:51.000Z</published>
    <updated>2017-02-05T07:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://kuroro0718.github.io/NodeJS%E5%88%9D%E6%8E%A2-Module-Exports-1/">上一篇</a>介紹module.export的使用方式，這一篇介紹它的底層和其它用法</p>
<a id="more"></a>
<h3 id="引入整個資料夾"><a href="#引入整個資料夾" class="headerlink" title="引入整個資料夾"></a>引入整個資料夾</h3><p>我們可以將一個module拆成數個js檔案，利用一個index.js便可將整個資料夾打包給其它檔案使用</p>
<figure class="highlight javascript"><figcaption><span>payment/index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> creditCard = <span class="built_in">require</span>(<span class="string">'credit_card'</span>);</div><div class="line"><span class="keyword">var</span> atmTransfer = <span class="built_in">require</span>(<span class="string">'atm'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.export = &#123;</div><div class="line">	creditCard: creditCard,</div><div class="line">	atmTransfer: atmTransfer</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight"><figcaption><span>payment/credit_card.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var payment = function(price) &#123;</div><div class="line"> 	console.log('Pay $' + price + 'by credit card");</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.export = payment;</div></pre></td></tr></table></figure>
<figure class="highlight"><figcaption><span>payment/atm.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var payment = function(price) &#123;</div><div class="line">	console.log('Pay $' + price + 'by ATM transfer");</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.export = payment;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> payment = <span class="built_in">require</span>(<span class="string">'./payment'</span>);</div><div class="line"></div><div class="line">payment.creditCard();</div><div class="line">payment.atmTransfer();</div></pre></td></tr></table></figure>
<p>上例將payment底下二種不同的付款方式包在index.js檔案給外部使用</p>
<h3 id="利用json檔將設定包裝起來"><a href="#利用json檔將設定包裝起來" class="headerlink" title="利用json檔將設定包裝起來"></a>利用json檔將設定包裝起來</h3><figure class="highlight javascript"><figcaption><span>currency.json</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="string">"tw"</span>: <span class="string">"NTD"</span>,</div><div class="line">	<span class="string">"us"</span>: <span class="string">"USD"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight"><figcaption><span>payment/credit_card.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var currency = require('./currency.json');</div><div class="line"></div><div class="line">var payment = function(price) &#123;</div><div class="line">	console.log('Pay $' + price + ' ' + currency.us + 'by credit card");</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.export = payment;</div></pre></td></tr></table></figure>
<p>用這個方式可將設定值包裝成json檔，增加source code的可讀性</p>
<h3 id="原生module"><a href="#原生module" class="headerlink" title="原生module"></a>原生module</h3><p>NodeJS內建許多原生module，這裡是<a href="https://nodejs.org/dist/latest-v6.x/docs/api/" target="_blank" rel="external">api ducuments</a>。我們以util為例</p>
<figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> price = <span class="number">100</span>;</div><div class="line"><span class="keyword">var</span> statement = util.format(<span class="string">'The price is %s'</span>, price);</div><div class="line">util.log(statement);</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ 28 Nov 14:54:32 - The price is 100</div></pre></td></tr></table></figure>
<p>原生module己提供一些方便的功能，遇到問題時上官網查文件說不定己有解決方案</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://kuroro0718.github.io/NodeJS%E5%88%9D%E6%8E%A2-Module-Exports-1/&quot;&gt;上一篇&lt;/a&gt;介紹module.export的使用方式，這一篇介紹它的底層和其它用法&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://kuroro0718.github.io/tags/javascript/"/>
    
      <category term="Node.js" scheme="https://kuroro0718.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS - 初探Module (1)</title>
    <link href="https://kuroro0718.github.io/NodeJS%E5%88%9D%E6%8E%A2-Module-Exports-1/"/>
    <id>https://kuroro0718.github.io/NodeJS初探-Module-Exports-1/</id>
    <published>2016-11-22T06:13:19.000Z</published>
    <updated>2017-02-05T07:06:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>在學習NodeJS的過程中，module是結構化程式基本的組塊。<br>我們能藉由module將各function block分開來，並且在主程式引用其method或property<br>然而，要使用module的method或property有許多方式，本文整理常用的幾種並說明特性。</p>
<a id="more"></a>
<h2 id="Module基本使用方式"><a href="#Module基本使用方式" class="headerlink" title="Module基本使用方式"></a>Module基本使用方式</h2><p>假設我們有二個js程式：app.js和greet.js，想要讓app.js使用greet.js的method，則需要使用module</p>
<figure class="highlight javascript"><figcaption><span>greet.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> greet = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = greet;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> greet = <span class="built_in">require</span>(<span class="string">'./greet'</span>);</div><div class="line">greet();</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; Hello</div></pre></td></tr></table></figure>
<p>要在app.js使用greet.js的greet方法，得先require greet.js<br>require預設是引入javascript檔案，所以副檔名可省略。<br>而greet.js中，將greet這個函式變數設為module.exports的參考<br>module.exports其實是個object，供其它js檔案使用其method</p>
<p>上述的寫法可以簡化為：<br><figure class="highlight javascript"><figcaption><span>greet.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> greet = <span class="built_in">require</span>(<span class="string">'./greet'</span>);</div><div class="line">greet();</div></pre></td></tr></table></figure>
<p>也是一樣的結果</p>
<h2 id="使用Function-Expression"><a href="#使用Function-Expression" class="headerlink" title="使用Function Expression"></a>使用Function Expression</h2><figure class="highlight javascript"><figcaption><span>greet2.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports.greet = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello World'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> greet2 = <span class="built_in">require</span>(<span class="string">'./greet2'</span>).greet;</div><div class="line">greet2();</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; Hello World</div></pre></td></tr></table></figure>
<p>利用function expression讓module.exports多一個method</p>
<h2 id="使用Function-Constructor"><a href="#使用Function-Constructor" class="headerlink" title="使用Function Constructor"></a>使用Function Constructor</h2><figure class="highlight javascript"><figcaption><span>greet3.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greetr</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.greeting = <span class="string">'Hello world!!'</span>;</div><div class="line">	<span class="keyword">this</span>.greet = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.greeting);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> Greetr();</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> greet3 = <span class="built_in">require</span>(<span class="string">'./greet3'</span>);</div><div class="line">greet3.greet();</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; Hello world!!</div></pre></td></tr></table></figure>
<p>使用function constructor建立object，並利用this存取function<br>module.exports則指向新的function constructor</p>
<p>此例有個需要注意的地方，假如我在app.js改變greeting的值，會發生什麼事？？<br><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> greet3 = <span class="built_in">require</span>(<span class="string">'./greet3'</span>);</div><div class="line">greet3.greeting = <span class="string">'Changed'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> greet3b = <span class="built_in">require</span>(<span class="string">'./greet3'</span>);</div><div class="line">greet3b.greet();</div></pre></td></tr></table></figure></p>
<p>改變greeting的值以後，我們再require greet3並且呼叫method，則結果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; Hello world!!</div><div class="line">&gt; Changed</div></pre></td></tr></table></figure></p>
<p>這裡帶出一個module重要的特性：NodeJs的核心會cache同一個module的參考，所以當我們宣告greet3b為greet3的object時，其實底層是回傳上一個greet3的參考，而此時greeting己被改變。</p>
<p>所以在不同的js檔案使用同一個module時，需注意其實回傳的都是同一份copy</p>
<h2 id="Function-Constructor變形"><a href="#Function-Constructor變形" class="headerlink" title="Function Constructor變形"></a>Function Constructor變形</h2><figure class="highlight javascript"><figcaption><span>greet4.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greetr</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.greeting = <span class="string">'Hello world!！!'</span>;</div><div class="line">	<span class="keyword">this</span>.greet = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.greeting);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = Greetr;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> greet4 = <span class="built_in">require</span>(<span class="string">'./greet4'</span>);</div><div class="line"><span class="keyword">var</span> greetr = <span class="keyword">new</span> greet4();</div><div class="line">greetr.greet();</div></pre></td></tr></table></figure>
<p>這種方式把建構子放在app.js，所以不會有二個require指向同一份copy</p>
<h2 id="Revealing-Module-Pattern"><a href="#Revealing-Module-Pattern" class="headerlink" title="Revealing Module Pattern"></a>Revealing Module Pattern</h2><figure class="highlight javascript"><figcaption><span>greet5.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> greeting = <span class="string">'Hello JS!'</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(greeting);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">	greet: greet</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> greet5 = <span class="built_in">require</span>(<span class="string">'./greet5'</span>).greet;</div><div class="line">greet5();</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; Hello JS!</div></pre></td></tr></table></figure>
<p>這裡我們使用object並把greet指向greet methond，所以module.exports只能存取greet而不會改到其它值<br>這種方式也稱為Revealing Module Pattern，在javascript中是常用的包裝方式。</p>
<p>以上為NodeJS使用module.exports的幾種方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在學習NodeJS的過程中，module是結構化程式基本的組塊。&lt;br&gt;我們能藉由module將各function block分開來，並且在主程式引用其method或property&lt;br&gt;然而，要使用module的method或property有許多方式，本文整理常用的幾種並說明特性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://kuroro0718.github.io/tags/javascript/"/>
    
      <category term="Node.js" scheme="https://kuroro0718.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Retain cycle and capture list in Swift</title>
    <link href="https://kuroro0718.github.io/Retain-cycle-and-capture-list-in-Swift/"/>
    <id>https://kuroro0718.github.io/Retain-cycle-and-capture-list-in-Swift/</id>
    <published>2016-11-14T14:27:27.000Z</published>
    <updated>2016-11-14T14:28:18.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="swift" scheme="https://kuroro0718.github.io/tags/swift/"/>
    
      <category term="ios" scheme="https://kuroro0718.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>寄物便開發週記W3: 完成初版</title>
    <link href="https://kuroro0718.github.io/%E5%AF%84%E7%89%A9%E4%BE%BF%E9%96%8B%E7%99%BC%E9%80%B1%E8%A8%98W3-%E5%AE%8C%E6%88%90%E5%88%9D%E7%89%88/"/>
    <id>https://kuroro0718.github.io/寄物便開發週記W3-完成初版/</id>
    <published>2016-10-23T13:33:35.000Z</published>
    <updated>2016-10-23T14:21:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://kuroro0718.github.io/寄物便開發週記W2-開始動工">上一篇</a>提到開發商家地圖和簡介的部分。</p>
<p>本週則是完成畫面最複雜的頁面。</p>
<a id="more"></a>
<p>依照設計師的初稿，第一個頁面要能讓使用者選擇寄物件數和寄/取物的時間</p>
<p>我第一版的畫面如下</p>
<p><img src="first-snapshot.png" alt="first-snapshot"><br>構想是使用者點選件數或時間文字時，會跑出數字picker或date picker</p>
<p>不囉嗦，先看完成品的操作畫面<br><img src="bagkeeper.gif" alt="Bagkeeper 操作畫面"></p>
<p>為了讓使用者能以最少的動作完成工作，我們將數字或時間選擇的部分做自動收合</p>
<p>時間的部分是參考apple內建的行事曆，更改寄物時間時，上方的時間文字和下方的取物時間會跟著變動;連取物時間的picker也有連動。</p>
<p>整個畫面使用tableview controller完成。使用5個section（包含最下面的送出按鈕），除了最後一個section外，其餘都有2個row，也就是picker的部分。</p>
<p>預設每個section只顯示一個row。當使用者點選某一個section時，會判斷該section的row number，接著改變其值，便能夠做到收合的效果。</p>
<p>而date picker的部分，由於寄物時間的picker會影響到其它三個元件。所以這裡使用notification來通知其它元件。</p>
<p>接下來就是demo day了。這三週比之前上班還累，但也蠻充實的。<br>希望demo day能夠順利介紹寄物便，為這10週畫下美好的句點！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;https://kuroro0718.github.io/寄物便開發週記W2-開始動工&quot;&gt;上一篇&lt;/a&gt;提到開發商家地圖和簡介的部分。&lt;/p&gt;
&lt;p&gt;本週則是完成畫面最複雜的頁面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="swift" scheme="https://kuroro0718.github.io/tags/swift/"/>
    
      <category term="ios" scheme="https://kuroro0718.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>寄物便開發週記W2: 開始動工</title>
    <link href="https://kuroro0718.github.io/%E5%AF%84%E7%89%A9%E4%BE%BF%E9%96%8B%E7%99%BC%E9%80%B1%E8%A8%98W2-%E9%96%8B%E5%A7%8B%E5%8B%95%E5%B7%A5/"/>
    <id>https://kuroro0718.github.io/寄物便開發週記W2-開始動工/</id>
    <published>2016-10-12T15:44:05.000Z</published>
    <updated>2016-10-13T00:43:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>這週開始動工，因為地圖的部分較為複雜，所以先從它開始弄畫面</p>
<p>與後端串API的部分是先用postman發request，後端能正確新增訂單即可，剩下的細節等流程串起來再調整</p>
<a id="more"></a>
<p>一開始product designer給二張wireframe</p>
<p><img src="mapview.png" alt="Map"><br><img src="store-detail.png" alt="Store detail"></p>
<p>第一張比較麻煩的是下半部的商店簡介，這裡應該要能左右滑動且地圖中心點要移到商店座標</p>
<p>我使用一個隱藏的collection view，上面排好元件<br>使用者點選商家時，由商家名稱找出商家陣列中符合的index，再reload collection view的資料</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MapViewDelegate</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapView</span><span class="params">(mapView: MKMapView, didSelectAnnotationView view: MKAnnotationView)</span></span> &#123;</div><div class="line">       selectedAnnoView = storeList.indexOf &#123; (store) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></div><div class="line">           store.name! == (view.annotation?.title)!</div><div class="line">       &#125;!</div><div class="line">       storeCollectionView.reloadData()</div><div class="line">       storeCollectionView.hidden = <span class="literal">false</span></div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   </div><div class="line">   <span class="comment">// UICollectionViewDelegate</span></div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, willDisplayCell cell: UICollectionViewCell, forItemAtIndexPath indexPath: NSIndexPath)</span></span> &#123;</div><div class="line">       <span class="keyword">let</span> indexToDisplay = <span class="type">NSIndexPath</span>(forRow: selectedAnnoView, inSection: <span class="number">0</span>)</div><div class="line">       <span class="keyword">self</span>.storeCollectionView.scrollToItemAtIndexPath(indexToDisplay, atScrollPosition: .<span class="type">None</span>, animated: <span class="literal">false</span>)</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>使用者點選商家會觸發didSelectAnnotationView事件，找到商家後更新collection view<br>而collection view需要捲到相對應的cell，這裡需要willDisplayCell這個delegate的方法把剛才得到的index使用scrollToItemAtIndexPath捲動cell</p>
<p>點選collection view cell後可以進到該商家的頁面，這裡花了比較多時間刻出designer想要的畫面</p>
<p>原本第一版上半部商家圖片和下半部使用者評論都是使用collection view，但考量需要加入page controll後，上半部改用scroll view來做</p>
<p><img src="store-detail-v1.jpg" alt="Store detail v1"></p>
<p>但給其它同學測試，發現下半部的畫面會讓使用者不知道可以滑動<br>所以我把cell的寬度縮減一些</p>
<p><img src="store-detail-v2.jpg" alt="Store detail v2"><br>發現效果還是平平，改加一個框框後</p>
<p><img src="store-detail-v3.jpg" alt="Store detail v3"></p>
<p>CollectionViewCell程式碼<br><figure class="highlight swift"><figcaption><span>StoreCommentsCollectionViewCell</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StoreCommentsCollectionViewCell</span>: <span class="title">UICollectionViewCell</span> </span>&#123;</div><div class="line">   </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSubviews</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">self</span>.userImageView.clipsToBounds = <span class="literal">true</span></div><div class="line">        <span class="keyword">self</span>.userImageView.layer.cornerRadius = userImageView.frame.size.width / <span class="number">2</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(coder: aDecoder)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>) &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">drawRect</span><span class="params">(rect: CGRect)</span></span> &#123;</div><div class="line">        <span class="keyword">self</span>.layer.borderWidth = <span class="number">0.5</span></div><div class="line">        <span class="keyword">self</span>.layer.borderColor = <span class="type">UIColor</span>.blackColor().<span class="type">CGColor</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>這效果讓designer點頭，於是第一版的畫面就先定下來。</p>
<p>這中間討論的過程還算順利，也很慶幸自己沒有偷懶，看到wireframe先不要急著打搶，想辦法找答案做出來才是該有的態度。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這週開始動工，因為地圖的部分較為複雜，所以先從它開始弄畫面&lt;/p&gt;
&lt;p&gt;與後端串API的部分是先用postman發request，後端能正確新增訂單即可，剩下的細節等流程串起來再調整&lt;/p&gt;
    
    </summary>
    
    
      <category term="swift" scheme="https://kuroro0718.github.io/tags/swift/"/>
    
      <category term="ios" scheme="https://kuroro0718.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>讓APP在iOS 10能存取照相機</title>
    <link href="https://kuroro0718.github.io/%E8%AE%93APP%E5%9C%A8iOS-10%E8%83%BD%E5%AD%98%E5%8F%96%E7%85%A7%E7%9B%B8%E6%A9%9F/"/>
    <id>https://kuroro0718.github.io/讓APP在iOS-10能存取照相機/</id>
    <published>2016-10-05T15:23:43.000Z</published>
    <updated>2016-10-05T15:35:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>APP如果要在iOS 10的環境使用照相機，必須取得使用者同意(還有其它功能也需要，細節請參考<a href="http://useyourloaf.com/blog/privacy-settings-in-ios-10/" target="_blank" rel="external">連結</a>)</p>
<p>在寫mini project時，因為xcode 8需要手動加入設定，否則會出現錯誤訊息<br><a id="more"></a></p>
<blockquote>
<p>This app has crashed because it attempted to access privacy-sensitive data without a usage description. The app’s Info.plist must contain an NSCameraUsageDescription key with a string value explaining to the user how the app uses this data.</p>
</blockquote>
<p>log要我們加入NSCameraUsageDescription key到Info.plist</p>
<p>在專案的info.plist加上Privacy Camera Usage Description<br>並給它一個值</p>
<p><img src="info.png" alt="Info.plist"></p>
<p>完成後APP在iOS 10環境下執行時便會詢問使用者允不允許APP存取相機。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;APP如果要在iOS 10的環境使用照相機，必須取得使用者同意(還有其它功能也需要，細節請參考&lt;a href=&quot;http://useyourloaf.com/blog/privacy-settings-in-ios-10/&quot;&gt;連結&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;在寫mini project時，因為xcode 8需要手動加入設定，否則會出現錯誤訊息&lt;br&gt;
    
    </summary>
    
    
      <category term="ios" scheme="https://kuroro0718.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>如何建立專注的mind set</title>
    <link href="https://kuroro0718.github.io/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E5%B0%88%E6%B3%A8%E7%9A%84mind-set/"/>
    <id>https://kuroro0718.github.io/如何建立專注的mind-set/</id>
    <published>2016-10-02T14:36:26.000Z</published>
    <updated>2016-10-02T15:11:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了<a href="http://www.books.com.tw/products/0010712988" target="_blank" rel="external">為何這樣工作會快、準、好</a>，”專注”那一章給我帶來很大的啟發。</p>
<a id="more"></a>
<p>一開始作者以法航四四七班機失事的案例說明人在危急情況下，是如何容易被外界雜訊干擾而忘記基本的操作法則。</p>
<p>當飛機出現故障時，駕駛艙會出現各種警示音、螢幕不斷地跳出指令。此時正副機長該怎麼排除問題呢？ 讀到這個故事搭配前陣子看的<a href="https://www.youtube.com/watch?v=NGe7NmYbXo0" target="_blank" rel="external">薩利機長</a>，會有很深刻的印象。</p>
<p>當我們從熟悉的情境突然發生狀況，如下雨天車子失控打滑。假如沒有正確的觀念，駕駛可能會猛踩煞車進而導致意外。</p>
<p>於是，這本書提到我們該建立”心智模型”。也就是對可能發生的情況事先在腦中演練應對措施。當危急發生時，可以迅速排除雜訊，專注在解決問題本身。</p>
<p>這種在腦中演練的方式可以在許多領域見到: 賽車手會邊模擬開在賽道上每一個進彎出彎的動作、體育選手會想像比賽時和對手攻守的畫面。</p>
<p>以我自己的經驗來說。在前往景點拍照時，會先想像我要呈現的畫面，到當地時便能專心”找”心中的場景。</p>
<p>書中也提到另一場飛安事故，結局卻大不相同。原因是機長和副機長們平時建立心智模型，並在危急發生時把過去的經驗用在解決問題上;這也讓我想到一開始學打球時，教練對我說的一句話: 「比賽時你是不可能打出平常練習打不出來的球路」。</p>
<p>所以，要提升專注的方法在於平常對生活或工作建立”演練”的概念。當狀況來臨時，我們不只是靠本能反應在解決問題，而是清楚該怎麼做才能渡過危機。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看了&lt;a href=&quot;http://www.books.com.tw/products/0010712988&quot;&gt;為何這樣工作會快、準、好&lt;/a&gt;，”專注”那一章給我帶來很大的啟發。&lt;/p&gt;
    
    </summary>
    
    
      <category term="讀書筆記" scheme="https://kuroro0718.github.io/tags/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>寄物便開發週記: 從idea到MVP</title>
    <link href="https://kuroro0718.github.io/%E5%AF%84%E7%89%A9%E4%BE%BF%E9%96%8B%E7%99%BC%E9%80%B1%E8%A8%98-%E5%BE%9Eidea%E5%88%B0MVP/"/>
    <id>https://kuroro0718.github.io/寄物便開發週記-從idea到MVP/</id>
    <published>2016-10-01T13:20:11.000Z</published>
    <updated>2016-10-05T09:47:36.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>更新訂單和商家model 2016-10-05</li>
</ul>
<p>把腦中的想法從無到有實現出來，相信是工程師們最有成就感的時候<br>雖然現代的軟體開發哲學強調deliver fast。<br>但如果沒做好溝通和協調，做出來的產品歪掉也會讓工程師們充滿挫折感</p>
<p>我們把開發的過程記錄下來，以後回顧時能知道當初的決策過程。<br>在快速迭代中最重要的目的是能早點修正偏差並得到經驗</p>
<a id="more"></a>
<p><a href="http://www.bagkeeper.co" target="_blank" rel="external">寄物便 BagKeeper</a>的服務對象是需要在不同地點移動的人，提供寄物地點的媒合以省去身上大包小包的累贅。</p>
<p>概念上與Airbnb類似。對於MVP來說，我們需要展示使用者和店家的的操作平台，也就是APP和Web後台。</p>
<p>使用情境如下: </p>
<ol>
<li>使用者打開寄物便APP輸入寄物件數和時間</li>
<li>APP顯示地圖標出使用者附近符合條件的店家</li>
<li>使用者也能在地圖頁面搜尋指定的地點</li>
<li>找到店家後送出訂單並完成預約</li>
<li>商家在Web後台能看到訂單</li>
<li>使用者前往商家寄物，此時商家可以開始計時</li>
<li>使用者前往商家取物，商家結束計時並完成扣款 </li>
</ol>
<p>對於二個平台的開發者來說光有user story還不夠清楚<br>服務的二端最重要的資訊是訂單和商家資料</p>
<p>第一次討論完後在白板畫下簡單的系統方塊圖，並且寫出各功能的開發比重<br><img src="whiteboard.jpg" alt="white board"><br>由Web端送出商家的資料給APP顯示在地圖上<br>APP能送出訂單給Web完成預約</p>
<p>搭配圖形和user story，工程師腦中對於整個流程有了大方向<br>剩下的就是訂單和商家這二個model所需要的資料有哪些</p>
<p>第二次討論時，我們針對訂單和商家model的細項做溝通<br>以下是討論結果:<br>訂單model: </p>
<ol>
<li>物件大小 （背包或行李箱）</li>
<li>寄物件數</li>
<li>日期，時數</li>
<li>店家id</li>
<li>使用者電話號碼</li>
</ol>
<p>商家model </p>
<ol>
<li>店名</li>
<li>地址</li>
<li>id</li>
<li>空間照片</li>
<li>營業時間</li>
<li>評價 （用星等）</li>
</ol>
<p>再來是地圖的頁面，這方面很多APP都有範例可以參考，我使用EZTable的畫面<br><img src="map.jpg" alt="map"><br>上方是search bar，畫面中間是使用者附近的地圖並標示商家，下方是商家資訊<br>有了圖片，product designer和工程師比較容易達成共識<br>對於刻前端的人來說也不會浪費時間</p>
<p>剩不到一個月就要demo了，希望開發過程能順利，打造出理想的產品。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;更新訂單和商家model 2016-10-05&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;把腦中的想法從無到有實現出來，相信是工程師們最有成就感的時候&lt;br&gt;雖然現代的軟體開發哲學強調deliver fast。&lt;br&gt;但如果沒做好溝通和協調，做出來的產品歪掉也會讓工程師們充滿挫折感&lt;/p&gt;
&lt;p&gt;我們把開發的過程記錄下來，以後回顧時能知道當初的決策過程。&lt;br&gt;在快速迭代中最重要的目的是能早點修正偏差並得到經驗&lt;/p&gt;
    
    </summary>
    
    
      <category term="ios" scheme="https://kuroro0718.github.io/tags/ios/"/>
    
      <category term="soft skill" scheme="https://kuroro0718.github.io/tags/soft-skill/"/>
    
  </entry>
  
  <entry>
    <title>iOS基礎Networking處理</title>
    <link href="https://kuroro0718.github.io/iOS%E5%9F%BA%E7%A4%8ENetworking%E8%99%95%E7%90%86/"/>
    <id>https://kuroro0718.github.io/iOS基礎Networking處理/</id>
    <published>2016-09-03T09:37:54.000Z</published>
    <updated>2016-11-22T06:39:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>幾乎所有的APP都需要連網抓取／上傳資料的功能，這篇文章記錄networking基本的處理。</p>
<a id="more"></a>
<h2 id="以dataTaskWithRequest取得網路連線"><a href="#以dataTaskWithRequest取得網路連線" class="headerlink" title="以dataTaskWithRequest取得網路連線"></a>以dataTaskWithRequest取得網路連線</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> url = <span class="type">NSURL</span>(string: <span class="string">"https://itunes.apple.com/search?term=apple&amp;media=software"</span>)</div><div class="line"><span class="keyword">let</span> urlRequest = <span class="type">NSURLRequest</span>(<span class="type">URL</span>: url!, cachePolicy: .<span class="type">ReturnCacheDataElseLoad</span>, timeoutInterval: <span class="number">30</span>) </div><div class="line"><span class="keyword">let</span> task = <span class="type">NSURLSession</span>.sharedSession().dataTaskWithRequest(urlRequest) &#123; </div><div class="line">    (data:<span class="type">NSData</span>?, res:<span class="type">NSURLResponse</span>?, err:<span class="type">NSError</span>?) -&gt; <span class="type">Void</span> <span class="keyword">in</span> </div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> data = data &#123; </div><div class="line">      <span class="keyword">let</span> dataStr = <span class="type">NSString</span>(data: data, encoding: <span class="type">NSUTF8StringEncoding</span>) </div><div class="line">    &#125; </div><div class="line">  &#125; </div><div class="line">task.resume()</div></pre></td></tr></table></figure>
<p>首先得設定URL的字串，然後建立連線請求，這裡需要設定cache的使用方式和timeout的時間。以此例來說，假如cache己有先前的資料，則直接使用；而timeout設為30秒後觸發。</p>
<p>接著使用dataTaskWithRequest將連線抓取的資料做處理，這裡用到closure，我們可以把處理資料的部分寫成function，可增加使用上的彈性。最後記得執行task</p>
<h2 id="dataTaskWithURL"><a href="#dataTaskWithURL" class="headerlink" title="dataTaskWithURL"></a>dataTaskWithURL</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> url = <span class="type">NSURL</span>(string: <span class="string">"https://itunes.apple.com/search?term=apple&amp;media=software"</span>) </div><div class="line"><span class="keyword">let</span> task = <span class="type">NSURLSession</span>.sharedSession().dataTaskWithURL(url!) &#123; </div><div class="line">  data, res, err <span class="keyword">in</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> data = data &#123; </div><div class="line">      <span class="keyword">do</span> &#123; </div><div class="line">        <span class="keyword">let</span> dic = <span class="keyword">try</span> <span class="type">NSJSONSerialization</span>.<span class="type">JSONObjectWithData</span>(data, options: .<span class="type">MutableContainers</span>) <span class="keyword">as</span>! <span class="type">NSDictionary</span> </div><div class="line">        <span class="keyword">let</span> array = dic[<span class="string">"results"</span>] <span class="keyword">as</span>! <span class="type">NSArray</span> </div><div class="line"></div><div class="line">        <span class="keyword">for</span> appDic <span class="keyword">in</span> array &#123; </div><div class="line">          <span class="built_in">print</span>(<span class="string">"trackName \(appDic["</span>trackName<span class="string">"])"</span>) </div><div class="line">        &#125; </div><div class="line">      &#125; <span class="keyword">catch</span> &#123; </div><div class="line"></div><div class="line">      &#125; </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line">task.resume()</div></pre></td></tr></table></figure>
<p>這裡省略NSURLRequest，直接對NSURL做連線抓資料的動作<br>抓下來是是json格式的資料，所以我們得做序列化的動作並轉換成NSArray的型式<br>最後將results下所有trackName印出來</p>
<h2 id="利用downloadTaskWithRequest將資料存在local端"><a href="#利用downloadTaskWithRequest將資料存在local端" class="headerlink" title="利用downloadTaskWithRequest將資料存在local端"></a>利用downloadTaskWithRequest將資料存在local端</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> url = <span class="type">NSURL</span>(string: <span class="string">"https://itunes.apple.com/search?term=apple&amp;media=software"</span>) </div><div class="line"><span class="keyword">let</span> urlRequest = <span class="type">NSURLRequest</span>(<span class="type">URL</span>: url!, cachePolicy: .<span class="type">ReturnCacheDataElseLoad</span>, timeoutInterval: <span class="number">30</span>) </div><div class="line"></div><div class="line"><span class="keyword">let</span> task = <span class="type">NSURLSession</span>.sharedSession().downloadTaskWithRequest(urlRequest) &#123; </div><div class="line">  (location:<span class="type">NSURL</span>?, res:<span class="type">NSURLResponse</span>?, err:<span class="type">NSError</span>?) -&gt; <span class="type">Void</span> <span class="keyword">in</span>  <span class="keyword">if</span> <span class="keyword">let</span> location = location &#123; </div><div class="line">    <span class="keyword">let</span> data = <span class="type">NSData</span>(contentsOfURL: location) </div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> data = data &#123; </div><div class="line">      <span class="keyword">do</span> &#123; </div><div class="line">        <span class="keyword">let</span> dic = <span class="keyword">try</span> <span class="type">NSJSONSerialization</span>.<span class="type">JSONObjectWithData</span>(data, options: <span class="type">NSJSONReadingOptions</span>.<span class="type">MutableContainers</span>) <span class="keyword">as</span>! <span class="type">NSDictionary</span> </div><div class="line">        <span class="keyword">let</span> array = dic[<span class="string">"results"</span>] <span class="keyword">as</span>! <span class="type">NSArray</span> </div><div class="line"></div><div class="line">        <span class="keyword">for</span> appDic <span class="keyword">in</span> array &#123; </div><div class="line">          <span class="built_in">print</span>(<span class="string">"trackName \(appDic["</span>trackName<span class="string">"])"</span>) </div><div class="line">        &#125; </div><div class="line">      &#125; <span class="keyword">catch</span> &#123; &#125; </div><div class="line">    &#125; </div><div class="line">  &#125; </div><div class="line">&#125; </div><div class="line">task.resume()</div></pre></td></tr></table></figure>
<p>這裡task的closure把資料存在location中，而location為local路徑，所以需要使用NSData存取。</p>
<h2 id="NSURLSessionConfiguration"><a href="#NSURLSessionConfiguration" class="headerlink" title="NSURLSessionConfiguration"></a>NSURLSessionConfiguration</h2><p>可以獨立設定URLSession的config，例如timeout和cache</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sessionConfiguration = <span class="type">NSURLSessionConfiguration</span>.defaultSessionConfiguration() </div><div class="line">sessionConfiguration.timeoutIntervalForRequest = <span class="number">1</span> </div><div class="line"><span class="keyword">let</span> session = <span class="type">NSURLSession</span>(configuration: sessionConfiguration)</div><div class="line"></div><div class="line"><span class="keyword">let</span> url = <span class="type">NSURL</span>(string: <span class="string">"https://itunes.apple.com/search?term=apple&amp;media=software"</span>) </div><div class="line"><span class="keyword">let</span> urlRequest = <span class="type">NSURLRequest</span>(<span class="type">URL</span>: url!) </div><div class="line"><span class="keyword">let</span> task = session.dataTaskWithRequest(urlRequest) &#123; </div><div class="line">  data, res, err <span class="keyword">in</span> </div><div class="line"></div><div class="line">  <span class="comment">// something to do </span></div><div class="line">&#125; </div><div class="line">task.resume()</div></pre></td></tr></table></figure>
<h2 id="利用NSURLSessionUploadTask上傳資料"><a href="#利用NSURLSessionUploadTask上傳資料" class="headerlink" title="利用NSURLSessionUploadTask上傳資料"></a>利用NSURLSessionUploadTask上傳資料</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> url = <span class="type">NSURL</span>(string: <span class="string">"https://www.peter.com"</span>) </div><div class="line"><span class="keyword">let</span> urlRequest = <span class="type">NSMutableURLRequest</span>(<span class="type">URL</span>: url!) </div><div class="line">urlRequest.<span class="type">HTTPMethod</span> = <span class="string">"POST"</span> </div><div class="line"></div><div class="line"><span class="keyword">let</span> postStr = <span class="string">"name=peter&amp;grade=99"</span> </div><div class="line"><span class="keyword">let</span> data = postStr.dataUsingEncoding(<span class="type">NSUTF8StringEncoding</span>) </div><div class="line"></div><div class="line"><span class="keyword">let</span> task = <span class="type">NSURLSession</span>.sharedSession().uploadTaskWithRequest(urlRequest, fromData: data) &#123; </div><div class="line">  returnData, res, err <span class="keyword">in</span> </div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> returnData = returnData &#123; </div><div class="line">      <span class="keyword">do</span> &#123; </div><div class="line">        <span class="keyword">let</span> dic = <span class="keyword">try</span> <span class="type">NSJSONSerialization</span>.<span class="type">JSONObjectWithData</span>(returnData , options: .<span class="type">MutableContainers</span>) <span class="keyword">as</span>! <span class="type">NSDictionary</span> </div><div class="line">        <span class="keyword">let</span> status = dic[<span class="string">"success"</span>] <span class="keyword">as</span>? <span class="type">NSNumber</span> </div><div class="line">        <span class="keyword">if</span> status!.intValue == <span class="number">1</span> &#123; </div><div class="line">          <span class="built_in">print</span>(<span class="string">"success"</span>) </div><div class="line">        &#125; </div><div class="line">      &#125; <span class="keyword">catch</span> &#123; </div><div class="line">      &#125; </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line">task.resume()</div></pre></td></tr></table></figure>
<p>先設定URLRequest的http method為post，再將想上傳的資料編碼為NSUTF8StringEncoding格式<br>接下來使用uploadTaskWithRequest上傳資料</p>
<h2 id="利用NSURLSessionDataTask上傳資料"><a href="#利用NSURLSessionDataTask上傳資料" class="headerlink" title="利用NSURLSessionDataTask上傳資料"></a>利用NSURLSessionDataTask上傳資料</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> url = <span class="type">NSURL</span>(string: <span class="string">"https://www.peter.com"</span>) </div><div class="line"><span class="keyword">let</span> urlRequest = <span class="type">NSMutableURLRequest</span>(<span class="type">URL</span>: url!) </div><div class="line">urlRequest.<span class="type">HTTPMethod</span> = <span class="string">"POST"</span> </div><div class="line"></div><div class="line"><span class="keyword">let</span> postStr = <span class="string">"name=peter&amp;grade=99"</span> </div><div class="line"><span class="keyword">let</span> data = postStr.dataUsingEncoding(<span class="type">NSUTF8StringEncoding</span>) urlRequest.<span class="type">HTTPBody</span> = data </div><div class="line"></div><div class="line"><span class="keyword">let</span> task = <span class="type">NSURLSession</span>.sharedSession().dataTaskWithRequest(urlRequest) &#123; </div><div class="line">  returnData, res, err <span class="keyword">in</span> </div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> returnData = returnData &#123; </div><div class="line">      <span class="keyword">do</span> &#123; </div><div class="line">        <span class="keyword">let</span> dic = <span class="keyword">try</span> <span class="type">NSJSONSerialization</span>.<span class="type">JSONObjectWithData</span>(returnData , options: <span class="type">NSJSONReadingOptions</span>.<span class="type">MutableContainers</span>) <span class="keyword">as</span>! <span class="type">NSDictionary</span> </div><div class="line">        <span class="keyword">let</span> status = dic[<span class="string">"success"</span>] <span class="keyword">as</span>? <span class="type">NSNumber</span> </div><div class="line">        <span class="keyword">if</span> status!.intValue == <span class="number">1</span> &#123; </div><div class="line">          <span class="built_in">print</span>(<span class="string">"success"</span>) </div><div class="line">        &#125; </div><div class="line">      &#125; <span class="keyword">catch</span> &#123; </div><div class="line">      &#125; </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line">task.resume()</div></pre></td></tr></table></figure>
<p>可以將資料放進NSURLRequest的HTTPBody裡並上傳</p>
<h2 id="利用NSURLSessionUploadTask上傳json格式資料"><a href="#利用NSURLSessionUploadTask上傳json格式資料" class="headerlink" title="利用NSURLSessionUploadTask上傳json格式資料"></a>利用NSURLSessionUploadTask上傳json格式資料</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> url = <span class="type">NSURL</span>(string: <span class="string">"https://www.peter.com"</span>) </div><div class="line"><span class="keyword">let</span> urlRequest = <span class="type">NSMutableURLRequest</span>(<span class="type">URL</span>: url!) </div><div class="line">urlRequest.<span class="type">HTTPMethod</span> = <span class="string">"POST"</span> </div><div class="line">urlRequest.setValue(<span class="string">"application/json"</span>, forKey: <span class="string">"Content-Type"</span>)   </div><div class="line"><span class="keyword">let</span> dictionary = [<span class="string">"name"</span>: <span class="string">"penny"</span>, <span class="string">"grade"</span>:<span class="string">"77"</span>] </div><div class="line"></div><div class="line"><span class="keyword">do</span> &#123; </div><div class="line">  <span class="keyword">let</span> data = <span class="keyword">try</span>  <span class="type">NSJSONSerialization</span>.dataWithJSONObject(dictionary, options: []) </div><div class="line">  <span class="keyword">let</span> task = <span class="type">NSURLSession</span>.sharedSession().uploadTaskWithRequest(urlRequest, fromData: data) &#123; </div><div class="line">    (returnData, res, err:<span class="type">NSError</span>?) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">    <span class="comment">// do something</span></div><div class="line">  &#125;</div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line">  </div><div class="line">&#125;</div><div class="line">task.resume()</div></pre></td></tr></table></figure>
<p># </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;幾乎所有的APP都需要連網抓取／上傳資料的功能，這篇文章記錄networking基本的處理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ios" scheme="https://kuroro0718.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>使用Facebook SDK製作app登入按鈕</title>
    <link href="https://kuroro0718.github.io/%E4%BD%BF%E7%94%A8Facebook-SDK%E8%A3%BD%E4%BD%9Capp%E7%99%BB%E5%85%A5%E6%8C%89%E9%88%95/"/>
    <id>https://kuroro0718.github.io/使用Facebook-SDK製作app登入按鈕/</id>
    <published>2016-08-28T12:14:43.000Z</published>
    <updated>2016-08-28T13:48:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用facebook登入是會員系統基本的功能（不論是web或mobile app)</p>
<p>由於官方文件不夠清楚，且過程中有許多需要注意的地方，特別將此記錄下來</p>
<a id="more"></a>
<h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><ol>
<li>需要在facebook developer下新增應用程式</li>
<li>本機端需要安裝cocoapods</li>
</ol>
<h2 id="新增facebook應用程式"><a href="#新增facebook應用程式" class="headerlink" title="新增facebook應用程式"></a>新增facebook應用程式</h2><p>在<a href="https://developers.facebook.com/" target="_blank" rel="external">facebook developer</a>裡新增一個應用程式</p>
<p><img src="new-fb-app.png" alt="新增facebook應用程式"></p>
<p>建立應用程式後，進主控板可看到應用程式編號和api版本<br><img src="dashboard.png" alt="主控板"></p>
<h2 id="使用cocoapods安裝FBSDKLoginKit"><a href="#使用cocoapods安裝FBSDKLoginKit" class="headerlink" title="使用cocoapods安裝FBSDKLoginKit"></a>使用cocoapods安裝FBSDKLoginKit</h2><p>先建立xcode專案，本例以FBAuthPractice為例<br>接著在command line下進入專案資料夾輸入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod init</div></pre></td></tr></table></figure></p>
<p>然後編輯Podfile</p>
<figure class="highlight bash"><figcaption><span>Podfile</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Uncomment this line to define a global platform for your project</span></div><div class="line"><span class="comment"># platform :ios, '9.0'</span></div><div class="line"></div><div class="line">target <span class="string">'FBAuthPractice'</span> <span class="keyword">do</span></div><div class="line">  <span class="comment"># Comment this line if you're not using Swift and don't want to use dynamic frameworks</span></div><div class="line">  use_frameworks!</div><div class="line"></div><div class="line">  <span class="comment"># Pods for FBAuthPractice</span></div><div class="line">  pod <span class="string">'FBSDKLoginKit'</span></div><div class="line">end</div></pre></td></tr></table></figure>
<p>存檔後安裝FBSDKLoginKit<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure></p>
<p>接著重開xcode並compile專案</p>
<h2 id="設定xcode-project"><a href="#設定xcode-project" class="headerlink" title="設定xcode project"></a>設定xcode project</h2><p>回到facebook應用程式主控板，按下選擇平台並選擇ios</p>
<p><img src="select-platform.png" alt="選擇平台"></p>
<p>step 1. 設定plist，在 dict … /dict 裡加上以下的設定<br><figure class="highlight xml"><figcaption><span>.plist</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleURLTypes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleURLSchemes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>fb&#123;應用程式編號&#125;<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>FacebookAppID<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>&#123;應用程式編號&#125;<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>FacebookDisplayName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>&#123;應用程式名稱&#125;<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>注意這裡的{}需要替換你的應用程式資訊</p>
<p>如果app在facebook登入時會切換到Facebook apps則需以下的設定<br><figure class="highlight xml"><figcaption><span>.plist</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>LSApplicationQueriesSchemes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>fbapi<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>fb-messenger-api<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>fbauth2<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>fbshareextension<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>step 2. 填入Bundle Identifier<br>在設定頁面的最後會要求輸入xcode專案的Bundle Identifier</p>
<h2 id="為APP裝上facebook-login按鈕"><a href="#為APP裝上facebook-login按鈕" class="headerlink" title="為APP裝上facebook login按鈕"></a>為APP裝上facebook login按鈕</h2><figure class="highlight swift"><figcaption><span>AppDelegate.swift</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> FBSDKLoginKit</div><div class="line"><span class="meta">@UIApplicationMain</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> window: <span class="type">UIWindow</span>?</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="comment">// Override point for customization after application launch.</span></div><div class="line">        </div><div class="line">        <span class="type">FBSDKApplicationDelegate</span>.sharedInstance().application(application, didFinishLaunchingWithOptions: launchOptions)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 中略</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">applicationDidBecomeActive</span><span class="params">(application: UIApplication)</span></span> &#123;</div><div class="line">        <span class="comment">// Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.</span></div><div class="line">        <span class="type">FBSDKAppEvents</span>.activateApp()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication, openURL url: NSURL, sourceApplication: String?, annotation: AnyObject)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">FBSDKApplicationDelegate</span>.sharedInstance().application(application, openURL: url, sourceApplication: sourceApplication, annotation: annotation)</div><div class="line">    &#125;</div><div class="line">｝</div></pre></td></tr></table></figure>
<figure class="highlight swift"><figcaption><span>ViewController.swift</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> FBSDKLoginKit</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> loginButton = <span class="type">FBSDKLoginButton</span>()</div><div class="line">        loginButton.center = <span class="keyword">self</span>.view.center</div><div class="line">        <span class="keyword">self</span>.view.addSubview(loginButton)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完成以上修改後，執行app就可看到facebook登入按鈕在畫面中間</p>
<p>參考來源：<br><a href="https://developers.facebook.com/quickstarts/287841964917855/?platform=ios" target="_blank" rel="external">facebook官方文件</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用facebook登入是會員系統基本的功能（不論是web或mobile app)&lt;/p&gt;
&lt;p&gt;由於官方文件不夠清楚，且過程中有許多需要注意的地方，特別將此記錄下來&lt;/p&gt;
    
    </summary>
    
    
      <category term="ios" scheme="https://kuroro0718.github.io/tags/ios/"/>
    
  </entry>
  
</feed>
