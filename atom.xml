<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alex&#39;s Playground</title>
  <subtitle>記錄我在web和iOS學習的過程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kuroro0718.github.io/"/>
  <updated>2016-10-01T14:33:46.000Z</updated>
  <id>https://kuroro0718.github.io/</id>
  
  <author>
    <name>Alex Liang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>寄物便開發週記: 從idea到MVP</title>
    <link href="https://kuroro0718.github.io/2016/10/01/%E5%AF%84%E7%89%A9%E4%BE%BF%E9%96%8B%E7%99%BC%E9%80%B1%E8%A8%98-%E5%BE%9Eidea%E5%88%B0MVP/"/>
    <id>https://kuroro0718.github.io/2016/10/01/寄物便開發週記-從idea到MVP/</id>
    <published>2016-10-01T13:20:11.000Z</published>
    <updated>2016-10-01T14:33:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>把腦中的想法從無到有實現出來，相信是工程師們最有成就感的時候<br>雖然現代的軟體開發哲學強調deliver fast。<br>但如果沒做好溝通和協調，做出來的產品歪掉也會讓工程師們充滿挫折感</p>
<p>我們把開發的過程記錄下來，以後回顧時能知道當初的決策過程。<br>在快速迭代中最重要的目的是能早點修正偏差並得到經驗</p>
<a id="more"></a>
<p><a href="https://www.facebook.com/bagkeeper/?ref=aymt_homepage_panel" target="_blank" rel="external">寄物便 BagKeeper</a>的服務對象是需要在不同地點移動的人，提供寄物地點的媒合以省去身上大包小包的累贅。</p>
<p>概念上與Airbnb類似。對於MVP來說，我們需要展示使用者和店家的的操作平台，也就是APP和Web後台。</p>
<p>使用情境如下: </p>
<ol>
<li>使用者打開寄物便APP輸入寄物件數和時間</li>
<li>APP顯示地圖標出使用者附近符合條件的店家</li>
<li>使用者也能在地圖頁面搜尋指定的地點</li>
<li>找到店家後送出訂單並完成預約</li>
<li>商家在Web後台能看到訂單</li>
<li>使用者前往商家寄物，此時商家可以開始計時</li>
<li>使用者前往商家取物，商家結束計時並完成扣款 </li>
</ol>
<p>對於二個平台的開發者來說光有user story還不夠清楚<br>服務的二端最重要的資訊是訂單和商家資料</p>
<p>第一次討論完後在白板畫下簡單的系統方塊圖，並且寫出各功能的開發比重<br><img src="whiteboard.jpg" alt="white board"><br>由Web端送出商家的資料給APP顯示在地圖上<br>APP能送出訂單給Web完成預約</p>
<p>搭配圖形和user story，工程師腦中對於整個流程有了大方向<br>剩下的就是訂單和商家這二個model所需要的資料有哪些</p>
<p>第二次討論時，我們針對訂單和商家model的細項做溝通<br>以下是討論結果:<br>訂單model: </p>
<ol>
<li>物件大小 （背包或行李箱）</li>
<li>寄物件數</li>
<li>日期，時數</li>
<li>店家id</li>
<li>使用者電話號碼</li>
</ol>
<p>商家model </p>
<ol>
<li>店名</li>
<li>地址</li>
<li>id</li>
<li>空間照片</li>
<li>營業時間</li>
<li>評價 （用星等）</li>
</ol>
<p>再來是地圖的頁面，這方面很多APP都有範例可以參考，我使用EZTable的畫面<br><img src="map.jpg" alt="map"><br>上方是search bar，畫面中間是使用者附近的地圖並標示商家，下方是商家資訊<br>有了圖片，product designer和工程師比較容易達成共識<br>對於刻前端的人來說也不會浪費時間</p>
<p>剩不到一個月就要demo了，希望開發過程能順利，打造出理想的產品。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把腦中的想法從無到有實現出來，相信是工程師們最有成就感的時候&lt;br&gt;雖然現代的軟體開發哲學強調deliver fast。&lt;br&gt;但如果沒做好溝通和協調，做出來的產品歪掉也會讓工程師們充滿挫折感&lt;/p&gt;
&lt;p&gt;我們把開發的過程記錄下來，以後回顧時能知道當初的決策過程。&lt;br&gt;在快速迭代中最重要的目的是能早點修正偏差並得到經驗&lt;/p&gt;
    
    </summary>
    
    
      <category term="ios, soft skill" scheme="https://kuroro0718.github.io/tags/ios-soft-skill/"/>
    
  </entry>
  
  <entry>
    <title>iOS基礎Networking處理</title>
    <link href="https://kuroro0718.github.io/2016/09/03/iOS%E5%9F%BA%E7%A4%8ENetworking%E8%99%95%E7%90%86/"/>
    <id>https://kuroro0718.github.io/2016/09/03/iOS基礎Networking處理/</id>
    <published>2016-09-03T09:37:54.000Z</published>
    <updated>2016-09-05T06:16:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>幾乎所有的APP都需要連網抓取／上傳資料的功能，這篇文章記錄networking基本的處理。</p>
<a id="more"></a>
<h2 id="以dataTaskWithRequest取得網路連線"><a href="#以dataTaskWithRequest取得網路連線" class="headerlink" title="以dataTaskWithRequest取得網路連線"></a>以dataTaskWithRequest取得網路連線</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> url = <span class="type">NSURL</span>(string: <span class="string">"https://itunes.apple.com/search?term=apple&amp;media=software"</span>)</div><div class="line"><span class="keyword">let</span> urlRequest = <span class="type">NSURLRequest</span>(<span class="type">URL</span>: url!, cachePolicy: .<span class="type">ReturnCacheDataElseLoad</span>, timeoutInterval: <span class="number">30</span>) </div><div class="line"><span class="keyword">let</span> task = <span class="type">NSURLSession</span>.sharedSession().dataTaskWithRequest(urlRequest) &#123; </div><div class="line">    (data:<span class="type">NSData</span>?, res:<span class="type">NSURLResponse</span>?, err:<span class="type">NSError</span>?) -&gt; <span class="type">Void</span> <span class="keyword">in</span> </div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> data = data &#123; </div><div class="line">      <span class="keyword">let</span> dataStr = <span class="type">NSString</span>(data: data, encoding: <span class="type">NSUTF8StringEncoding</span>) </div><div class="line">    &#125; </div><div class="line">  &#125; </div><div class="line">task.resume()</div></pre></td></tr></table></figure>
<p>首先得設定URL的字串，然後建立連線請求，這裡需要設定cache的使用方式和timeout的時間。以此例來說，假如cache己有先前的資料，則直接使用；而timeout設為30秒後觸發。</p>
<p>接著使用dataTaskWithRequest將連線抓取的資料做處理，這裡用到closure，我們可以把處理資料的部分寫成function，可增加使用上的彈性。最後記得執行task</p>
<h2 id="dataTaskWithURL"><a href="#dataTaskWithURL" class="headerlink" title="dataTaskWithURL"></a>dataTaskWithURL</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> url = <span class="type">NSURL</span>(string: <span class="string">"https://itunes.apple.com/search?term=apple&amp;media=software"</span>) </div><div class="line"><span class="keyword">let</span> task = <span class="type">NSURLSession</span>.sharedSession().dataTaskWithURL(url!) &#123; </div><div class="line">  data, res, err <span class="keyword">in</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> data = data &#123; </div><div class="line">      <span class="keyword">do</span> &#123; </div><div class="line">        <span class="keyword">let</span> dic = <span class="keyword">try</span> <span class="type">NSJSONSerialization</span>.<span class="type">JSONObjectWithData</span>(data, options: .<span class="type">MutableContainers</span>) <span class="keyword">as</span>! <span class="type">NSDictionary</span> </div><div class="line">        <span class="keyword">let</span> array = dic[<span class="string">"results"</span>] <span class="keyword">as</span>! <span class="type">NSArray</span> </div><div class="line"></div><div class="line">        <span class="keyword">for</span> appDic <span class="keyword">in</span> array &#123; </div><div class="line">          <span class="built_in">print</span>(<span class="string">"trackName \(appDic["</span>trackName<span class="string">"])"</span>) </div><div class="line">        &#125; </div><div class="line">      &#125; <span class="keyword">catch</span> &#123; </div><div class="line"></div><div class="line">      &#125; </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line">task.resume()</div></pre></td></tr></table></figure>
<p>這裡省略NSURLRequest，直接對NSURL做連線抓資料的動作<br>抓下來是是json格式的資料，所以我們得做序列化的動作並轉換成NSArray的型式<br>最後將results下所有trackName印出來</p>
<h2 id="利用downloadTaskWithRequest將資料存在local端"><a href="#利用downloadTaskWithRequest將資料存在local端" class="headerlink" title="利用downloadTaskWithRequest將資料存在local端"></a>利用downloadTaskWithRequest將資料存在local端</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> url = <span class="type">NSURL</span>(string: <span class="string">"https://itunes.apple.com/search?term=apple&amp;media=software"</span>) </div><div class="line"><span class="keyword">let</span> urlRequest = <span class="type">NSURLRequest</span>(<span class="type">URL</span>: url!, cachePolicy: .<span class="type">ReturnCacheDataElseLoad</span>, timeoutInterval: <span class="number">30</span>) </div><div class="line"></div><div class="line"><span class="keyword">let</span> task = <span class="type">NSURLSession</span>.sharedSession().downloadTaskWithRequest(urlRequest) &#123; </div><div class="line">  (location:<span class="type">NSURL</span>?, res:<span class="type">NSURLResponse</span>?, err:<span class="type">NSError</span>?) -&gt; <span class="type">Void</span> <span class="keyword">in</span>  <span class="keyword">if</span> <span class="keyword">let</span> location = location &#123; </div><div class="line">    <span class="keyword">let</span> data = <span class="type">NSData</span>(contentsOfURL: location) </div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> data = data &#123; </div><div class="line">      <span class="keyword">do</span> &#123; </div><div class="line">        <span class="keyword">let</span> dic = <span class="keyword">try</span> <span class="type">NSJSONSerialization</span>.<span class="type">JSONObjectWithData</span>(data, options: <span class="type">NSJSONReadingOptions</span>.<span class="type">MutableContainers</span>) <span class="keyword">as</span>! <span class="type">NSDictionary</span> </div><div class="line">        <span class="keyword">let</span> array = dic[<span class="string">"results"</span>] <span class="keyword">as</span>! <span class="type">NSArray</span> </div><div class="line"></div><div class="line">        <span class="keyword">for</span> appDic <span class="keyword">in</span> array &#123; </div><div class="line">          <span class="built_in">print</span>(<span class="string">"trackName \(appDic["</span>trackName<span class="string">"])"</span>) </div><div class="line">        &#125; </div><div class="line">      &#125; <span class="keyword">catch</span> &#123; &#125; </div><div class="line">    &#125; </div><div class="line">  &#125; </div><div class="line">&#125; </div><div class="line">task.resume()</div></pre></td></tr></table></figure>
<p>這裡task的closure把資料存在location中，而location為local路徑，所以需要使用NSData存取。</p>
<h2 id="NSURLSessionConfiguration"><a href="#NSURLSessionConfiguration" class="headerlink" title="NSURLSessionConfiguration"></a>NSURLSessionConfiguration</h2><p>可以獨立設定URLSession的config，例如timeout和cache</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sessionConfiguration = <span class="type">NSURLSessionConfiguration</span>.defaultSessionConfiguration() </div><div class="line">sessionConfiguration.timeoutIntervalForRequest = <span class="number">1</span> </div><div class="line"><span class="keyword">let</span> session = <span class="type">NSURLSession</span>(configuration: sessionConfiguration)</div><div class="line"></div><div class="line"><span class="keyword">let</span> url = <span class="type">NSURL</span>(string: <span class="string">"https://itunes.apple.com/search?term=apple&amp;media=software"</span>) </div><div class="line"><span class="keyword">let</span> urlRequest = <span class="type">NSURLRequest</span>(<span class="type">URL</span>: url!) </div><div class="line"><span class="keyword">let</span> task = session.dataTaskWithRequest(urlRequest) &#123; </div><div class="line">  data, res, err <span class="keyword">in</span> </div><div class="line"></div><div class="line">  <span class="comment">// something to do </span></div><div class="line">&#125; </div><div class="line">task.resume()</div></pre></td></tr></table></figure>
<h2 id="利用NSURLSessionUploadTask上傳資料"><a href="#利用NSURLSessionUploadTask上傳資料" class="headerlink" title="利用NSURLSessionUploadTask上傳資料"></a>利用NSURLSessionUploadTask上傳資料</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> url = <span class="type">NSURL</span>(string: <span class="string">"https://www.peter.com"</span>) </div><div class="line"><span class="keyword">let</span> urlRequest = <span class="type">NSMutableURLRequest</span>(<span class="type">URL</span>: url!) </div><div class="line">urlRequest.<span class="type">HTTPMethod</span> = <span class="string">"POST"</span> </div><div class="line"></div><div class="line"><span class="keyword">let</span> postStr = <span class="string">"name=peter&amp;grade=99"</span> </div><div class="line"><span class="keyword">let</span> data = postStr.dataUsingEncoding(<span class="type">NSUTF8StringEncoding</span>) </div><div class="line"></div><div class="line"><span class="keyword">let</span> task = <span class="type">NSURLSession</span>.sharedSession().uploadTaskWithRequest(urlRequest, fromData: data) &#123; </div><div class="line">  returnData, res, err <span class="keyword">in</span> </div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> returnData = returnData &#123; </div><div class="line">      <span class="keyword">do</span> &#123; </div><div class="line">        <span class="keyword">let</span> dic = <span class="keyword">try</span> <span class="type">NSJSONSerialization</span>.<span class="type">JSONObjectWithData</span>(returnData , options: .<span class="type">MutableContainers</span>) <span class="keyword">as</span>! <span class="type">NSDictionary</span> </div><div class="line">        <span class="keyword">let</span> status = dic[<span class="string">"success"</span>] <span class="keyword">as</span>? <span class="type">NSNumber</span> </div><div class="line">        <span class="keyword">if</span> status!.intValue == <span class="number">1</span> &#123; </div><div class="line">          <span class="built_in">print</span>(<span class="string">"success"</span>) </div><div class="line">        &#125; </div><div class="line">      &#125; <span class="keyword">catch</span> &#123; </div><div class="line">      &#125; </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line">task.resume()</div></pre></td></tr></table></figure>
<p>先設定URLRequest的http method為post，再將想上傳的資料編碼為NSUTF8StringEncoding格式<br>接下來使用uploadTaskWithRequest上傳資料</p>
<h2 id="利用NSURLSessionDataTask上傳資料"><a href="#利用NSURLSessionDataTask上傳資料" class="headerlink" title="利用NSURLSessionDataTask上傳資料"></a>利用NSURLSessionDataTask上傳資料</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> url = <span class="type">NSURL</span>(string: <span class="string">"https://www.peter.com"</span>) </div><div class="line"><span class="keyword">let</span> urlRequest = <span class="type">NSMutableURLRequest</span>(<span class="type">URL</span>: url!) </div><div class="line">urlRequest.<span class="type">HTTPMethod</span> = <span class="string">"POST"</span> </div><div class="line"></div><div class="line"><span class="keyword">let</span> postStr = <span class="string">"name=peter&amp;grade=99"</span> </div><div class="line"><span class="keyword">let</span> data = postStr.dataUsingEncoding(<span class="type">NSUTF8StringEncoding</span>) urlRequest.<span class="type">HTTPBody</span> = data </div><div class="line"></div><div class="line"><span class="keyword">let</span> task = <span class="type">NSURLSession</span>.sharedSession().dataTaskWithRequest(urlRequest) &#123; </div><div class="line">  returnData, res, err <span class="keyword">in</span> </div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> returnData = returnData &#123; </div><div class="line">      <span class="keyword">do</span> &#123; </div><div class="line">        <span class="keyword">let</span> dic = <span class="keyword">try</span> <span class="type">NSJSONSerialization</span>.<span class="type">JSONObjectWithData</span>(returnData , options: <span class="type">NSJSONReadingOptions</span>.<span class="type">MutableContainers</span>) <span class="keyword">as</span>! <span class="type">NSDictionary</span> </div><div class="line">        <span class="keyword">let</span> status = dic[<span class="string">"success"</span>] <span class="keyword">as</span>? <span class="type">NSNumber</span> </div><div class="line">        <span class="keyword">if</span> status!.intValue == <span class="number">1</span> &#123; </div><div class="line">          <span class="built_in">print</span>(<span class="string">"success"</span>) </div><div class="line">        &#125; </div><div class="line">      &#125; <span class="keyword">catch</span> &#123; </div><div class="line">      &#125; </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line">task.resume()</div></pre></td></tr></table></figure>
<p>可以將資料放進NSURLRequest的HTTPBody裡並上傳</p>
<h2 id="利用NSURLSessionUploadTask上傳json格式資料"><a href="#利用NSURLSessionUploadTask上傳json格式資料" class="headerlink" title="利用NSURLSessionUploadTask上傳json格式資料"></a>利用NSURLSessionUploadTask上傳json格式資料</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> url = <span class="type">NSURL</span>(string: <span class="string">"https://www.peter.com"</span>) </div><div class="line"><span class="keyword">let</span> urlRequest = <span class="type">NSMutableURLRequest</span>(<span class="type">URL</span>: url!) </div><div class="line">urlRequest.<span class="type">HTTPMethod</span> = <span class="string">"POST"</span> </div><div class="line">urlRequest.setValue(<span class="string">"application/json"</span>, forKey: <span class="string">"Content-Type"</span>)   </div><div class="line"><span class="keyword">let</span> dictionary = [<span class="string">"name"</span>: <span class="string">"penny"</span>, <span class="string">"grade"</span>:<span class="string">"77"</span>] </div><div class="line"></div><div class="line"><span class="keyword">do</span> &#123; </div><div class="line">  <span class="keyword">let</span> data = <span class="keyword">try</span>  <span class="type">NSJSONSerialization</span>.dataWithJSONObject(dictionary, options: []) </div><div class="line">  <span class="keyword">let</span> task = <span class="type">NSURLSession</span>.sharedSession().uploadTaskWithRequest(urlRequest, fromData: data) &#123; </div><div class="line">    (returnData, res, err:<span class="type">NSError</span>?) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">    <span class="comment">// do something</span></div><div class="line">  &#125;</div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line">  </div><div class="line">&#125;</div><div class="line">task.resume()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;幾乎所有的APP都需要連網抓取／上傳資料的功能，這篇文章記錄networking基本的處理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ios" scheme="https://kuroro0718.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>使用Facebook SDK製作app登入按鈕</title>
    <link href="https://kuroro0718.github.io/2016/08/28/%E4%BD%BF%E7%94%A8Facebook-SDK%E8%A3%BD%E4%BD%9Capp%E7%99%BB%E5%85%A5%E6%8C%89%E9%88%95/"/>
    <id>https://kuroro0718.github.io/2016/08/28/使用Facebook-SDK製作app登入按鈕/</id>
    <published>2016-08-28T12:14:43.000Z</published>
    <updated>2016-08-28T13:48:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用facebook登入是會員系統基本的功能（不論是web或mobile app)</p>
<p>由於官方文件不夠清楚，且過程中有許多需要注意的地方，特別將此記錄下來</p>
<a id="more"></a>
<h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><ol>
<li>需要在facebook developer下新增應用程式</li>
<li>本機端需要安裝cocoapods</li>
</ol>
<h2 id="新增facebook應用程式"><a href="#新增facebook應用程式" class="headerlink" title="新增facebook應用程式"></a>新增facebook應用程式</h2><p>在<a href="https://developers.facebook.com/" target="_blank" rel="external">facebook developer</a>裡新增一個應用程式</p>
<p><img src="new-fb-app.png" alt="新增facebook應用程式"></p>
<p>建立應用程式後，進主控板可看到應用程式編號和api版本<br><img src="dashboard.png" alt="主控板"></p>
<h2 id="使用cocoapods安裝FBSDKLoginKit"><a href="#使用cocoapods安裝FBSDKLoginKit" class="headerlink" title="使用cocoapods安裝FBSDKLoginKit"></a>使用cocoapods安裝FBSDKLoginKit</h2><p>先建立xcode專案，本例以FBAuthPractice為例<br>接著在command line下進入專案資料夾輸入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod init</div></pre></td></tr></table></figure></p>
<p>然後編輯Podfile</p>
<figure class="highlight bash"><figcaption><span>Podfile</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Uncomment this line to define a global platform for your project</span></div><div class="line"><span class="comment"># platform :ios, '9.0'</span></div><div class="line"></div><div class="line">target <span class="string">'FBAuthPractice'</span> <span class="keyword">do</span></div><div class="line">  <span class="comment"># Comment this line if you're not using Swift and don't want to use dynamic frameworks</span></div><div class="line">  use_frameworks!</div><div class="line"></div><div class="line">  <span class="comment"># Pods for FBAuthPractice</span></div><div class="line">  pod <span class="string">'FBSDKLoginKit'</span></div><div class="line">end</div></pre></td></tr></table></figure>
<p>存檔後安裝FBSDKLoginKit<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure></p>
<p>接著重開xcode並compile專案</p>
<h2 id="設定xcode-project"><a href="#設定xcode-project" class="headerlink" title="設定xcode project"></a>設定xcode project</h2><p>回到facebook應用程式主控板，按下選擇平台並選擇ios</p>
<p><img src="select-platform.png" alt="選擇平台"></p>
<p>step 1. 設定plist，在 dict … /dict 裡加上以下的設定<br><figure class="highlight xml"><figcaption><span>.plist</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleURLTypes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleURLSchemes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>fb&#123;應用程式編號&#125;<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>FacebookAppID<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>&#123;應用程式編號&#125;<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>FacebookDisplayName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>&#123;應用程式名稱&#125;<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>注意這裡的{}需要替換你的應用程式資訊</p>
<p>如果app在facebook登入時會切換到Facebook apps則需以下的設定<br><figure class="highlight xml"><figcaption><span>.plist</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>LSApplicationQueriesSchemes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>fbapi<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>fb-messenger-api<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>fbauth2<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>fbshareextension<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>step 2. 填入Bundle Identifier<br>在設定頁面的最後會要求輸入xcode專案的Bundle Identifier</p>
<h2 id="為APP裝上facebook-login按鈕"><a href="#為APP裝上facebook-login按鈕" class="headerlink" title="為APP裝上facebook login按鈕"></a>為APP裝上facebook login按鈕</h2><figure class="highlight swift"><figcaption><span>AppDelegate.swift</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> FBSDKLoginKit</div><div class="line"><span class="meta">@UIApplicationMain</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> window: <span class="type">UIWindow</span>?</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="comment">// Override point for customization after application launch.</span></div><div class="line">        </div><div class="line">        <span class="type">FBSDKApplicationDelegate</span>.sharedInstance().application(application, didFinishLaunchingWithOptions: launchOptions)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 中略</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">applicationDidBecomeActive</span><span class="params">(application: UIApplication)</span></span> &#123;</div><div class="line">        <span class="comment">// Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.</span></div><div class="line">        <span class="type">FBSDKAppEvents</span>.activateApp()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication, openURL url: NSURL, sourceApplication: String?, annotation: AnyObject)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">FBSDKApplicationDelegate</span>.sharedInstance().application(application, openURL: url, sourceApplication: sourceApplication, annotation: annotation)</div><div class="line">    &#125;</div><div class="line">｝</div></pre></td></tr></table></figure>
<figure class="highlight swift"><figcaption><span>ViewController.swift</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> FBSDKLoginKit</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> loginButton = <span class="type">FBSDKLoginButton</span>()</div><div class="line">        loginButton.center = <span class="keyword">self</span>.view.center</div><div class="line">        <span class="keyword">self</span>.view.addSubview(loginButton)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完成以上修改後，執行app就可看到facebook登入按鈕在畫面中間</p>
<p>參考來源：<br><a href="https://developers.facebook.com/quickstarts/287841964917855/?platform=ios" target="_blank" rel="external">facebook官方文件</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用facebook登入是會員系統基本的功能（不論是web或mobile app)&lt;/p&gt;
&lt;p&gt;由於官方文件不夠清楚，且過程中有許多需要注意的地方，特別將此記錄下來&lt;/p&gt;
    
    </summary>
    
    
      <category term="ios" scheme="https://kuroro0718.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>使用StackView包裝不同寛高的同類型元件</title>
    <link href="https://kuroro0718.github.io/2016/08/13/%E4%BD%BF%E7%94%A8StackView%E5%8C%85%E8%A3%9D%E4%B8%8D%E5%90%8C%E5%AF%9B%E9%AB%98%E7%9A%84%E5%90%8C%E9%A1%9E%E5%9E%8B%E5%85%83%E4%BB%B6/"/>
    <id>https://kuroro0718.github.io/2016/08/13/使用StackView包裝不同寛高的同類型元件/</id>
    <published>2016-08-13T06:32:24.000Z</published>
    <updated>2016-08-13T07:40:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>iOS 9加入了stackview這個新元件幫助工程師更快打造UI，盡量減少使用auto layout</p>
<p>今年的<a href="http://web.stanford.edu/class/cs193p/cgi-bin/drupal/" target="_blank" rel="external">CS193P課程</a>的第一個範例－－計算機就改用stackview實作</p>
<p>練習時我不想照它的layout來做，想比照iPhone內建的計算機，將0的按鈕寛度設定其它按鈕的二倍，這個問題請教了老師，花了幾天才試出來</p>
<a id="more"></a>
<p>下圖是我想呈現的結果，該如何用stackview刻出來呢？</p>
<p><img src="calculator-result.png" alt="計算機"></p>
<p>Step1. 先把button拉進view controller，並複製其它三個<br><img src="step1.png" alt="創建按鈕"></p>
<p>Step2. 選取4個button並加入stackview</p>
<p>方法1: 點選最左邊的stack<br><img src="stackview-1.png" alt="stackview 1"></p>
<p>方法2: 從選單 (Editor-&gt; Embed In-&gt; Stack View)<br><img src="stackview-2.png" alt="stackview 2"></p>
<p>Step3. 修改stackview裡面元件的間隔<br><img src="stackview-setting.png" alt="stackview setting"></p>
<p>Step4. 重複上述2個步驟，完成剩下的計算機按鈕<br><img src="4x4buttons.png" alt="4x4按鈕"></p>
<p>Step5. 將4個stackview再包成一個stackview，垂直間隔也要修改</p>
<p>Step6. 選取最下面一排的stackview，砍掉最左邊的button<br><img src="delete-button.png" alt="刪除按鈕"></p>
<p>Step7. 將最右邊二個button的寛度設成和上一排任一button一樣</p>
<p>Step8. 最後再設定整個stackview的auto layout，這裡是置於右下角<br><img src="autolayout-1.png" alt="auto layout"></p>
<p><img src="autolayout-2.png" alt="constraints"></p>
<p>對照之前的教學，使用stackview的確能為工程師省下不少時間，可設計出整齊的介面。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS 9加入了stackview這個新元件幫助工程師更快打造UI，盡量減少使用auto layout&lt;/p&gt;
&lt;p&gt;今年的&lt;a href=&quot;http://web.stanford.edu/class/cs193p/cgi-bin/drupal/&quot;&gt;CS193P課程&lt;/a&gt;的第一個範例－－計算機就改用stackview實作&lt;/p&gt;
&lt;p&gt;練習時我不想照它的layout來做，想比照iPhone內建的計算機，將0的按鈕寛度設定其它按鈕的二倍，這個問題請教了老師，花了幾天才試出來&lt;/p&gt;
    
    </summary>
    
    
      <category term="ios" scheme="https://kuroro0718.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>How to Pitch上課心得</title>
    <link href="https://kuroro0718.github.io/2016/08/06/How-to-Pitch%E4%B8%8A%E8%AA%B2%E5%BF%83%E5%BE%97/"/>
    <id>https://kuroro0718.github.io/2016/08/06/How-to-Pitch上課心得/</id>
    <published>2016-08-06T12:09:17.000Z</published>
    <updated>2016-08-06T12:09:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>在工程師的職涯中，最難解的問題不是code寫不出來，而是無法說服其它人採用我的想法。</p>
<p>原因不外乎幾點： </p>
<ol>
<li>沒有想清楚問題</li>
<li>無法用對方理解的語言溝通</li>
<li>沒有清楚表達想法的核心價值</li>
</ol>
<p>今天孫治華老師在短短2個小時裡講解pitch的重點以及表達的技巧，這項soft skill值得我們學習</p>
<a id="more"></a>
<h2 id="Why-pitch-is-important"><a href="#Why-pitch-is-important" class="headerlink" title="Why pitch is important?"></a>Why pitch is important?</h2><p>課程一開始，老師用巴菲特在一場座談的問答帶出為什麼每個人需要學習pitch</p>
<p>有學生問老巴，如何在同儕中脫穎而出。 老巴回答：能在台上從容的和觀眾對話</p>
<p>這點讓我想到過去在職場遇到的優秀工程師，他們不僅實作能力強，在公開場合能<br>有自信的表達想法，而這群人往往是主管職的候選人。</p>
<p>另一種情境是新創團隊向別人介紹idea時，講者該如何引發對方的興趣</p>
<p>所以在課堂前老師要求我們先寫下pitch的逐字稿，並找出幾位同學在台上pitch，藉此讓大家知道彼此的問題。</p>
<h2 id="How-to-prepare-pitch"><a href="#How-to-prepare-pitch" class="headerlink" title="How to prepare pitch?"></a>How to prepare pitch?</h2><p>簡報一開始便開宗明義：</p>
<blockquote>
<p>讓每個架構都清楚，讓每句話都是重點。</p>
</blockquote>
<p>如果你只有一分鐘，該怎麼做到以上這件事？</p>
<p>一個必要的練習是把它寫下來，逐字逐句去修飾並講給其它人聽</p>
<p>在這個過程會不斷反思這個idea的問題在哪？ 如何讓他人感受到我感受的痛點？ 我能說服別人相信由我來做才是合適的嗎？</p>
<p>經過不斷地修正，慢慢地會找到最精煉的版本。</p>
<h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><p>在課堂演練中，同學們針對各pitch寫出看法，並藉由問答讓大家了解pitch該注意的事項</p>
<p>例如在pitch時常常講了30秒觀眾還不清楚要解決的問題；或是對於解決方法不了解</p>
<p>另一個常見的錯誤是觀眾提出問題時，回答只要針對問題就好，不要用故事回答。</p>
<p>再來就是商業模式的問題，這點老師建議平時就要注意好的服務或app，了解背後的營利模式並反思自己的idea；或是找TA及投資者檢視，也是改善的方法</p>
<h2 id="自我介紹"><a href="#自我介紹" class="headerlink" title="自我介紹"></a>自我介紹</h2><p>老師也針對團隊成員該如何介紹自己，給別人留下印象。</p>
<p>這點對工程師來說是很重要的，也很我們很缺乏的一塊</p>
<p>原因是工程師通常以本身的技術出發去介紹自己，而忘了對方需要的是你能提供什麼價值</p>
<p>例如：</p>
<blockquote>
<p>熟悉js框架和前端技術 vs. 能做出跨平台和良好使用體驗的網站</p>
</blockquote>
<p>後者清楚的說明工程師的價值</p>
<p>試著從個人累積的經驗、專業能力和要解決的問題這三點介紹自己，會是脫穎而出的關鍵</p>
<h2 id="實際案例"><a href="#實際案例" class="headerlink" title="實際案例"></a>實際案例</h2><p>最後老師使用一段在北京創業比賽獲獎的<a href="http://on.aol.com/video/order-with-me-517390015" target="_blank" rel="external">pitch影片</a>來總結課程</p>
<p>影片一開始使用數字強調它們的商業模式是可行的，並說明和對手的差異性，最後才介紹他們的產品，整段pitch流𣈱且令人信服。</p>
<p>老師也舉出幾種簡報架構讓我們能參考，這個不管是demo day或以後在公司內提案都有相當大的幫助。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在工程師的職涯中，最難解的問題不是code寫不出來，而是無法說服其它人採用我的想法。&lt;/p&gt;
&lt;p&gt;原因不外乎幾點： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;沒有想清楚問題&lt;/li&gt;
&lt;li&gt;無法用對方理解的語言溝通&lt;/li&gt;
&lt;li&gt;沒有清楚表達想法的核心價值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;今天孫治華老師在短短2個小時裡講解pitch的重點以及表達的技巧，這項soft skill值得我們學習&lt;/p&gt;
    
    </summary>
    
    
      <category term="soft skill" scheme="https://kuroro0718.github.io/tags/soft-skill/"/>
    
  </entry>
  
  <entry>
    <title>Swift Error Handling</title>
    <link href="https://kuroro0718.github.io/2016/07/21/Swift-Error-Handling/"/>
    <id>https://kuroro0718.github.io/2016/07/21/Swift-Error-Handling/</id>
    <published>2016-07-21T02:17:39.000Z</published>
    <updated>2016-07-23T07:59:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>撰寫程式過程中，免不了需要處理錯誤情形。<br>如果希望程式碼好維護，會將錯誤偵測和錯誤處理分開來<br>Swift特別的是enum能和error type結合，產出可讀性高的程式碼</p>
<a id="more"></a>
<h2 id="Error-Type"><a href="#Error-Type" class="headerlink" title="Error Type"></a>Error Type</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Error</span>: <span class="title">ErrorType</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">InvalidName</span></div><div class="line">  <span class="keyword">case</span> <span class="type">InsufficientFund</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">throw</span> <span class="type">Error</span>.<span class="type">InvalidName</span></div></pre></td></tr></table></figure>
<p>將enum繼承ErrorType，在抛出例外時有較高的可讀性</p>
<h2 id="Propagating-Errors-Using-Throwing-Functions"><a href="#Propagating-Errors-Using-Throwing-Functions" class="headerlink" title="Propagating Errors Using Throwing Functions"></a>Propagating Errors Using Throwing Functions</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> memberList = [<span class="string">"John"</span>, <span class="string">"Joe"</span>, <span class="string">"Bob"</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeMember</span><span class="params">(name: String)</span></span> <span class="keyword">throws</span> &#123;</div><div class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> index = memberList.indexOf(name) <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">throws</span> <span class="type">Error</span>.<span class="type">InvalidName</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函式加上throws表示可抛出例外，如果名字不在成員清單中則抛出例外</p>
<h2 id="Handling-Errors-Using-Do-Catch"><a href="#Handling-Errors-Using-Do-Catch" class="headerlink" title="Handling Errors Using Do-Catch"></a>Handling Errors Using Do-Catch</h2><p>如同其它語言，Swift也提供do-catch的block處理抛出的例外<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> memberList = [<span class="string">"John"</span>, <span class="string">"Joe"</span>, <span class="string">"Bob"</span>]</div><div class="line"></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">  <span class="keyword">try</span> removeMember(<span class="string">"Alex"</span>)  </div><div class="line">&#125; <span class="keyword">catch</span> <span class="type">Error</span>.<span class="type">InvalidName</span> &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"There isn't any member named Alex"</span>)</div><div class="line">&#125; <span class="keyword">catch</span> <span class="type">Error</span>.<span class="type">InsufficientFund</span> &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"Not enough funds"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>參考來源：<br><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html" target="_blank" rel="external">官方文件</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;撰寫程式過程中，免不了需要處理錯誤情形。&lt;br&gt;如果希望程式碼好維護，會將錯誤偵測和錯誤處理分開來&lt;br&gt;Swift特別的是enum能和error type結合，產出可讀性高的程式碼&lt;/p&gt;
    
    </summary>
    
    
      <category term="swift" scheme="https://kuroro0718.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>iOS APP Develop Cheat Sheet</title>
    <link href="https://kuroro0718.github.io/2016/07/07/765290/"/>
    <id>https://kuroro0718.github.io/2016/07/07/765290/</id>
    <published>2016-07-06T19:44:00.000Z</published>
    <updated>2016-08-23T07:14:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>2016-07-21 新增使用程式碼刻UI元件</em><br><em>2016-07-22 新增使用segue</em><br><em>2016-08-10 新增Switch button和Segmented Control, 修改segue用法</em><br>*2016-08-23 新增UIPickerView和UISearchController</p>
<a id="more"></a>
<h2 id="UITableView"><a href="#UITableView" class="headerlink" title="UITableView:"></a>UITableView:</h2><ol>
<li>ViewController 需要繼承UITableViewDataSource, UITableViewDelegate </li>
<li>加入func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {}</li>
<li>加入func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {}</li>
<li><p>上一個步驟中，使用tableView.dequeueReusableCellWithIdentifier(cellIdentifier, forIndexPath: indexPath)設定cell (cell要設定identifier)</p>
</li>
<li><p>最後，選取TableView，按住ctrl拖曳至View Controller並選取dataSource和delegate</p>
</li>
</ol>
<p>額外設定：</p>
<ol>
<li>修改section title </li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, titleForHeaderInSection section: Int)</span></span> -&gt; <span class="type">String</span>? &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"Section \(section)"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用程式碼新增UI元件"><a href="#使用程式碼新增UI元件" class="headerlink" title="使用程式碼新增UI元件"></a>使用程式碼新增UI元件</h2><p>以UIImageView為例</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> image = <span class="type">UIImageView</span>()</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLayoutSubviews</span><span class="params">()</span></span> &#123;</div><div class="line">  view.addSubview(image)</div><div class="line">  image.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></div><div class="line">  <span class="type">NSLayoutConstraint</span>.activateConstraints([</div><div class="line">    artwork.topAnchor.constraintEqualToAnchor(view.topAnchor),</div><div class="line">    artwork.bottomAnchor.constraintEqualToAnchor(view.bottomAnchor),</div><div class="line">    artwork.rightAnchor.constraintEqualToAnchor(view.rightAnchor),</div><div class="line">    artwork.leftAnchor.constraintEqualToAnchor(view.leftAnchor)</div><div class="line">  ])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用segue"><a href="#使用segue" class="headerlink" title="使用segue"></a>使用segue</h2><p>在storyboard建立segue後。在Attribute inspector中，修改Identifier（例如命名為showMessageIdentifier)，假如轉換到名為ImageViewController的ViewController</p>
<p>然後在view controller加入以下程式碼</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepareForSegue</span><span class="params">(segue: UIStoryboardSegue, sender: AnyObject?)</span></span> &#123;</div><div class="line">  <span class="keyword">if</span> segue.identifier == <span class="string">"showMessageIdentifier"</span> &#123;</div><div class="line">    <span class="keyword">let</span> vc = segue.destinationViewController <span class="keyword">as</span>! <span class="type">ImageViewController</span>           </div><div class="line">    <span class="comment">//  do something</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用Switch-Button"><a href="#使用Switch-Button" class="headerlink" title="使用Switch Button"></a>使用Switch Button</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> switchButton.on &#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用Segmented-Control"><a href="#使用Segmented-Control" class="headerlink" title="使用Segmented Control"></a>使用Segmented Control</h2><p>可用selectedSegmentIndex判斷目前的選擇<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> locationSegmentedControl.selectedSegmentIndex &#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="UIPickerView"><a href="#UIPickerView" class="headerlink" title="UIPickerView"></a>UIPickerView</h2><ol>
<li>拉UIPickerView的outlet至ViewController</li>
<li>設定並實作delegate及dataSource</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> locationPicker: <span class="type">UIPickerView</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> taipeiDistrictArray = [<span class="string">"中正區"</span>, <span class="string">"中山區"</span>]</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">      </div><div class="line">        locationPicker.delegate = <span class="keyword">self</span></div><div class="line">        locationPicker.dataSource = <span class="keyword">self</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// MARK: UIPickerViewDataSource</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">UIPickerViewDataSource</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">numberOfComponentsInPickerView</span><span class="params">(pickerView: UIPickerView)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pickerView</span><span class="params">(pickerView: UIPickerView, numberOfRowsInComponent component: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> taipeiDistrictArray.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// MARK: UIPickerViewDelegate</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">UIPickerViewDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pickerView</span><span class="params">(pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int)</span></span> -&gt; <span class="type">String</span>? &#123;</div><div class="line">        <span class="keyword">return</span> taipeiDistrictArray[row]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>參考來源：<br><a href="https://www.ralfebert.de/tutorials/ios-swift-uitableviewcontroller/#storyboard_table_contents" target="_blank" rel="external">iOS &amp; Swift Tutorial: UITableViewController</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;2016-07-21 新增使用程式碼刻UI元件&lt;/em&gt;&lt;br&gt;&lt;em&gt;2016-07-22 新增使用segue&lt;/em&gt;&lt;br&gt;&lt;em&gt;2016-08-10 新增Switch button和Segmented Control, 修改segue用法&lt;/em&gt;&lt;br&gt;*2016-08-23 新增UIPickerView和UISearchController&lt;/p&gt;
    
    </summary>
    
    
      <category term="swift" scheme="https://kuroro0718.github.io/tags/swift/"/>
    
      <category term="ios" scheme="https://kuroro0718.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>Swift Closure 介紹</title>
    <link href="https://kuroro0718.github.io/2016/06/17/swift-closure-introduced/"/>
    <id>https://kuroro0718.github.io/2016/06/17/swift-closure-introduced/</id>
    <published>2016-06-16T22:57:00.000Z</published>
    <updated>2016-07-18T14:36:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>Closure在Swift有二層意思。第一種是一般認知的global或nested functions，函式中擁有free variable可被nested function存取；或作為變數傳給另一個function</p>
<p>第二種為closure expression，在function的定義後加上簡短表示式。在Swift中，closure通常是指closure expression<br><a id="more"></a></p>
<h1 id="Functions-Parameters"><a href="#Functions-Parameters" class="headerlink" title="Functions Parameters"></a>Functions Parameters</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printString</span><span class="params">(str: String)</span></span> &#123;</div><div class="line">  <span class="built_in">print</span>(str)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">displayName</span><span class="params">(printFunc: String -&gt; Void)</span></span> &#123;</div><div class="line">  printFunc(<span class="string">"Alex Gordon"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">displayName(printString) 	<span class="comment">// Print "Alex Gordon"</span></div></pre></td></tr></table></figure>
<p>Swift可以將function當參數傳入另一個function</p>
<h1 id="Capturing-Values"><a href="#Capturing-Values" class="headerlink" title="Capturing Values"></a>Capturing Values</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">(y: Int)</span></span> -&gt; () -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> x = <span class="number">10</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        x += y</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> f</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> f = doSomething(<span class="number">19</span>)</div><div class="line"><span class="keyword">var</span> result = f()		<span class="comment">// result = 29</span></div></pre></td></tr></table></figure>
<p>function f可以捕捉到x的值並且做運算，x在這裡為free variable，這種nested function能帶來很大的彈性</p>
<h1 id="Closure-Expressions"><a href="#Closure-Expressions" class="headerlink" title="Closure Expressions"></a>Closure Expressions</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="built_in">map</span>( &#123;(i: <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span> <span class="keyword">return</span> i * <span class="number">2</span>&#125; ) 	<span class="comment">// [2, 4, 6]</span></div></pre></td></tr></table></figure>
<p>Swift的array內建許多高階函式，map能將陣列的值做轉換並回傳新陣列<br>上例中，map裡{}包起來的表示式為closure expression<br>i當做參數並寫明回傳型態為Int，in return接上陣列轉換的算式<br>此為完整closure expression的宣告方式</p>
<p>而Swift提供許多syntax sugar，<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="built_in">map</span>( &#123;i <span class="keyword">in</span> <span class="keyword">return</span> i * <span class="number">2</span>&#125; )</div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="built_in">map</span>( &#123;i <span class="keyword">in</span> i * <span class="number">2</span>&#125; )</div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="built_in">map</span>( &#123;$<span class="number">0</span> * <span class="number">2</span>&#125; )</div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="built_in">map</span>() &#123;$<span class="number">0</span> * <span class="number">2</span>&#125;</div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="built_in">map</span> &#123;$<span class="number">0</span> * <span class="number">2</span>&#125;</div></pre></td></tr></table></figure></p>
<p>以上的表示式功能都一樣，把陣列元素*2後回傳</p>
<h1 id="Trailing-Closures"><a href="#Trailing-Closures" class="headerlink" title="Trailing Closures"></a>Trailing Closures</h1><p>一般的function要加上closure exprssion當參數有二種做法<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">someFunc</span><span class="params">(closure: <span class="params">()</span></span></span> -&gt; <span class="type">Int</span>) &#123;</div><div class="line">  <span class="comment">// function body</span></div><div class="line">&#125; </div><div class="line"></div><div class="line">someFunc(&#123;		<span class="comment">// 做法1</span></div><div class="line">  <span class="comment">// closure body</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">someFunc() &#123;		<span class="comment">// 做法2</span></div><div class="line">  <span class="comment">// trailing closure body</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第二種做法將closure expression寫在function之後，增加可讀性</p>
<p>Closure在現代程式設計被廣泛使用，這也是functional programming的基石</p>
<p>參考來源：<br><a href="https://airspeedvelocity.net/2014/06/11/a-basic-tutorial-on-functions-and-closures-in-swift/" target="_blank" rel="external">A Basic Tutorial on Functions and Closures in Swift</a><br><a href="https://airspeedvelocity.net/2014/06/06/an-accumulator-in-swift/" target="_blank" rel="external">An Accumulator in Swift</a><br><a href="https://www.weheartswift.com/higher-order-functions-map-filter-reduce-and-more/" target="_blank" rel="external">Higher Order Functions: Map, Filter, Reduce and more</a><br><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html#//apple_ref/doc/uid/TP40014097-CH11-ID94" target="_blank" rel="external">官方文件</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Closure在Swift有二層意思。第一種是一般認知的global或nested functions，函式中擁有free variable可被nested function存取；或作為變數傳給另一個function&lt;/p&gt;
&lt;p&gt;第二種為closure expression，在function的定義後加上簡短表示式。在Swift中，closure通常是指closure expression&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="https://kuroro0718.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift的？與！</title>
    <link href="https://kuroro0718.github.io/2016/06/07/swift-and/"/>
    <id>https://kuroro0718.github.io/2016/06/07/swift-and/</id>
    <published>2016-06-06T23:17:00.000Z</published>
    <updated>2016-07-18T14:36:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>在靜態語言中，nil or null的判斷是件重要卻常被忽略的事<br>當一個object或變數為null而沒被排除時，程式很有可能crash或出現莫明其妙的bug<br>Swift增加了optional幫助程式設計師避掉可能的crash，語法雖然簡單卻需要時間理解觀念<br><a id="more"></a></p>
<h2 id="Optionals"><a href="#Optionals" class="headerlink" title="Optionals"></a>Optionals</h2><p>當資料可能為nil時，我們在宣告變數時加入？。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> customerName: <span class="type">String</span>? 		<span class="comment">// nil</span></div><div class="line"><span class="keyword">var</span> regards = <span class="string">"Thank you! "</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = customerName &#123;		<span class="comment">// skip</span></div><div class="line">	regards += name</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>當執行到if let時，因為customerName為nil而判斷式不會成立<br>沒有給定初始值的變數最好加上optional，在程式剛執行時還未給予值的情況下可避免crash</p>
<p>另一種情況是function的回傳值可能為nil時，使用optional會是合理的選擇<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findStore</span><span class="params">(storeName: String)</span></span> -&gt; <span class="type">String</span>? &#123;</div><div class="line">	storeList = [<span class="string">"7-11"</span>, <span class="string">"FamilyMarket"</span>, <span class="string">"Hi-life"</span>]</div><div class="line">	<span class="keyword">for</span> store <span class="keyword">in</span> storeList &#123;</div><div class="line">		<span class="keyword">if</span> store == storeName &#123;</div><div class="line">    	<span class="keyword">return</span> <span class="string">"Find \(storeName)!"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> result = findStore(<span class="string">"Poya"</span>) &#123;</div><div class="line">	<span class="built_in">print</span>(result)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>findStore的回傳值為optionals，當storeList沒有符合的字串時則回傳nil<br>上例中result為nil，所以不會印出任何值</p>
<h2 id="Unwrap"><a href="#Unwrap" class="headerlink" title="Unwrap"></a>Unwrap</h2><p>變數為optional時，使用！可以強制unwrap並存取資料<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> result = findStore(<span class="string">"7-11"</span>)			</div><div class="line">result!															<span class="comment">// Find 7-11!</span></div></pre></td></tr></table></figure></p>
<p>如上例，但此操作不符合官方的建議用法，同時也失去安全性</p>
<h2 id="Downcast"><a href="#Downcast" class="headerlink" title="Downcast"></a>Downcast</h2><p>當使用某些資料型態的值做為變數時，需要資料型態轉換。<br>如果不確定轉換是否成功，使用as?會回傳optional，如此可避免nil帶來的問題<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> playlistDictionary = [</div><div class="line">	[</div><div class="line">  	<span class="string">"title"</span>: <span class="string">"Native"</span>,</div><div class="line">    <span class="string">"artist"</span>: <span class="string">"OneRepublic"</span></div><div class="line">  ]											</div><div class="line">  [</div><div class="line">  	<span class="string">"title"</span>: <span class="string">"V"</span>,</div><div class="line">    <span class="string">"artist"</span>: <span class="string">"Maroon 5"</span></div><div class="line">  ]</div><div class="line">]</div><div class="line"></div><div class="line"><span class="keyword">let</span> playlist = playlistDictionary[<span class="number">0</span>]</div><div class="line"><span class="keyword">let</span> title = playlist[<span class="string">"title"</span>] <span class="keyword">as</span>? <span class="type">String</span></div></pre></td></tr></table></figure></p>
<p>當我們存取playlist的title時，由於不確定回傳的值是否為nil，所以使用as?做型態轉換</p>
<p>參考資料：<br><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TypeCasting.html" target="_blank" rel="external">Type Casting官方文件</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在靜態語言中，nil or null的判斷是件重要卻常被忽略的事&lt;br&gt;當一個object或變數為null而沒被排除時，程式很有可能crash或出現莫明其妙的bug&lt;br&gt;Swift增加了optional幫助程式設計師避掉可能的crash，語法雖然簡單卻需要時間理解觀念&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="https://kuroro0718.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift Enumerations </title>
    <link href="https://kuroro0718.github.io/2016/05/29/swift-enumerations/"/>
    <id>https://kuroro0718.github.io/2016/05/29/swift-enumerations/</id>
    <published>2016-05-28T23:02:00.000Z</published>
    <updated>2016-07-18T14:35:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>在C/C++中, 使用enum可提升程式碼的可讀性<br>而Swift的enum擴充原本的功能,使用上有更多的彈性<br><a id="more"></a></p>
<h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ProgrammingLanguage</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">C</span></div><div class="line">  <span class="keyword">case</span> <span class="type">CPP</span></div><div class="line">  <span class="keyword">case</span> <span class="type">Objective</span>-<span class="type">C</span></div><div class="line">  <span class="keyword">case</span> <span class="type">Swift</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> firstLanguage = <span class="type">ProgrammingLanguage</span>.<span class="type">Swift</span></div><div class="line"><span class="keyword">let</span> secondLanguage = .<span class="type">CPP</span></div></pre></td></tr></table></figure>
<p>不同於數C和Objetive-C,Swift的enum並沒有預設的整數值,也就是說case C並不隱含整數0的概念<br>使用時除了第一個比較傳統的寫法外;你也可以省略enum的型別名稱,這也是Swift的syntax sugar</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> secondLanguage = .<span class="type">CPP</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">selectLanguage</span><span class="params">(language: ProgrammingLanguage)</span></span> &#123;</div><div class="line">  <span class="keyword">switch</span> language &#123;</div><div class="line">	<span class="keyword">case</span> .<span class="type">C</span>: <span class="built_in">print</span>(<span class="string">"You chose C language"</span>)</div><div class="line">	<span class="keyword">case</span> .<span class="type">CPP</span>: <span class="built_in">print</span>(<span class="string">"You chose C++ language"</span>)</div><div class="line">	<span class="keyword">case</span> .<span class="type">Objective</span>-<span class="type">C</span>: <span class="built_in">print</span>(<span class="string">"You chose Objective-C language"</span>)</div><div class="line">	<span class="keyword">case</span> .<span class="type">Swift</span>: <span class="built_in">print</span>(<span class="string">"You chose Swift language"</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用switch做判斷時一樣能用簡短的表示法。因為使為enum當參數,compiler會檢查型別,switch也能省去default的值</p>
<h2 id="Associated-Values"><a href="#Associated-Values" class="headerlink" title="Associated Values"></a>Associated Values</h2><p>這是Swift的enum和其它語言不一樣的地方,我們能為enum創造關聯性的值<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CurrencyType</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">USD</span>(<span class="type">Double</span>)</div><div class="line">  <span class="keyword">case</span> <span class="type">TWD</span>(<span class="type">Int</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> price = <span class="type">CurrencyType</span>.<span class="type">USD</span>(<span class="number">33.99</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">payCheck</span><span class="params">(price: CurrencyType)</span></span> &#123;  </div><div class="line">  <span class="keyword">switch</span> price &#123;</div><div class="line">  <span class="keyword">case</span> .<span class="type">USD</span>(<span class="keyword">let</span> usDollar): </div><div class="line">  	<span class="keyword">let</span> ntDollar = usDollar * <span class="number">33</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"總共為: \(ntDollar) NTD"</span>)</div><div class="line">  <span class="keyword">case</span> .<span class="type">NTD</span>(<span class="keyword">let</span> ntDollar):</div><div class="line">  	<span class="built_in">print</span>(<span class="string">"總共為: \(ntDollar) NTD"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>CurrencyType包含二種貨幣,美金和新台幣. 而前者需要Double來表示;後者則是Int<br>在宣告price時,我們給予一個Double的值表示美金的價錢;而switch case需要加上對應的參數<br>這項特性讓我們使用enum時除了表示狀態,還能給予相對應的值</p>
<h2 id="Raw-Values"><a href="#Raw-Values" class="headerlink" title="Raw Values"></a>Raw Values</h2><p>除了上述的Associated Values, Swift的enum也有C/C++給予初值的特性<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">HTTPResponse</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">Continue</span> = <span class="number">100</span></div><div class="line">  <span class="keyword">case</span> <span class="type">Success</span> = <span class="number">200</span></div><div class="line">  <span class="keyword">case</span> <span class="type">MultipleChoices</span> = <span class="number">300</span></div><div class="line">  <span class="keyword">case</span> <span class="type">NotFound</span> = <span class="number">404</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>這個例子中,HTTPResponse一開始就給予raw value. 而raw value只能為字串,字元,浮點數或整數,並且不能重複</p>
<h2 id="Initializing-from-a-Raw-Value"><a href="#Initializing-from-a-Raw-Value" class="headerlink" title="Initializing from a Raw Value"></a>Initializing from a Raw Value</h2><p>假如定義了一組enum含有raw value,則我們能使用raw value查循狀態<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">HTTPResponse</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">Continue</span> = <span class="number">100</span></div><div class="line">  <span class="keyword">case</span> <span class="type">Success</span> = <span class="number">200</span></div><div class="line">  <span class="keyword">case</span> <span class="type">MultipleChoices</span> = <span class="number">300</span></div><div class="line">  <span class="keyword">case</span> <span class="type">NotFound</span> = <span class="number">404</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> statusCode = <span class="number">300</span></div><div class="line"><span class="keyword">let</span> httpResponse = <span class="type">HTTPResponse</span>(rawValue: statusCode)		<span class="comment">// MultipleChoices</span></div></pre></td></tr></table></figure></p>
<p>將外界傳來status code回應HTTPResponse相對應的狀態;假如沒找到則回傳nil<br>rawValue回傳的值為optional,即使沒找到也不會讓程式hang住<br>下一篇接著介紹optional</p>
<p>參考來源:<br><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Enumerations.html#//apple_ref/doc/uid/TP40014097-CH12-ID145" target="_blank" rel="external">官方文件</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在C/C++中, 使用enum可提升程式碼的可讀性&lt;br&gt;而Swift的enum擴充原本的功能,使用上有更多的彈性&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="https://kuroro0718.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift Protocol Oriented Programming</title>
    <link href="https://kuroro0718.github.io/2016/05/27/swift-protocol-oriented-programming/"/>
    <id>https://kuroro0718.github.io/2016/05/27/swift-protocol-oriented-programming/</id>
    <published>2016-05-26T17:28:00.000Z</published>
    <updated>2016-07-18T14:35:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://alexliang-blog.logdown.com/posts/734169-swift-protocol-introduction" target="_blank" rel="external">上一篇</a>介紹Swift Protocol基本的用法和優點。<br>這篇接著討論Swift使用protocol帶來的設計觀念：Protocol Oriented Programming<br><a id="more"></a></p>
<h2 id="Composition"><a href="#Composition" class="headerlink" title="Composition"></a>Composition</h2><p>在物件導向設計中，繼承(inheritance)是常被誤用的觀念。<br>當二個”看起來”類似的類別套入繼承的關係後，有些操作便不適合<br>例如：圓形和橢圓形適合使用繼承的關係嗎？  前者有半徑；後者有長軸和短軸<br>如果將橢圓形繼承圓形，則初始化時，半徑為無意義的值</p>
<p>所以在重構時，很重要的一點是分㦚二個類別是”Is A”或”Has A”的關係<br>如同前例，橢圓形並”不是”一種圓形；相反的，跑車”是”車子的一種<br>於是討論這類問題時，組合(composition)是一個更適合的pattern</p>
<h2 id="Protocol-Inheritance"><a href="#Protocol-Inheritance" class="headerlink" title="Protocol Inheritance"></a>Protocol Inheritance</h2><p>由於Swift的class只能繼承單一class，但class能擁有多個protocol<br>所以在設計class時，我們傾向將各特性分為各種protocol<br>而protocol能繼承另一個protocol，可以組合各種小功能的protocol完成有彈性的設計<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Movable</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">func</span> <span class="title">move</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">FastMovable</span>: <span class="title">Movable</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">func</span> <span class="title">move</span><span class="params">()</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Standard-Library-Protocols"><a href="#Standard-Library-Protocols" class="headerlink" title="Standard Library Protocols"></a>Standard Library Protocols</h2><p>Swift語言包含各種protocol，可分為三種類別：”Can Do”, “Is A”, “Can Be”<br>這三種protocol的命名方式也是Swift的慣例</p>
<ol>
<li>Can Do: 表示object可以做什麼，例如Standard Library中Equatable表示物件能判斷是否相等</li>
<li>Is A: 表示object是某種形態，例如IntegerType</li>
<li>Can Be: 表示object可以轉化成某種形態，例如ArrayLiteralConvertible表示物件能轉成array形態</li>
</ol>
<h2 id="Protocol-Oriented-Programming"><a href="#Protocol-Oriented-Programming" class="headerlink" title="Protocol Oriented Programming"></a>Protocol Oriented Programming</h2><p>假如有個class為Car，我們可以利用protocol組合該類別的基本行為<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Direction</span> </span>&#123;</div><div class="line">	<span class="keyword">case</span> <span class="type">Up</span>, <span class="type">Down</span>, <span class="type">Left</span>, <span class="type">Right</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Position</span> </span>&#123;</div><div class="line">	<span class="keyword">let</span> x: <span class="type">Int</span></div><div class="line">  <span class="keyword">let</span> y: <span class="type">Int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Movable</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">func</span> <span class="title">move</span><span class="params">(direction: Direction, <span class="built_in">distance</span>: Int)</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">VehicleType</span> </span>&#123;</div><div class="line">	<span class="keyword">var</span> hoursePower: <span class="type">Int</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</div><div class="line">  <span class="keyword">var</span> price: <span class="type">Double</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">init</span>(position: <span class="type">Position</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>: <span class="title">VehicleType</span>, <span class="title">Movable</span> </span>&#123;</div><div class="line">	<span class="keyword">var</span> hoursePower: <span class="type">Int</span> = <span class="number">200</span></div><div class="line">  <span class="keyword">var</span> price: <span class="type">Double</span> = <span class="number">4000.25</span></div><div class="line">  </div><div class="line">  <span class="keyword">required</span> <span class="keyword">init</span>(position: <span class="type">Position</span>) &#123;</div><div class="line">  	<span class="keyword">self</span>.position = position</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">move</span><span class="params">(direction: Direction, <span class="built_in">distance</span>: Int)</span></span> &#123;</div><div class="line">  	<span class="keyword">switch</span> direction &#123;</div><div class="line">        <span class="keyword">case</span> .<span class="type">Up</span>: position.y += <span class="built_in">distance</span></div><div class="line">        <span class="keyword">case</span> .<span class="type">Down</span>: position.y -= <span class="built_in">distance</span></div><div class="line">        <span class="keyword">case</span> .<span class="type">Left</span>: position.x -= <span class="built_in">distance</span></div><div class="line">        <span class="keyword">case</span> .<span class="type">Right</span>: position.x += <span class="built_in">distance</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用protocol的組合可以讓class的可讀性增加，並且更有彈性。</p>
<p>參考來源：<br><a href="https://www.skilled.io/gregheo/what-the-55-swift-standard-library-protocols-taught-me" target="_blank" rel="external">What the 55 Swift Protocols taught me</a><br><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Protocols.html" target="_blank" rel="external">官方文件</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://alexliang-blog.logdown.com/posts/734169-swift-protocol-introduction&quot;&gt;上一篇&lt;/a&gt;介紹Swift Protocol基本的用法和優點。&lt;br&gt;這篇接著討論Swift使用protocol帶來的設計觀念：Protocol Oriented Programming&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="https://kuroro0718.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift Value and Reference Types</title>
    <link href="https://kuroro0718.github.io/2016/05/26/swift-value-and-reference-types/"/>
    <id>https://kuroro0718.github.io/2016/05/26/swift-value-and-reference-types/</id>
    <published>2016-05-25T18:32:00.000Z</published>
    <updated>2016-07-18T14:35:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>初次接觸Swift時，少了pointer的機制，讓人好奇過去function call的call by value, call by reference是否有所不同<br>而Swift除了class外，其餘資料型態皆為value type。<br>這篇文章整理Swift Value and Reference type的差異<br><a id="more"></a></p>
<h2 id="Value-Type"><a href="#Value-Type" class="headerlink" title="Value Type"></a>Value Type</h2><p>當copy value type資料時，Swift其實是創造一份獨立的”拷貝”，任何改變原本變數的值不會影響拷貝的資料<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> </span>&#123; <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"Alex"</span> &#125;</div><div class="line"><span class="keyword">let</span> somePerson = <span class="type">Person</span>()</div><div class="line"><span class="keyword">let</span> otherPerson = somePerson</div><div class="line">somePerson = <span class="string">"John"</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"\(somePerson.name), \(otherPerson.name)) 	// print John, Alex</span></div></pre></td></tr></table></figure></p>
<p>當somePerson的name被改變時，otherPerson並不受影響</p>
<h2 id="Reference-Type"><a href="#Reference-Type" class="headerlink" title="Reference Type"></a>Reference Type</h2><p>當copy reference type資料時，Swift只是增加一個reference指向原本的資料<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"Alex"</span> &#125;</div><div class="line"><span class="keyword">let</span> somePerson = <span class="type">Person</span>()</div><div class="line"><span class="keyword">let</span> otherPerson = somePerson</div><div class="line">somePerson = <span class="string">"John"</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"\(somePerson.name), \(otherPerson.name)) 	// print Alex, Alex</span></div></pre></td></tr></table></figure></p>
<p>由以上例子可知，在使用function時要注意是否需要改變傳入的值<br>因為大多數的資料型態為value type，傳入function後無法修改原本的值<br>在multi-thread的環境中，這也一定確保資料的完整性，降低debug的困難度</p>
<h2 id="如何選擇？"><a href="#如何選擇？" class="headerlink" title="如何選擇？"></a>如何選擇？</h2><p>使用value type:</p>
<ol>
<li>比較拷貝的資料(==)是合理行為</li>
<li>拷貝的複本有獨立的狀態</li>
<li>資料可能會被多個執行緒使用</li>
</ol>
<p>使用reference type:</p>
<ol>
<li>比較拷貝的識別(===)是合理的行為</li>
<li>想創造可共享和改變的狀態</li>
</ol>
<p>參考來源：<br><a href="https://developer.apple.com/swift/blog/?id=10" target="_blank" rel="external">Apple官方文件</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初次接觸Swift時，少了pointer的機制，讓人好奇過去function call的call by value, call by reference是否有所不同&lt;br&gt;而Swift除了class外，其餘資料型態皆為value type。&lt;br&gt;這篇文章整理Swift Value and Reference type的差異&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="https://kuroro0718.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift Protocol 介紹</title>
    <link href="https://kuroro0718.github.io/2016/05/23/swift-protocol-introduction/"/>
    <id>https://kuroro0718.github.io/2016/05/23/swift-protocol-introduction/</id>
    <published>2016-05-22T23:21:00.000Z</published>
    <updated>2016-07-18T14:35:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>在design pattern中，interface是一個重要的概念。<br>它能夠將class之間共通但些許不同的行為提升到更高的層次，解決物件導向裡容易誤用繼承的問題<br>而Swift提供protocol做為interface和資料型態，讓物件導向設計變得更直觀<br><a id="more"></a></p>
<h2 id="Declare"><a href="#Declare" class="headerlink" title="Declare"></a>Declare</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">ExampleProtocol</span> </span>&#123;</div><div class="line">		<span class="keyword">var</span> someProperty: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;				<span class="comment">// someProperty is gettable</span></div><div class="line">    <span class="keyword">var</span> otherProperty: <span class="type">String</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span>&#125;		<span class="comment">// otherProperty is gettable and settable    </span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">concatenate</span><span class="params">(x: String, y: String)</span></span> -&gt; <span class="type">String</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span>: <span class="title">ExampleProtocol</span> </span>&#123;</div><div class="line">		<span class="keyword">var</span> someProperty: <span class="type">String</span> = <span class="string">"A test class"</span></div><div class="line">    <span class="keyword">var</span> otherProperty: <span class="type">String</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">concatenate</span><span class="params">(x: String, y: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    		<span class="keyword">return</span> <span class="string">"\(x) \(y)"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>protocol的property可宣告為gettable或settable，後者同時也可使用get<br>而function只需要宣告輸入參數和回傳型態，不需要實作</p>
<p>class一旦使用protocol，就必須提供其property和function的實作。</p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>使用protocol在實務上有什麼好處呢？<br>假如我們有二個class，Employee和HourlyEmployee，分別為正職和計時人員。 以及計算員工薪資的function<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">	<span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">let</span> address: <span class="type">String</span></div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, address: <span class="type">String</span>) &#123;</div><div class="line">    	<span class="keyword">self</span>.name = name</div><div class="line">        <span class="keyword">self</span>.address = address</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pay</span><span class="params">()</span></span> -&gt; (salary: <span class="type">Double</span>, bonus: <span class="type">Double</span>) &#123;</div><div class="line">    	<span class="keyword">return</span> (<span class="number">3000</span>, <span class="number">400</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HourlyEmployee</span>: <span class="title">Employ</span> </span>&#123;</div><div class="line">	<span class="keyword">var</span> hourlyWage: <span class="type">Double</span> = <span class="number">15.00</span></div><div class="line">    <span class="keyword">var</span> hoursWorked: <span class="type">Double</span> = <span class="number">8</span></div><div class="line">    </div><div class="line">    <span class="keyword">override</span> pay() -&gt; (salary: <span class="type">Double</span>, bonus: <span class="type">Double</span>) &#123;</div><div class="line">    	<span class="keyword">return</span> (hourlyWage * hoursWorked, <span class="number">0</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">payEmployee</span><span class="params">(employee: Employee)</span></span> &#123;</div><div class="line">	<span class="keyword">let</span> paycheck = employee.pay()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>假如之後程式修改時，不小心將HourlyEmployee的pay刪除，則呼叫payEmployee時會回傳Employee的結果<br>這在程式碼增長的情況下是很容易出現的bug</p>
<p>使用protocol可減少此類bug的發生<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Payable</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">func</span> <span class="title">pay</span><span class="params">()</span></span> -&gt; (salary: <span class="type">Double</span>, bonus: <span class="type">Double</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>: <span class="title">Payable</span> </span>&#123;</div><div class="line">	<span class="comment">//略</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">pay</span><span class="params">()</span></span> -&gt; (salary: <span class="type">Double</span>, bonus: <span class="type">Double</span>) &#123;</div><div class="line">    	<span class="keyword">return</span> (<span class="number">3000</span>, <span class="number">400</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HourlyEmployee</span>: <span class="title">Payable</span> </span>&#123;</div><div class="line">	<span class="comment">//略</span></div><div class="line">  </div><div class="line">  <span class="keyword">override</span> pay() -&gt; (salary: <span class="type">Double</span>, bonus: <span class="type">Double</span>) &#123;</div><div class="line">    	<span class="keyword">return</span> (hourlyWage * hoursWorked, <span class="number">0</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">payEmployee</span><span class="params">(employee: Employee)</span></span> &#123;</div><div class="line">	<span class="keyword">let</span> paycheck = employee.pay()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>假如HourlyEmployee的pay function被刪，complier會提示error。</p>
<h2 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h2><p>protocol不只能當interface使用，也能做type結合array、dictionary使用<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Flyable</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">func</span> <span class="title">fly</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</div><div class="line">	<span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>: <span class="title">Flyable</span> </span>&#123;</div><div class="line">	<span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">  </div><div class="line">	<span class="function"><span class="keyword">func</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</div><div class="line">  	<span class="built_in">print</span>(<span class="string">"I believe I can fly!"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeActions</span><span class="params">(action: [Flyable])</span></span> &#123;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> human = <span class="type">Human</span>(name: <span class="string">"John"</span>)</div><div class="line"><span class="keyword">let</span> sparrow = <span class="type">Bird</span>(name: <span class="string">"GOT"</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> animals: [<span class="type">Flyable</span>] = [human, sparrow]		<span class="comment">// Error, human is not Flyable</span></div></pre></td></tr></table></figure></p>
<p>指定animals為Flyable的array時，compiler會檢查array的值是否符合<br>這也類似有經驗的C/C++ programmer會將使用enum當function的參數，否則各參數都是int時，容易讓使用者誤用<br>protocol能幫我們減少無謂的bug及提高程式碼的可讀性</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在design pattern中，interface是一個重要的概念。&lt;br&gt;它能夠將class之間共通但些許不同的行為提升到更高的層次，解決物件導向裡容易誤用繼承的問題&lt;br&gt;而Swift提供protocol做為interface和資料型態，讓物件導向設計變得更直觀&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="https://kuroro0718.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift Tuples介紹</title>
    <link href="https://kuroro0718.github.io/2016/05/23/swift-tuples-introduction/"/>
    <id>https://kuroro0718.github.io/2016/05/23/swift-tuples-introduction/</id>
    <published>2016-05-22T22:57:00.000Z</published>
    <updated>2016-07-18T14:35:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>在objective-c當中，如果method需要回傳二個以上的值，則可以使用帶有二個property的object或dictionary<br>而Swift新增tuples此資料型態，可一次回傳多個值<br><a id="more"></a></p>
<h2 id="Unnamed-Tuples"><a href="#Unnamed-Tuples" class="headerlink" title="Unnamed Tuples"></a>Unnamed Tuples</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> stockProfolio = (<span class="number">3000</span>, <span class="number">3.4</span>)</div><div class="line"></div><div class="line">stockProfolio.<span class="number">0</span>		<span class="comment">// 3000</span></div><div class="line">stockProfolio.<span class="number">1</span>		<span class="comment">// 3.4</span></div></pre></td></tr></table></figure>
<p>此為無識別字的tuple，在存取時不方便使用。<br>我們可透過以下方式給予識別<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> (share, price) = stockProfolio</div><div class="line">share				<span class="comment">// 3000</span></div><div class="line">price				<span class="comment">// 3.4</span></div></pre></td></tr></table></figure></p>
<h2 id="Named-Tuples"><a href="#Named-Tuples" class="headerlink" title="Named Tuples"></a>Named Tuples</h2><p>上述的使用方式不夠直觀，建議使用named tuples增加可讀性<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> stockProfolio = (share: <span class="number">3000</span>, price: <span class="number">3.4</span>)</div><div class="line">stockProfolio.share			<span class="comment">// 3000</span></div><div class="line">stockProfolio.price			<span class="comment">// 3.4</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在objective-c當中，如果method需要回傳二個以上的值，則可以使用帶有二個property的object或dictionary&lt;br&gt;而Swift新增tuples此資料型態，可一次回傳多個值&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="https://kuroro0718.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift Class 介紹</title>
    <link href="https://kuroro0718.github.io/2016/05/20/swift-class-introduction/"/>
    <id>https://kuroro0718.github.io/2016/05/20/swift-class-introduction/</id>
    <published>2016-05-19T22:35:00.000Z</published>
    <updated>2016-07-18T14:35:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Class-宣告"><a href="#Class-宣告" class="headerlink" title="Class 宣告"></a>Class 宣告</h2><p>Swift宣告class相當簡單，只要使用class這個關鍵字和class名稱<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaxCalculator</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>跟objective-c的宣告方式比較，不需要繼承NSObject或?生的類別。<br><a id="more"></a></p>
<h2 id="Property"><a href="#Property" class="headerlink" title="Property"></a>Property</h2><p>class的property則需要賦與初始值或使用init做初始化<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaxCalculator</span> </span>&#123;</div><div class="line">  <span class="keyword">let</span> salary: <span class="type">Int</span></div><div class="line">  <span class="keyword">let</span> taxRate: <span class="type">Double</span></div><div class="line">  <span class="keyword">var</span> tax: <span class="type">Int</span></div><div class="line">  </div><div class="line">  <span class="keyword">init</span>(salary: <span class="type">Int</span>, taxRate: <span class="type">Double</span>) &#123;</div><div class="line">  	<span class="keyword">self</span>.salary = salary</div><div class="line">    <span class="keyword">self</span>.taxRate = taxRate</div><div class="line">    tax = <span class="type">Int</span>(salary * taxRate)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由於init的參數和property名稱一樣，所以使用self來區別<br>另一個要注意的是，class可以有多個init函式，但使用的參數必須不同 （和c的overloading function一樣）</p>
<h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaxCalculator</span> </span>&#123;</div><div class="line">  <span class="comment">// 略</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">calcSalary</span><span class="params">(tax: Int, taxRate: Double)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">Int</span>(tax / taxRate)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>method的宣告需要加上回傳值的資料型態，若無回傳值可省略。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> taxCalc = <span class="type">TaxCalculator</span>(salary: <span class="number">55000</span>, taxRate: <span class="number">0.15</span>)</div><div class="line">taxCalc.calcSalary(tax: <span class="number">2000</span>, taxRate: <span class="number">0.15</span>)</div></pre></td></tr></table></figure>
<p>參考來源：<br><a href="https://www.raywenderlich.com/115253/swift-2-tutorial-a-quick-start" target="_blank" rel="external">Swift 2 Tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Class-宣告&quot;&gt;&lt;a href=&quot;#Class-宣告&quot; class=&quot;headerlink&quot; title=&quot;Class 宣告&quot;&gt;&lt;/a&gt;Class 宣告&lt;/h2&gt;&lt;p&gt;Swift宣告class相當簡單，只要使用class這個關鍵字和class名稱&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TaxCalculator&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;跟objective-c的宣告方式比較，不需要繼承NSObject或?生的類別。&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="https://kuroro0718.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 基本型態筆記</title>
    <link href="https://kuroro0718.github.io/2016/05/20/basic-patterns-of-swift-notes/"/>
    <id>https://kuroro0718.github.io/2016/05/20/basic-patterns-of-swift-notes/</id>
    <published>2016-05-19T21:44:00.000Z</published>
    <updated>2016-07-18T14:35:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="let-vs-var"><a href="#let-vs-var" class="headerlink" title="let vs. var"></a>let vs. var</h2><p>一開始接觸新語言時，首先會碰到各種資料型態的用法。<br>在c/c++ java這些較早的靜態語言，資料型態的宣告是一件需要斤斤計較的事<br>特別是資源有限的平台，變數如果佔太大的記憶體會是潛在的問題，更別說因裝入超過表示範圍的值產生的bug<br><a id="more"></a></p>
<p>Swift為變數宣告提供二種方式： let和var<br>前者為constant，也就是不可變動的值；後者則是一般的宣告<br>一般是建議能使用let就使用，complier會自動做最佳化的動作</p>
<p>如果想特別指定資料型態，也可用<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> total : <span class="type">Int</span> = <span class="number">0</span>  <span class="comment">// 強制宣告total為Int</span></div><div class="line"><span class="keyword">let</span> taxRate = <span class="number">0.13</span>   <span class="comment">// 一般的宣告方式</span></div></pre></td></tr></table></figure></p>
<p>但如果沒特殊理由，使用預設的宣告方式以加強可讀性</p>
<h2 id="Array-and-Dictionaries"><a href="#Array-and-Dictionaries" class="headerlink" title="Array and Dictionaries"></a>Array and Dictionaries</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> taxRate = [<span class="number">0.15</span>, <span class="number">0.18</span>, <span class="number">0.20</span>]		<span class="comment">// array</span></div><div class="line"><span class="keyword">let</span> emptyArray = [<span class="type">String</span>]()					<span class="comment">// create an empty array with String type</span></div><div class="line"><span class="keyword">var</span> arr = [[<span class="type">Int</span>]]()									<span class="comment">// 2 dimensional array of arrays of Ints</span></div></pre></td></tr></table></figure>
<p>另一個資料型態為dictionary，這個在Python、Ruby都有類似的型態。<br>基本上就是一個key搭配value，可供建表及查循<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dict = [<span class="type">Int</span>: <span class="type">Double</span>]()					<span class="comment">// dictionary</span></div></pre></td></tr></table></figure></p>
<p>參考來源：<br><a href="https://www.raywenderlich.com/115253/swift-2-tutorial-a-quick-start" target="_blank" rel="external">Swift 2 Tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;let-vs-var&quot;&gt;&lt;a href=&quot;#let-vs-var&quot; class=&quot;headerlink&quot; title=&quot;let vs. var&quot;&gt;&lt;/a&gt;let vs. var&lt;/h2&gt;&lt;p&gt;一開始接觸新語言時，首先會碰到各種資料型態的用法。&lt;br&gt;在c/c++ java這些較早的靜態語言，資料型態的宣告是一件需要斤斤計較的事&lt;br&gt;特別是資源有限的平台，變數如果佔太大的記憶體會是潛在的問題，更別說因裝入超過表示範圍的值產生的bug&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="https://kuroro0718.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>[Code School] Rails API  Routing Note</title>
    <link href="https://kuroro0718.github.io/2016/05/04/code-school-rails-api-note/"/>
    <id>https://kuroro0718.github.io/2016/05/04/code-school-rails-api-note/</id>
    <published>2016-05-03T23:38:00.000Z</published>
    <updated>2016-07-18T14:34:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>假如web application需要提供API時，為了讓routing有效率及提升routing table的可讀性<br>原本的routes.rb如下<br><figure class="highlight ruby"><figcaption><span>routes.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Rails.application.routes.draw <span class="keyword">do</span>	</div><div class="line">	resources <span class="symbol">:posts</span>					<span class="comment"># http://your-domain/posts</span></div><div class="line">	</div><div class="line">	constraints <span class="symbol">subdomain:</span> <span class="string">'api'</span> <span class="keyword">do</span></div><div class="line">		resources <span class="symbol">:contents</span>			<span class="comment"># http://api.your-domain/contents</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>為了讓controller的目錄更有組織性，可以加上namespace<br><figure class="highlight ruby"><figcaption><span>routes.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Rails.application.routes.draw <span class="keyword">do</span>	</div><div class="line">	resources <span class="symbol">:posts</span>					</div><div class="line">	</div><div class="line">	constraints <span class="symbol">subdomain:</span> <span class="string">'api'</span> <span class="keyword">do</span></div><div class="line">		namespace <span class="symbol">:api</span> <span class="keyword">do</span> </div><div class="line">			resources <span class="symbol">:contents</span>				<span class="comment"># http://api.your-domain/api/contents</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>雖然controller目錄變乾淨，但URL卻多出個api/contents。<br>加入path<br><figure class="highlight ruby"><figcaption><span>routes.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Rails.application.routes.draw <span class="keyword">do</span>	</div><div class="line">	resources <span class="symbol">:posts</span>					</div><div class="line">	</div><div class="line">	constraints <span class="symbol">subdomain:</span> <span class="string">'api'</span> <span class="keyword">do</span></div><div class="line">		namespace <span class="symbol">:api</span>, <span class="symbol">path:</span> <span class="string">'/'</span> <span class="keyword">do</span> </div><div class="line">			resources <span class="symbol">:contents</span>				<span class="comment"># http://api.your-domain/contents</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>最後用一行搞定<br><figure class="highlight ruby"><figcaption><span>routes.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Rails.application.routes.draw <span class="keyword">do</span>	</div><div class="line">	resources <span class="symbol">:posts</span>					</div><div class="line">	</div><div class="line">	namespace <span class="symbol">:api</span>, <span class="symbol">path:</span> <span class="string">'/'</span>, <span class="symbol">constraints:</span> &#123; <span class="symbol">subdomain:</span> <span class="string">'api'</span> &#125; <span class="keyword">do</span> </div><div class="line">		resources <span class="symbol">:contents</span>		 </div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假如web application需要提供API時，為了讓routing有效率及提升routing table的可讀性&lt;br&gt;原本的routes.rb如下&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;figcaption&gt;&lt;span&gt;routes.rb&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Rails.application.routes.draw &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	resources &lt;span class=&quot;symbol&quot;&gt;:posts&lt;/span&gt;					&lt;span class=&quot;comment&quot;&gt;# http://your-domain/posts&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	constraints &lt;span class=&quot;symbol&quot;&gt;subdomain:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;api&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		resources &lt;span class=&quot;symbol&quot;&gt;:contents&lt;/span&gt;			&lt;span class=&quot;comment&quot;&gt;# http://api.your-domain/contents&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="rails" scheme="https://kuroro0718.github.io/tags/rails/"/>
    
  </entry>
  
  <entry>
    <title>Uploading image to AWS S3 with Paperclip </title>
    <link href="https://kuroro0718.github.io/2016/05/03/upload-image-to-aws-s3-with-paperclip/"/>
    <id>https://kuroro0718.github.io/2016/05/03/upload-image-to-aws-s3-with-paperclip/</id>
    <published>2016-05-02T23:29:00.000Z</published>
    <updated>2016-07-18T14:34:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>這二天將專案deploy到Heroku，卻因為paperclip和aws-sdk版本問題卡了好久<br>把解決過程記錄下來，以免未來再踩雷<br><a id="more"></a></p>
<p>一開始，照著<a href="https://devcenter.heroku.com/articles/paperclip-s3" target="_blank" rel="external">Heroku 官方教學</a>實作。<br>沒注意到文章表明此範例不支援aws-sdk 2之後的版本，以及沒指定paperclip的版本，導致圖片上傳失敗</p>
<h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><pre><code>1. 必須要有AWS S3的帳號，設定方法可參考[這篇](http://alexliang-blog.logdown.com/posts/385515-aws-uses-s3-for-uploading-images)
2. 己安裝ImageMagick
3. 己安裝Heroku Toolbelt
</code></pre><h2 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h2><figure class="highlight ruby"><figcaption><span>Gemfile</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gem <span class="string">"paperclip"</span>, <span class="string">'~&gt; 4.3.6'</span></div><div class="line">gem <span class="string">'aws-sdk'</span>, <span class="string">'&lt; 2.0'</span></div></pre></td></tr></table></figure>
<p>因為paperclip對新版的aws-sdk尚未支援，aws-sdk採用2.0以前版本；paperclip用穩定版本</p>
<figure class="highlight ruby"><figcaption><span>config/environments/production.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">config.paperclip_defaults = &#123;</div><div class="line">  <span class="symbol">:storage</span> =&gt; <span class="symbol">:s3</span>,</div><div class="line">  <span class="symbol">:s3_credentials</span> =&gt; &#123;</div><div class="line">    <span class="symbol">:bucket</span> =&gt; ENV[<span class="string">'S3_BUCKET_NAME'</span>],</div><div class="line">    <span class="symbol">:access_key_id</span> =&gt; ENV[<span class="string">'AWS_ACCESS_KEY_ID'</span>],</div><div class="line">    <span class="symbol">:secret_access_key</span> =&gt; ENV[<span class="string">'AWS_SECRET_ACCESS_KEY'</span>]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>這裡使用ENV表示機密資訊，你可以在application.yml設定其值（注意此yml檔要加入.gitignore）<br>但heroku不知道這些值，所以要另外設定</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ heroku config:<span class="built_in">set</span> S3_BUCKET_NAME=your_bucket_name</div><div class="line">$ heroku config:<span class="built_in">set</span> AWS_ACCESS_KEY_ID=your_access_key_id</div><div class="line">$ heroku config:<span class="built_in">set</span> AWS_SECRET_ACCESS_KEY=your_secret_access_key</div></pre></td></tr></table></figure>
<p>新增paperclip.rb檔在config/initializers下<br><figure class="highlight ruby"><figcaption><span>config/initializers/paperclip.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> Rails.env.production?</div><div class="line">  Paperclip::Attachment.default_options[<span class="symbol">:url</span>] = your_bucket_url</div><div class="line">  Paperclip::Attachment.default_options[<span class="symbol">:path</span>] = <span class="string">'/:class/:attachment/:id_partition/:style/:filename'</span></div><div class="line">  Paperclip::Attachment.default_options[<span class="symbol">:s3_host_name</span>] = <span class="string">'s3-us-west-1.amazonaws.com'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>要注意:url的值為’bucket_name’+s3.amazonaws.com，例如bucket取名paperclip-test，則url為paperclip-test.s3.amazonaws.com<br>而:s3_host_name則需參考<a href="http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region" target="_blank" rel="external">AWS文件</a>做相對應的修改。</p>
<p>參考資料：<br><a href="http://stackoverflow.com/questions/36391871/paperclip-s3-heroku-but-something-went-wrong" target="_blank" rel="external">Stack Overflow討論文章</a><br><a href="https://github.com/thoughtbot/paperclip" target="_blank" rel="external">Paperclip github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這二天將專案deploy到Heroku，卻因為paperclip和aws-sdk版本問題卡了好久&lt;br&gt;把解決過程記錄下來，以免未來再踩雷&lt;br&gt;
    
    </summary>
    
    
      <category term="rails" scheme="https://kuroro0718.github.io/tags/rails/"/>
    
      <category term="heroku" scheme="https://kuroro0718.github.io/tags/heroku/"/>
    
  </entry>
  
  <entry>
    <title>Check list of Heroku deployment</title>
    <link href="https://kuroro0718.github.io/2016/05/03/check-list-of-heroku-deployment/"/>
    <id>https://kuroro0718.github.io/2016/05/03/check-list-of-heroku-deployment/</id>
    <published>2016-05-02T19:24:00.000Z</published>
    <updated>2016-07-18T14:34:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>在deploy到Heroku前，應該檢查的事：<br><a id="more"></a></p>
<h2 id="開Branch"><a href="#開Branch" class="headerlink" title="開Branch"></a>開Branch</h2><p>因為你永遠不知道deploy後有什麼狀況，修改branch也比較安全<br>事實上，在修改bug、開發沒做過的功能前，你都應該新增branch</p>
<h2 id="Devise"><a href="#Devise" class="headerlink" title="Devise"></a>Devise</h2><p>如果有裝Devise，記得加上這段<br><figure class="highlight ruby"><figcaption><span>config/initializers/devise.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">config.secret_key = ENV[<span class="string">"DEVISE_SECRET"</span>]</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ heroku config:<span class="built_in">set</span> DEVISE_SECRET=XXX</div></pre></td></tr></table></figure>
<h2 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h2><p>因為Heroku不支援sqlite3，production改用postgresql<br><figure class="highlight ruby"><figcaption><span>Gemfile</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">group <span class="symbol">:development</span>, <span class="symbol">:test</span> <span class="keyword">do</span></div><div class="line">  gem <span class="string">'sqlite3'</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">group <span class="symbol">:production</span> <span class="keyword">do</span></div><div class="line">  gem <span class="string">'pg'</span></div><div class="line">en</div></pre></td></tr></table></figure></p>
<p>記得bundle install</p>
<p>參考資料：<br><a href="http://stackoverflow.com/questions/18080910/devise-secret-key-was-not-set" target="_blank" rel="external">Stack Overflow文章</a><br><a href="http://stackoverflow.com/questions/11714336/heroku-push-fails-with-the-error-an-error-occurred-while-installing-sqlite3-rub" target="_blank" rel="external">設定production database</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在deploy到Heroku前，應該檢查的事：&lt;br&gt;
    
    </summary>
    
    
      <category term="heroku" scheme="https://kuroro0718.github.io/tags/heroku/"/>
    
  </entry>
  
  <entry>
    <title>[Rails]  使用friendly_id增加URL可讀性</title>
    <link href="https://kuroro0718.github.io/2016/04/27/rails-use-friendly-id-increase-the-readability-url/"/>
    <id>https://kuroro0718.github.io/2016/04/27/rails-use-friendly-id-increase-the-readability-url/</id>
    <published>2016-04-27T03:39:00.000Z</published>
    <updated>2016-07-18T14:33:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>在預設的routing和URL中，每筆資料皆以id做查詢及顯示。<br>例如網站有個post model及controller，則第一則post id為1，其URL為/posts/1。<br>這對網站SEO及可讀性來說是很糟糕的做法。<br><a id="more"></a></p>
<p>如果要使用有意義的欄位(例如post title)作為URL的一部分，我們可以覆寫to_param並使用parameterize將id加上post title</p>
<figure class="highlight ruby"><figcaption><span>app/models/post.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> &lt; ActiveRecord::Base</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">to_param</span></span></div><div class="line">		<span class="string">"<span class="subst">#&#123;id&#125;</span>-<span class="subst">#&#123;title&#125;</span>"</span>.parameterize</div><div class="line">	<span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>透過此方法，假如第一則post title為rails routing，則本來的//post/1會變成//post/1-rails-routing。<br>但這樣還是有id number在URL。想更進一步去除id，需要在post model加入名為slug的欄位</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt; rails g migration AddSlugToPosts slug</div><div class="line">&gt;&gt; rake db:migrate</div></pre></td></tr></table></figure>
<p>修改post model<br><figure class="highlight ruby"><figcaption><span>app/models/post.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> &lt; ActiveRecord::Base</span></div><div class="line">	before_save <span class="symbol">:update_slug</span></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update_slug</span></span></div><div class="line">  	<span class="keyword">self</span>.slug =	title.parameterize  <span class="comment"># 在儲存post前，先將title參數化存到slug</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  </div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">to_param</span></span></div><div class="line">		slug</div><div class="line">	<span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<figure class="highlight ruby"><figcaption><span>app/controllers/posts_controller.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ActionController	</span></div><div class="line">  ... 略</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">find_params</span></span></div><div class="line">		@post = Post.find_by_slug(params[<span class="symbol">:id</span>])  <span class="comment"># 由於id在to_param時己改為slug，找資料時得用slug</span></div><div class="line">	<span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>以上介紹的方法最大的問題是當title被更改後(例如rails routing 2)，則URL會成為//posts/rails-routing-2<br>舊的網址將會失效，這對使用者來說會是非常不便的事。</p>
<p>因此介紹friendly_id這套gem，它能幫我們把URL變美觀，且省下很多力氣</p>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight ruby"><figcaption><span>Gemfile</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem <span class="string">'friendly_id'</span>, <span class="string">'~&gt; 5.1.0'</span> <span class="comment"># Note: You MUST use 5.0.0 or greater for Rails 4.0+</span></div></pre></td></tr></table></figure>
<p>接著bundle install以完成安裝</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt; rails generate friendly_id</div><div class="line">&gt;&gt; rake db:migrate</div></pre></td></tr></table></figure>
<h2 id="Model-and-Controller"><a href="#Model-and-Controller" class="headerlink" title="Model and Controller"></a>Model and Controller</h2><figure class="highlight ruby"><figcaption><span>app/models/post.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> &lt; ActiveRecord::Base</span></div><div class="line">  extend FriendlyId</div><div class="line">  friendly_id <span class="symbol">:title</span>, <span class="symbol">use:</span> <span class="symbol">:slugged</span></div><div class="line">  ... 略</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<figure class="highlight ruby"><figcaption><span>app/controllers/posts_controller.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ActionController	</span></div><div class="line">  ... 略</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">find_params</span></span></div><div class="line">		@post = Post.friendly.find(params[<span class="symbol">:id</span>]) </div><div class="line">	<span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>將本來的find前面加上friendly這個method，才能找到資料。</p>
<p>參考來源：<br><a href="https://gorails.com/episodes/pretty-urls-with-friendly-id" target="_blank" rel="external">Friendly ID介紹影片</a><br><a href="https://github.com/norman/friendly_id" target="_blank" rel="external">friendly_id github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在預設的routing和URL中，每筆資料皆以id做查詢及顯示。&lt;br&gt;例如網站有個post model及controller，則第一則post id為1，其URL為/posts/1。&lt;br&gt;這對網站SEO及可讀性來說是很糟糕的做法。&lt;br&gt;
    
    </summary>
    
    
      <category term="rails" scheme="https://kuroro0718.github.io/tags/rails/"/>
    
  </entry>
  
</feed>
