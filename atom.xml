<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alex Liang</title>
  
  <subtitle>在新創公司擔任全端工程師，記錄我的學習歷程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://alexliang.me/"/>
  <updated>2018-11-24T09:52:02.400Z</updated>
  <id>http://alexliang.me/</id>
  
  <author>
    <name>Alex Liang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript: Understaning the Weird Parts上課筆記</title>
    <link href="http://alexliang.me/JavaScript-Understaning-the-Weird-Parts%E4%B8%8A%E8%AA%B2%E7%AD%86%E8%A8%98/"/>
    <id>http://alexliang.me/JavaScript-Understaning-the-Weird-Parts上課筆記/</id>
    <published>2018-10-28T23:49:03.000Z</published>
    <updated>2018-11-24T09:52:02.400Z</updated>
    
    <content type="html"><![CDATA[<p>這篇記錄我在<a href="https://www.udemy.com/understand-javascript/" target="_blank" rel="noopener">Udemy的JS課程</a>上課筆記 (不斷更新)</p><a id="more"></a><h3 id="call-by-value-amp-call-by-reference"><a href="#call-by-value-amp-call-by-reference" class="headerlink" title="call by value &amp; call by reference"></a>call by value &amp; call by reference</h3><p>在js中，任何基本型別的變數皆為call by value，而object或是函式的參數則是call by reference</p><p>call by value: 當一個變數使用 = 指向另一個變數時，二者在記憶體存放的位址是分開的，也就是說變數b改變了並不會影響變數a</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>call by reference: 二個物件皆放在同一個記憶體位址，當一個物件改變也會影響到另一個物件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123; <span class="attr">greeting</span>: <span class="string">'Hi'</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> b = a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// &#123; greeting: 'Hi' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">// &#123; greeting: 'Hi' &#125;</span></span><br><span class="line"></span><br><span class="line">b.greeting = <span class="string">'Hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// &#123; greeting: 'Hello' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">// &#123; greeting: 'Hello' &#125;</span></span><br></pre></td></tr></table></figure><p>有了這個觀念之後，之後操作物件或傳參數至function時就要注意會不會動到原來的值。</p><h3 id="object-function-and-this"><a href="#object-function-and-this" class="headerlink" title="object, function and this"></a>object, function and this</h3><p>javascript的this常讓人感到困惑，先看個例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a();</span><br></pre></td></tr></table></figure><p>當呼叫a時會印出window object</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  name: <span class="string">'Object'</span>,</span><br><span class="line">  log: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b.log();</span><br></pre></td></tr></table></figure><p>上面這個例子，this印出來會是b object的內容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  name: <span class="string">'Object'</span>,</span><br><span class="line">  log: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> setName = <span class="function"><span class="params">newName</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.name = newName;</span><br><span class="line">    &#125;</span><br><span class="line">    setName(<span class="string">'Updated object'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b.log();</span><br></pre></td></tr></table></figure><p>這次加入setName函式至log method中，並且該函式會改變this.name，此時結果會如何呢？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object &#123; name: 'Object', log: function &#125;</span><br><span class="line">Object &#123; name: 'Object', log: function &#125;</span><br></pre></td></tr></table></figure><p>setName並沒有改變b object，而是改到window object</p><p>這也是js原始設計的小缺點，如果我們要讓setName改變b object，則需要加個變數:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  name: <span class="string">'Object'</span>,</span><br><span class="line">  log: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(self);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> setName = <span class="function"><span class="params">newName</span> =&gt;</span> &#123;</span><br><span class="line">      self.name = newName;</span><br><span class="line">    &#125;</span><br><span class="line">    setName(<span class="string">'Updated object'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(self);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">透過self指向b的記憶體位址，在setName函式裡即可正確的更動name。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">### call(), apply() and bind()</span></span><br><span class="line"><span class="string">11/24更新</span></span><br><span class="line"><span class="string">在Javascript裡Function是一種特殊的object，它有可執行的程式碼(CODE property),NAME(可為空，即是匿名著函式)以及這裡要介紹的call, apply和bind</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> javascript</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  firstName: <span class="string">'Alex'</span>,</span><br><span class="line">  lastName: <span class="string">'Liang'</span>,</span><br><span class="line">  getFullName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.lastName&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接呼叫此函式,this會是undefined</span></span><br><span class="line"><span class="keyword">const</span> logName = <span class="function">(<span class="params">lang1, lang2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`Logged: <span class="subst">$&#123;<span class="keyword">this</span>.getFullName()&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logPersonName = logName.bind(person);</span><br><span class="line"></span><br><span class="line">logPersonName(); <span class="comment">// Logged: Alex Liang</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用call達成一樣的效果</span></span><br><span class="line">logName.call(person, <span class="string">'en'</span>, <span class="string">'cht'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// apply則是將參數放在array裡</span></span><br><span class="line">logName.apply(person, [<span class="string">'en'</span>, <span class="string">'cht'</span>]);</span><br></pre></td></tr></table></figure><p>此段程式碼使用bind將logName函式和person物件結合並產生新的函式logPersonName<br>這也表示透過bind能改變函式內this的對象</p><p>而call不需要做出一個新的函式，直接將person傳入也能達成一樣的效果；apply和call不同之處在於傳入的參數放在array裡，其效果也是一樣。</p><p>這三個函式的應用可以參考下列程式碼</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接續上一段</span></span><br><span class="line"><span class="comment">// function borrowing</span></span><br><span class="line"><span class="keyword">const</span> person2 = &#123;</span><br><span class="line">  firstName: <span class="string">'Ben'</span>,</span><br><span class="line">  lastName: <span class="string">'Simmons'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.getFullName.apply(person2); <span class="comment">// Logged: Ben Simmons</span></span><br></pre></td></tr></table></figure><p>透過apply，我們讓person2使用getFullName </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function currying</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a*b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> multipleByTwo = multiply.bind(<span class="keyword">this</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.info(multipleByTwo(<span class="number">4</span>)); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p>透過事先設定的參數，我們可以建立許多函式做組合，這也是functional programming的基礎。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這篇記錄我在&lt;a href=&quot;https://www.udemy.com/understand-javascript/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Udemy的JS課程&lt;/a&gt;上課筆記 (不斷更新)&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://alexliang.me/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>使用shouldComponentUpdate提高React效能</title>
    <link href="http://alexliang.me/%E4%BD%BF%E7%94%A8shouldComponent%E6%8F%90%E9%AB%98React%E6%95%88%E8%83%BD/"/>
    <id>http://alexliang.me/使用shouldComponent提高React效能/</id>
    <published>2018-06-25T23:27:10.000Z</published>
    <updated>2018-06-25T23:45:04.644Z</updated>
    
    <content type="html"><![CDATA[<p>前陣子遇到一個React效能調教問題，一個後端API花不到一秒完成request，但整個畫面要5秒左右才會render完成。<br>後來發現每次只有一個項目需要更新，而全部重render的結果就是卡在browser，我們改用shouldComponentUpdate來改善此問題。</p><a id="more"></a><p>// 簡短介紹 react life cycle<br>在React life cycle中，</p><p>// 如何使用shouldComponentUpdate及注意事項</p><p>// etc</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前陣子遇到一個React效能調教問題，一個後端API花不到一秒完成request，但整個畫面要5秒左右才會render完成。&lt;br&gt;後來發現每次只有一個項目需要更新，而全部重render的結果就是卡在browser，我們改用shouldComponentUpdate來改善此問題。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://alexliang.me/tags/javascript/"/>
    
      <category term="front-end" scheme="http://alexliang.me/tags/front-end/"/>
    
      <category term="React" scheme="http://alexliang.me/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React Context API 介紹</title>
    <link href="http://alexliang.me/React-Context-API-%E4%BB%8B%E7%B4%B9/"/>
    <id>http://alexliang.me/React-Context-API-介紹/</id>
    <published>2018-06-13T14:06:02.000Z</published>
    <updated>2018-06-24T09:16:25.557Z</updated>
    
    <content type="html"><![CDATA[<p>在React裡，如果Parent和Child Component之間需要傳data，最直覺的方式是透過props傳進去，然而在結構複雜的頁面中，如果得一層一層傳下去，對於之後的維謢相當的麻煩。<br>而Context API便是用來解決資料傳遞的問題。</p><a id="more"></a><p>在React 16.3之前，context API的使用較為不便，得在parent component class定義若干函式，</p><p>而新的context API只要定義: </p><ol><li>context provider，提供要傳遞的data</li><li>context consumer，接收data</li></ol><p>下面是一個簡單的範例，假如頁面上有三個component，分別為書藉清單、書的簡介和內容試閱，它們為階層式架構，最底層的試閱得拿到書名。</p><p>在使用context前，必須先建立實體，createContext可傳入data的預設值。接著引入context至component</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BookContext = React.createContext();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookList</span> <span class="keyword">extends</span> <span class="title">Componet</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">     bookName: <span class="string">'Javascript the good part'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 傳遞資料的Component使用Provider</span></span><br><span class="line">  render() &#123;</span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">    &lt;BookContext.Provider value=&#123;<span class="keyword">this</span>.state&#125;&gt;</span><br><span class="line">    &lt;BookBrief /&gt;</span><br><span class="line">   &lt;<span class="regexp">/BookContext.Provider&gt;    </span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 中間這一層不需要傳context下去</span></span><br><span class="line"><span class="regexp">function BookBrief (props) &#123;</span></span><br><span class="line"><span class="regexp"> return (</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ContentFragment /</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"> );  </span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 要用到context這層使用Consumer接收資料</span></span><br><span class="line"><span class="regexp">function ContentFragment(props) &#123;</span></span><br><span class="line"><span class="regexp"> return (</span></span><br><span class="line"><span class="regexp">   &lt;BookContext.Consumer&gt;</span></span><br><span class="line"><span class="regexp">    &#123;context =&gt; context.bookName&#125;</span></span><br><span class="line"><span class="regexp">   &lt;/</span>BookContext.Consumer&gt;</span><br><span class="line"> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一來即可從BookList直接傳遞資料至底層的ContentFragment<br>不只是資料，我們也能傳函式下去，可以更方便的由Child Component呼叫Parent的函式。</p><p>參考資料: </p><ol><li><a href="https://reactjs.org/docs/context.html" target="_blank" rel="noopener">官方文件</a></li><li><a href="https://hackernoon.com/how-to-use-the-new-react-context-api-fce011e7d87" target="_blank" rel="noopener">How to use the new react contenxt API</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在React裡，如果Parent和Child Component之間需要傳data，最直覺的方式是透過props傳進去，然而在結構複雜的頁面中，如果得一層一層傳下去，對於之後的維謢相當的麻煩。&lt;br&gt;而Context API便是用來解決資料傳遞的問題。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://alexliang.me/tags/javascript/"/>
    
      <category term="front-end" scheme="http://alexliang.me/tags/front-end/"/>
    
      <category term="React" scheme="http://alexliang.me/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Mongoose Schema 設計:如何讓 array 能被移除</title>
    <link href="http://alexliang.me/MongoDB-Schema-%E8%A8%AD%E8%A8%88-%E5%A6%82%E4%BD%95%E8%AE%93-array-%E8%83%BD%E8%A2%AB%E7%A7%BB%E9%99%A4/"/>
    <id>http://alexliang.me/MongoDB-Schema-設計-如何讓-array-能被移除/</id>
    <published>2018-06-07T23:57:19.000Z</published>
    <updated>2018-06-08T00:22:49.478Z</updated>
    
    <content type="html"><![CDATA[<p>在MongoDB的操作裡，如果要清除某個欄位，我們可以用 $unset。而日前對著文件裡的 array 做此動作時，array只被清空但還是留下該欄位。</p><p>要解決此問題，在定義schema時，將array的default value設為undefined即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CarSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  cars: &#123;</span><br><span class="line">    type: <span class="built_in">Array</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>參考資料： <a href="http://mongoosejs.com/docs/schematypes.html#arrays" target="_blank" rel="noopener">Mongoose文件</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在MongoDB的操作裡，如果要清除某個欄位，我們可以用 $unset。而日前對著文件裡的 array 做此動作時，array只被清空但還是留下該欄位。&lt;/p&gt;
&lt;p&gt;要解決此問題，在定義schema時，將array的default value設為undefined即可&lt;/
      
    
    </summary>
    
    
      <category term="MongoDB" scheme="http://alexliang.me/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Restful API 檢查清單 </title>
    <link href="http://alexliang.me/Restful-API-%E6%AA%A2%E6%9F%A5%E6%B8%85%E5%96%AE/"/>
    <id>http://alexliang.me/Restful-API-檢查清單/</id>
    <published>2018-04-09T23:59:04.000Z</published>
    <updated>2018-05-21T14:07:40.418Z</updated>
    
    <content type="html"><![CDATA[<p>後端工程師的工作之一便是規劃API，不論是公司內部提供給前端或是第三方的溝通。這篇文章整設計API前要注意的事項</p><a id="more"></a><h3 id="在API設計之前"><a href="#在API設計之前" class="headerlink" title="在API設計之前"></a>在API設計之前</h3><p>提供給前端的API請先和前端工程師及UI/UX 討論流程和需要的功能。一般來說，UI/UX會先出圖，再來才是前後端工程師討論，此時要從用戶(前端和UI/UX)的角度思考：</p><ol><li>為什麼他們需要這個功能</li><li>此功能要完成什麼工作，如果讓後端邏輯變複雜，有沒有其它替代方案？</li><li>之後會不會擴展API功能（如增加第三方支付廠商，或是為其它客戶做客製化）</li></ol><p>這個階段得具體和詳細的討論，在流程和功能沒結果前不動手寫code<br>如果此API只是單純後端的需要，那只是討論的對象不同，其思考方式一樣。</p><h3 id="API設計"><a href="#API設計" class="headerlink" title="API設計"></a>API設計</h3><p>與用戶討論完API的功能後，下一步就要設計介面<br><a href="https://tw.twincl.com/programming/*641y" target="_blank" rel="noopener">這篇文章</a>談到Restful API在設計需注意的事。先分清楚此API是跟資源有關還是utility的功能，這會影響到URI的設計</p><p>跟資源相關的就是CRUD操作，例如註冊會員或刪除文章</p><p>而utility的API可能不特別針對哪個資源，例如 background job</p><p>至於使用哪個http動詞就看該行為了，例如註冊一個會員帳號你可能會使用 POST /1/members<br>一切先以用戶的角度看待介面的合理性。</p><p>設計時需要針對各操作構思後端的邏輯，列出該操作所有的選項，思考使用的DB資源，此時對於整個API應該有清楚的規劃。</p><h3 id="API實作之前"><a href="#API實作之前" class="headerlink" title="API實作之前"></a>API實作之前</h3><p>在API實作之前還需要 </p><ol><li>寫unit test </li><li>撰寫API文件，讓前端人員參考</li></ol><p>單元測試有幾點須注意： </p><ol><li>測試應涵蓋設計階段討論的 corner case </li><li>測試資料應盡可能簡明</li><li>API上線後如果遇到當初沒討論的狀況，先寫測試再解bug</li></ol><p>在撰寫文件方面，我們團隊使用<a href="http://apidocjs.com/" target="_blank" rel="noopener">API Doc</a>幫助產出document。不用另外存放文件，用註解的方式就能產出文件，對於前後端人員都是很方便的作法。</p><p>以上是這陣子和同事討論API到實作的心得，這篇記錄將來還會持續更新，讓每次的工作都能更順利。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;後端工程師的工作之一便是規劃API，不論是公司內部提供給前端或是第三方的溝通。這篇文章整設計API前要注意的事項&lt;/p&gt;
    
    </summary>
    
    
      <category term="backend" scheme="http://alexliang.me/tags/backend/"/>
    
  </entry>
  
  <entry>
    <title>React初探 以Todo app為例 </title>
    <link href="http://alexliang.me/React%E5%88%9D%E6%8E%A2-%E4%BB%A5Todo-app%E7%82%BA%E4%BE%8B/"/>
    <id>http://alexliang.me/React初探-以Todo-app為例/</id>
    <published>2018-04-05T02:17:28.000Z</published>
    <updated>2018-04-05T04:21:56.387Z</updated>
    
    <content type="html"><![CDATA[<p>最近有個功能需要前端的畫面，功能不複雜而且是給內部使用，趁這個機會玩一下React讓腦袋有不同的刺激。</p><a id="more"></a><p>同事丟給我<a href="https://www.youtube.com/watch?v=XCCW2y4wXNg" target="_blank" rel="noopener">教學影片</a>，由實作一個可新增/刪除的todo list app開始，範例的程式碼在<a href="https://www.youtube.com/redirect?event=video_description&amp;v=XCCW2y4wXNg&amp;redir_token=DQ-0VpI5r3QKGGxQEsWfOJx1WyN8MTUyMjk4MjUyNkAxNTIyODk2MTI2&amp;q=https%3A%2F%2Fgithub.com%2FMyNameIsURL%2Freact-todo-app" target="_blank" rel="noopener">這裡</a>。</p><h3 id="產生-React-App"><a href="#產生-React-App" class="headerlink" title="產生 React App"></a>產生 React App</h3><p>首先，使用create-react-app 這個npm module幫忙生成app的骨架</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br><span class="line"></span><br><span class="line">create-react-app todo-list</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> todo-list</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>在瀏覽器輸入 <a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a> 即可看到 app 的畫面</p><h3 id="解析程式碼"><a href="#解析程式碼" class="headerlink" title="解析程式碼"></a>解析程式碼</h3><figure class="highlight javascript"><figcaption><span>App.js </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./components/header'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.addTodo = <span class="keyword">this</span>.addTodo.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.removeTodo = <span class="keyword">this</span>.removeTodo.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  addTodo(todoText) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">`Add <span class="subst">$&#123;todoText&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeTodo(id) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Removing <span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;div className=<span class="string">"todo-wrapper"</span>&gt;</span><br><span class="line">          &lt;Header /&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">     );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>1~3行將需要的module和css檔案載入專案</p><p>Class App 繼承React.Component, 所以在constructor裡需要先呼叫super才能使用父類別的成員函式 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super" target="_blank" rel="noopener">super的說明</a></p><p>接下來需要綁定 addTodo 和 removeTodo這二個成員函式讓之後的操作能正確使用<a href="http://andyyou.logdown.com/posts/233010-understanding-javascript-functionprototypebind" target="_blank" rel="noopener">bind的說明</a> <a href="https://reactjs.org/docs/react-without-es6.html#Autobinding" target="_blank" rel="noopener">Autobinding</a></p><p>render function將我們想呈現的畫面渲染出來，這也是React.Component中必需要實作的函式。其中，Header放在另一個js檔案裡</p><figure class="highlight javascript"><figcaption><span>header.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;h1&gt;React Todo&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><p>看到這裡，相信有學過rails的人一定會對React的邏輯感覺到有所不同</p><p>在rails的view裡，前端基本上還是HTML的架構為主；而React則是以js搭配<a href="https://reactjs.org/docs/introducing-jsx.html" target="_blank" rel="noopener">JSX</a>操作component以呈現畫面</p><figure class="highlight javascript"><figcaption><span>todoItem.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./todoItem.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  removeTodo(_id) &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.removeTodo(_id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"todoWrapper"</span>&gt;</span><br><span class="line">        &lt;button className=<span class="string">"removeTodo"</span> onClick=&#123;(e) =&gt; <span class="keyword">this</span>.removeTodo(<span class="keyword">this</span>.props.id)&#125;&gt;remove&lt;<span class="regexp">/button&gt;&#123;this.props.todo.text&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程式碼用來處理todo list的各個事項。在render裡可以看到HTML的class被換成className，這是為了和javascript的class做區別</p><p>而button的部分，在onClick事件觸發時會執行<code>{(e) =&gt; this.removeTodo(this.props.id)}</code>，<br>這是javascript的語法，表示當button被點擊時會呼叫removeTodo，傳入待辦事項的id以移除。在removeTodo function裡又呼叫了<code>this.props.removeTodo(_id)</code>，props是用來當作傳入component的參數，也就是說這裡將_id傳入App.js的removeTodo裡</p><figure class="highlight javascript"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./components/header'</span>;</span><br><span class="line"><span class="keyword">import</span> TodoInput <span class="keyword">from</span> <span class="string">'./components/todoInput'</span>;</span><br><span class="line"><span class="keyword">import</span> TodoItem <span class="keyword">from</span> <span class="string">'./components/todoItem'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 略</span></span><br><span class="line"></span><br><span class="line">  addTodo(todoText) &#123;</span><br><span class="line">    <span class="keyword">let</span> todos = <span class="keyword">this</span>.state.todos.slice();</span><br><span class="line">    todos.push(&#123;</span><br><span class="line">      _id: <span class="keyword">this</span>.state.nextId,</span><br><span class="line">      text: todoText</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> nextId = <span class="keyword">this</span>.state.nextId + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      todos,</span><br><span class="line">      nextId</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeTodo(id) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      todos: <span class="keyword">this</span>.state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo._id !== id),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;div className=<span class="string">"todo-wrapper"</span>&gt;</span><br><span class="line">          &lt;Header /&gt;</span><br><span class="line">          &lt;TodoInput todoText=<span class="string">""</span> addTodo=&#123;<span class="keyword">this</span>.addTodo&#125;/&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &#123;</span><br><span class="line">      <span class="keyword">this</span>.state.todos.map(<span class="function">(<span class="params">todo</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">TodoItem</span> <span class="attr">todo</span>=<span class="string">&#123;todo&#125;</span> <span class="attr">key</span>=<span class="string">&#123;todo._id&#125;</span> <span class="attr">id</span>=<span class="string">&#123;todo._id&#125;</span> <span class="attr">removeTodo</span>=<span class="string">&#123;this.removeTodo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#125;)</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>以上就是React的初次介紹，其實學新東西最主要的目的不是為了跟上潮流，而是讓自己的腦袋活化，把其它知識做比較和整理並擴展認知邊界。</p><p>參考資料：</p><ul><li><a href="https://reactjs.org/docs/hello-world.html" target="_blank" rel="noopener">官方文件</a></li><li><a href="https://blog.techbridge.cc/2016/04/21/react-jsx-introduction/" target="_blank" rel="noopener">JSX介紹-繁</a></li><li><a href="https://hulufei.gitbooks.io/react-tutorial/content/jsx-in-depth.html" target="_blank" rel="noopener">JSX介紹-簡</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有個功能需要前端的畫面，功能不複雜而且是給內部使用，趁這個機會玩一下React讓腦袋有不同的刺激。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://alexliang.me/tags/javascript/"/>
    
      <category term="front-end" scheme="http://alexliang.me/tags/front-end/"/>
    
      <category term="React" scheme="http://alexliang.me/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Koa--使用koa-joi-router驗證API參數及其測試</title>
    <link href="http://alexliang.me/Koa-%E4%BD%BF%E7%94%A8koa-joi-router%E9%A9%97%E8%AD%89API%E5%8F%83%E6%95%B8%E5%8F%8A%E5%85%B6%E6%B8%AC%E8%A9%A6/"/>
    <id>http://alexliang.me/Koa-使用koa-joi-router驗證API參數及其測試/</id>
    <published>2017-07-30T13:17:59.000Z</published>
    <updated>2017-07-31T01:07:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司新的專案想用koa2來實作API服務，除了一般的post data外還會有第三方傳來的multipart-post data。我們使用koa-joi-router這個套件驗證傳進來的資料，同時使用supertest做測試。</p><a id="more"></a><p>首先說明koa-joi-router跟其它套件有什麼不同，它使用joi這個物件描述語言定義javascript object的schema，我們能限制輸入參數的型態、字元個數及是不是必要欄位。<br>而<a href="https://github.com/hapijs/joi" target="_blank" rel="noopener">joi</a>這個套件也能用在一般的javascript object</p><p>由於koa-joi-router己內建co-body及await-busboy這二套body-parser，我們不需要再另外裝body-parser。</p><p>以下是一個post API的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-joi-router'</span>);</span><br><span class="line"><span class="keyword">const</span> Joi = router.Joi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> public = router();</span><br><span class="line"></span><br><span class="line">public.route(&#123;</span><br><span class="line">  method: <span class="string">'post'</span>,</span><br><span class="line">  path: <span class="string">'/comments'</span>,</span><br><span class="line">  validate: &#123;</span><br><span class="line">    type: <span class="string">'json'</span>,</span><br><span class="line">    body: &#123;</span><br><span class="line">      title: Joi.string().max(<span class="number">100</span>).required,</span><br><span class="line">      content: Joi.string().required</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  handler: <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="comment">// create article</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line">app.use(public.middleware());</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>我們必須指定傳進來的資料類型及body要檢查的參數，koa-joi-router有三種type可以使用：json, form和multipart。要注意的是，如果傳進來資料型態和宣告的不同，會直接return 400. 要檢查的參數如果條件不符也會直接回400</p><p>而測試程式碼如下（使用mocha和supertest)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> superagent = <span class="built_in">require</span>(<span class="string">'supertest'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">'src/app'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> superagent(app.listen());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'API Test /1/comments'</span>, () =&gt; &#123;</span><br><span class="line">it(<span class="string">'Create a new comment'</span>, (done) =&gt; &#123;</span><br><span class="line">   <span class="keyword">const</span> testData = &#123;</span><br><span class="line">     title: <span class="string">'Test'</span>,</span><br><span class="line">     content: <span class="string">'This is a test comment'</span></span><br><span class="line">   &#125;;</span><br><span class="line">   </span><br><span class="line">   request()</span><br><span class="line">     .post(<span class="string">'/1/comments'</span>)</span><br><span class="line">     .send(testData)</span><br><span class="line">     .expect(<span class="number">200</span>)</span><br><span class="line">     .end(done);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>假如API傳進來的資料為form data，則validate的type設定要改為form</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public.route(&#123;</span><br><span class="line">  method: <span class="string">'post'</span>,</span><br><span class="line">  path: <span class="string">'/blog'</span>,</span><br><span class="line">  validate: &#123;</span><br><span class="line">    type: <span class="string">'form'</span>,</span><br><span class="line">    body: &#123;</span><br><span class="line">      title: Joi.string().max(<span class="number">100</span>).required,</span><br><span class="line">      content: Joi.string().required</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  handler: <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="comment">// create blog post</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>測試如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'API Test /1/blog'</span>, () =&gt; &#123;</span><br><span class="line">it(<span class="string">'Create a new blog post'</span>, (done) =&gt; &#123;</span><br><span class="line">   <span class="keyword">const</span> testData = &#123;</span><br><span class="line">     title: <span class="string">'Blog Test'</span>,</span><br><span class="line">     content: <span class="string">'This is a test post'</span></span><br><span class="line">   &#125;;</span><br><span class="line">   </span><br><span class="line">   request()</span><br><span class="line">     .post(<span class="string">'/1/blog'</span>)</span><br><span class="line">     .type(<span class="string">'form'</span>)</span><br><span class="line">     .send(testData)</span><br><span class="line">     .expect(<span class="number">200</span>)</span><br><span class="line">     .end(done);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最後則是multipart的資料，此種資料一般為上傳檔案或是stream會用到。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public.route(&#123;</span><br><span class="line">  method: <span class="string">'post'</span>,</span><br><span class="line">  path: <span class="string">'/files'</span>,</span><br><span class="line">  validate: &#123;</span><br><span class="line">    type: <span class="string">'multipart'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  handler: <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> parts = ctx.request.parts;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> part;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> ((part = <span class="keyword">await</span> parts)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Receive stream key: <span class="subst">$&#123;part[<span class="number">0</span>]&#125;</span>, value: <span class="subst">$&#123;part[<span class="number">1</span>]&#125;</span>);</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125; catch (err) &#123;</span></span><br><span class="line"><span class="string">      throw new Error(err);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    const fileContent = parts.field.File;</span></span><br><span class="line"><span class="string">    // upload file</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><p>Test code:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'API Test /1/files'</span>, () =&gt; &#123;</span><br><span class="line">it(<span class="string">'Upload a file'</span>, (done) =&gt; &#123;</span><br><span class="line">   <span class="keyword">const</span> testData = &#123;</span><br><span class="line">     File: <span class="string">'file content'</span></span><br><span class="line">   &#125;;</span><br><span class="line">   </span><br><span class="line">   request()</span><br><span class="line">     .post(<span class="string">'/1/blog'</span>)</span><br><span class="line">  .field(<span class="string">'File'</span>, testData.File)</span><br><span class="line">     .expect(<span class="number">200</span>)</span><br><span class="line">     .end(done);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果本地端使用postman測試的話，<a href="https://stackoverflow.com/questions/16015548/tool-for-sending-multipart-form-data-request" target="_blank" rel="noopener">這篇文章</a>的答案對於設定會有幫助。</p><p>參考資料：<br><a href="https://github.com/koajs/joi-router" target="_blank" rel="noopener">koa-joi-router github</a><br><a href="https://github.com/visionmedia/supertest" target="_blank" rel="noopener">supertest github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近公司新的專案想用koa2來實作API服務，除了一般的post data外還會有第三方傳來的multipart-post data。我們使用koa-joi-router這個套件驗證傳進來的資料，同時使用supertest做測試。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="http://alexliang.me/tags/Node-js/"/>
    
      <category term="koa" scheme="http://alexliang.me/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>使用jschardet偵測網頁編碼</title>
    <link href="http://alexliang.me/%E4%BD%BF%E7%94%A8jschardet%E5%81%B5%E6%B8%AC%E7%B6%B2%E9%A0%81%E7%B7%A8%E7%A2%BC/"/>
    <id>http://alexliang.me/使用jschardet偵測網頁編碼/</id>
    <published>2017-06-26T14:18:09.000Z</published>
    <updated>2017-06-26T14:45:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>寫爬蟲的過程中常需要對網頁選擇適當的編碼。</p><p>今天介紹一個jschardet module能自動檢測網頁編碼</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iconv     = <span class="built_in">require</span>(<span class="string">'iconv-lite'</span>);</span><br><span class="line"><span class="keyword">const</span> jschardet = <span class="built_in">require</span>(<span class="string">'jschardet'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchRawHtml</span>(<span class="params">linkURL, callback</span>) </span>&#123;</span><br><span class="line">request.get(&#123;</span><br><span class="line">      url:       linkURL,</span><br><span class="line">      encoding:  <span class="literal">null</span>,</span><br><span class="line">    &#125;, (error, response, body) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error);</span><br><span class="line">        callback(error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (response.statusCode !== <span class="number">200</span>) &#123;</span><br><span class="line">        callback(<span class="string">`Status code: <span class="subst">$&#123;response.statusCode&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> buf = iconv.decode(<span class="keyword">new</span> Buffer(body), jschardet.detect(body).encoding);</span><br><span class="line"></span><br><span class="line">      callback(<span class="literal">null</span>, buf);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jschardet.detect(body).encoding會回傳該網頁的編碼，對module實作有興趣的人可以參考原始碼，基本上是列出該編碼常用字元，算出網頁使用編碼的機率有多高</p><p>如此一來，以後遇到big5或其它語系的編碼不用另外記錄，可以直接取得正確的raw data</p><p>參考資料：<br><a href="https://github.com/aadsm/jschardet" target="_blank" rel="noopener">官方github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;寫爬蟲的過程中常需要對網頁選擇適當的編碼。&lt;/p&gt;
&lt;p&gt;今天介紹一個jschardet module能自動檢測網頁編碼&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://alexliang.me/tags/javascript/"/>
    
      <category term="Node.js" scheme="http://alexliang.me/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>使用MongoHub執行aggregate數量錯誤問題</title>
    <link href="http://alexliang.me/%E4%BD%BF%E7%94%A8MongoHub%E5%9F%B7%E8%A1%8Caggregate%E6%95%B8%E9%87%8F%E9%8C%AF%E8%AA%A4%E5%95%8F%E9%A1%8C/"/>
    <id>http://alexliang.me/使用MongoHub執行aggregate數量錯誤問題/</id>
    <published>2017-04-10T14:57:35.000Z</published>
    <updated>2017-04-10T15:23:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>在os X的環境下，常使用<a href="https://github.com/jeromelebel/MongoHub-Mac" target="_blank" rel="noopener">MongoHub</a>檢視資料庫及執行aggregate的動作。</p><p>前陣子使用aggregate檢查資料數量時，發現怎麼找數量總是多一筆。本來以為是指令下錯了，簡單做個實驗後，發現MongoHub的aggregate結果會有個預設值，如下圖</p><p><img src="MongoHub-aggregate.png" alt="MongoHub-aggregate"></p><p>在date match空值的情況下，仍然有1個document被找到，但根本沒這個document。<br>下次做aggregate時結果的數量得先減個1才準。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在os X的環境下，常使用&lt;a href=&quot;https://github.com/jeromelebel/MongoHub-Mac&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MongoHub&lt;/a&gt;檢視資料庫及執行aggregate的動作。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="MongoDB" scheme="http://alexliang.me/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB Aggregation介紹</title>
    <link href="http://alexliang.me/MongoDB-Aggregation%E4%BB%8B%E7%B4%B9/"/>
    <id>http://alexliang.me/MongoDB-Aggregation介紹/</id>
    <published>2017-02-19T05:10:50.000Z</published>
    <updated>2017-02-19T05:53:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>實際使用mongoDB時，遇到無法簡單下query得到結果的情況（例如計算不同科目上課學生的平均分數），我們會使用aggregation。</p><a id="more"></a><p>先來看一段aggregation的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.companies.aggregate( [</span><br><span class="line">    &#123; <span class="attr">$match</span>: &#123; <span class="string">"relationships.person"</span>: &#123; <span class="attr">$ne</span>: <span class="literal">null</span> &#125; &#125; &#125;,</span><br><span class="line">    &#123; <span class="attr">$project</span>: &#123; <span class="attr">relationships</span>: <span class="number">1</span>, <span class="attr">_id</span>: <span class="number">0</span> &#125; &#125;,</span><br><span class="line">    &#123; <span class="attr">$unwind</span>: <span class="string">"$relationships"</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">$group</span>: &#123;</span><br><span class="line">        _id: <span class="string">"$relationships.person"</span>,</span><br><span class="line">        count: &#123; <span class="attr">$sum</span>: <span class="number">1</span> &#125;</span><br><span class="line">    &#125; &#125;,</span><br><span class="line">    &#123; <span class="attr">$sort</span>: &#123; <span class="attr">count</span>: <span class="number">-1</span> &#125; &#125;</span><br><span class="line">] )</span><br></pre></td></tr></table></figure><p>aggregation的語法是以[]封裝所有的流程，裡面每一個{}可視為stage，類似linux command line可以將shell script的結果傳給下一個；以上例來說，先找出companies裡relationships的person不為空值的結果，將其傳給下一階段。</p><p>而常見的stage有$match, $project, $unwind和$group</p><p>$match能夠找出指定條件的document<br>$project和query的使用方式一樣，選擇結果想要出現的欄位<br>$unwind則是將document的陣列元素打散產生數個document，使新的document只出現一個該陣列元素<br>$group能將collection裡依條件做分群的動作，之後還能對新document做數值運算</p><p>再回到上例，$match的結果到$project stage時，選擇只要relationships這個陣列的資料，在$unwind根據relationships產生數個document，每個document就是一筆陣列元素。接下來$group把relationships的person當作新document的_id，以person分群並計算同一個人參與多少公司。最後根據count由大排到小。</p><p>一般建議的作法是先使用$match或$unwind限縮document的數量，讓之後的處理能加快。</p><p>下一個例子是找出學校科目中學生平均最高的例子，document內容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"_id"</span> : ObjectId(<span class="string">"50b59cd75bed76f46522c392"</span>),</span><br><span class="line">    <span class="string">"student_id"</span> : <span class="number">10</span>,</span><br><span class="line">    <span class="string">"class_id"</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="string">"scores"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"type"</span> : <span class="string">"exam"</span>,</span><br><span class="line">            <span class="string">"score"</span> : <span class="number">69.17634380939022</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"type"</span> : <span class="string">"quiz"</span>,</span><br><span class="line">            <span class="string">"score"</span> : <span class="number">61.20182926719762</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"type"</span> : <span class="string">"homework"</span>,</span><br><span class="line">            <span class="string">"score"</span> : <span class="number">73.3293624199466</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"type"</span> : <span class="string">"homework"</span>,</span><br><span class="line">            <span class="string">"score"</span> : <span class="number">15.206314042622903</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"type"</span> : <span class="string">"homework"</span>,</span><br><span class="line">            <span class="string">"score"</span> : <span class="number">36.75297723087603</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"type"</span> : <span class="string">"homework"</span>,</span><br><span class="line">            <span class="string">"score"</span> : <span class="number">64.42913107330241</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我們要找的目標只包含homework和exam，不包括quiz，所以第一階階使用$match和$unwind</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.grades.aggregate( [ </span><br><span class="line">&#123; <span class="variable">$unwind</span>: <span class="string">"<span class="variable">$scores</span>"</span> &#125;, </span><br><span class="line">&#123; <span class="variable">$match</span>: &#123; <span class="string">"scores.type"</span>: &#123; <span class="variable">$ne</span>: <span class="string">"quiz"</span> &#125; &#125; &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>結果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50b59cd75bed76f46522c34e"</span>), <span class="string">"student_id"</span> : 0, <span class="string">"class_id"</span> : 2, <span class="string">"scores"</span> : &#123; <span class="string">"type"</span> : <span class="string">"exam"</span>, <span class="string">"score"</span> : 57.92947112575566 &#125; &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50b59cd75bed76f46522c34e"</span>), <span class="string">"student_id"</span> : 0, <span class="string">"class_id"</span> : 2, <span class="string">"scores"</span> : &#123; <span class="string">"type"</span> : <span class="string">"homework"</span>, <span class="string">"score"</span> : 68.1956781058743 &#125; &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50b59cd75bed76f46522c34e"</span>), <span class="string">"student_id"</span> : 0, <span class="string">"class_id"</span> : 2, <span class="string">"scores"</span> : &#123; <span class="string">"type"</span> : <span class="string">"homework"</span>, <span class="string">"score"</span> : 67.95019716560351 &#125; &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50b59cd75bed76f46522c34e"</span>), <span class="string">"student_id"</span> : 0, <span class="string">"class_id"</span> : 2, <span class="string">"scores"</span> : &#123; <span class="string">"type"</span> : <span class="string">"homework"</span>, <span class="string">"score"</span> : 18.81037253352722 &#125; &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50b59cd75bed76f46522c351"</span>), <span class="string">"student_id"</span> : 0, <span class="string">"class_id"</span> : 16, <span class="string">"scores"</span> : &#123; <span class="string">"type"</span> : <span class="string">"exam"</span>, <span class="string">"score"</span> : 59.1805667559299 &#125; &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"50b59cd75bed76f46522c351"</span>), <span class="string">"student_id"</span> : 0, <span class="string">"class_id"</span> : 16, <span class="string">"scores"</span> : &#123; <span class="string">"type"</span> : <span class="string">"homework"</span>, <span class="string">"score"</span> : 6.48470951607214 &#125; &#125;</span><br></pre></td></tr></table></figure><p>再來做group，以’class_id’為新collection的_id並計算該科的平均分數，最後再做排序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.grades.aggregate( [ </span><br><span class="line"> &#123; <span class="variable">$unwind</span>: <span class="string">"<span class="variable">$scores</span>"</span> &#125;, </span><br><span class="line"> &#123; <span class="variable">$match</span>: &#123; <span class="string">"scores.type"</span>: &#123; <span class="variable">$ne</span>: <span class="string">"quiz"</span> &#125; &#125; &#125;, </span><br><span class="line"> &#123; <span class="variable">$group</span>: &#123; _id: &#123; <span class="string">"class"</span>: <span class="string">"<span class="variable">$class_id</span>"</span> &#125;, avg: &#123; <span class="variable">$avg</span>: <span class="string">"<span class="variable">$scores</span>.score"</span> &#125; &#125; &#125;, </span><br><span class="line"> &#123; <span class="variable">$sort</span>: &#123; avg: -1 &#125;&#125;</span><br><span class="line"> ])</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 1 &#125;, <span class="string">"avg"</span> : 64.89462395242741 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 9 &#125;, <span class="string">"avg"</span> : 58.32770509408073 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 5 &#125;, <span class="string">"avg"</span> : 56.80408386154663 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 26 &#125;, <span class="string">"avg"</span> : 55.73775030281308 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 4 &#125;, <span class="string">"avg"</span> : 55.51344573971435 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 20 &#125;, <span class="string">"avg"</span> : 54.06379996612098 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 24 &#125;, <span class="string">"avg"</span> : 53.72872750965091 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 16 &#125;, <span class="string">"avg"</span> : 53.36304538085671 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 13 &#125;, <span class="string">"avg"</span> : 52.10852066426234 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 14 &#125;, <span class="string">"avg"</span> : 51.843459264371795 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 23 &#125;, <span class="string">"avg"</span> : 51.55076295987544 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 11 &#125;, <span class="string">"avg"</span> : 51.52594302618334 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 3 &#125;, <span class="string">"avg"</span> : 51.415324716021125 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 29 &#125;, <span class="string">"avg"</span> : 50.190997428907586 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 0 &#125;, <span class="string">"avg"</span> : 49.79223626365225 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 17 &#125;, <span class="string">"avg"</span> : 49.63426020975154 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 6 &#125;, <span class="string">"avg"</span> : 49.51404572271715 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 27 &#125;, <span class="string">"avg"</span> : 49.195554303080606 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 19 &#125;, <span class="string">"avg"</span> : 48.92999492446235 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"class"</span> : 7 &#125;, <span class="string">"avg"</span> : 48.78360353370019 &#125;</span><br></pre></td></tr></table></figure><p><a href="https://docs.mongodb.com/manual/meta/aggregation-quick-reference/?_ga=1.93590685.1899033787.1479731611" target="_blank" rel="noopener">官方參考文件</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;實際使用mongoDB時，遇到無法簡單下query得到結果的情況（例如計算不同科目上課學生的平均分數），我們會使用aggregation。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MongoDB" scheme="http://alexliang.me/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Node.js爬蟲實戰：如何query動態網頁資料</title>
    <link href="http://alexliang.me/Node-js%E7%88%AC%E8%9F%B2%E5%AF%A6%E6%88%B0%EF%BC%9A%E5%A6%82%E4%BD%95query%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81%E8%B3%87%E6%96%99/"/>
    <id>http://alexliang.me/Node-js爬蟲實戰：如何query動態網頁資料/</id>
    <published>2017-02-05T12:00:49.000Z</published>
    <updated>2017-02-05T13:09:00.000Z</updated>
    
    <content type="html"><![CDATA[<p> 前陣子工作上需要寫爬蟲撈政府機關的資料回來，一般的靜態網頁可以由URL的規則找到資料連結，而動態網頁常無法使用此方式。最常遇到的是client端按下button後送javascript的動作給後端，然後才render網頁。</p><p> 這篇簡單記錄如何抓取這類型網站的資料。<br> <a id="more"></a></p><p> 我們以<a href="https://www.laws.taipei.gov.tw/lawsystem/wfLaw_Interpretation_SearchResult.aspx" target="_blank" rel="noopener">北市府法規局</a>網站為例，使用chrome的開發者工具。<br> 這裡分成2個部分：</p><ol><li>檢視送出query的header帶了哪些參數</li><li>觀察取得下一頁資料時，header又加入哪些參數</li></ol><p>一開始我們先測試最少需要哪些輸入才能查詢，在這個例子中至少需要勾選一個類別加上發布期間才能query資料。假設查詢營建類，從105年1月1日到105年12月31日。開啟開發人員工具，進入Network頁面，此時按”送出查詢”。</p><p> 在Network頁面下，我們找到wfLaw_Interpretation_SearchResult.aspx，點進去後可看到以下畫面：<br> <img src="FormData.png" alt="HTTP Request"><br> 紅色框起來的部分便是query送出的表格資料，這裡可以看到有三個欄位需要控制：’TCGC’, ‘TADF’及’TADT’。程式需要二個套件: request和cheerio，前者可送出HTTP request;後者可以把回傳的網頁資料透過類似jQuery的selector抓取需要的內容</p><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = Request.defaults(&#123;</span><br><span class="line">  jar: <span class="literal">true</span>,</span><br><span class="line">  timeout: <span class="number">60</span> * <span class="number">1000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">request.post(&#123;</span><br><span class="line">  url: <span class="string">'http://www.laws.taipei.gov.tw/lawsystem/wfLaw_Interpretation_SearchResult.aspx'</span>,</span><br><span class="line">  form: &#123;</span><br><span class="line">    TCGC: <span class="string">'003008'</span>,</span><br><span class="line">    TLC1: <span class="string">'AND'</span>,</span><br><span class="line">    TLC2: <span class="string">'AND'</span>,</span><br><span class="line">    TADF: <span class="string">'1010604'</span>,</span><br><span class="line">    TADT: <span class="string">'1010604'</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, (error, response, body) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (response.statusCode !== <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.statusCode);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> $ = cheerio.load(body);</span><br><span class="line">  <span class="keyword">const</span> span = $(<span class="string">'#ContentPlaceHolder1_gvList_lblRecordCount'</span>);</span><br><span class="line">  <span class="keyword">let</span> count = $(span[<span class="number">0</span>]).text();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Query結果共<span class="subst">$&#123;count&#125;</span>筆資料`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>這段程式碼會印出query結果的資料數量。到此解決第一部分。<br>如果query數量超過一頁的上限，想抓取下一頁的資料會發現HTML並無下一頁的連結<br><img src="NextPage.png" alt="Next Page"></p><p>它是透過javascript去產生下一頁的結果，我們使用開發者工具觀察點擊下一頁的動作：<br><img src="NextPageQuery1.png" alt="Form Data 1"><br><img src="NextPageQuery2.png" alt="Form Data 2"></p><p>Form Data有</p><ol><li>_EVENTTARGET</li><li>_VIEWSTATE</li><li>_VIEWGERNERATOR</li><li>_EVENTVALIDATION</li><li>ctl00$ContentPlaceHolder1$gvList$ctl01$ddlPage</li><li>ctl00$ContentPlaceHolder1$gvList$ctl24$ddlPage</li></ol><p>這6個值，其中_EVENTTARGET是固定的；ctl00$ContentPlaceHolder1$gvList$ctl01$ddlPage和ctl00$ContentPlaceHolder1$gvList$ctl24$ddlPage為從第幾頁過來和目前頁數-1</p><p>而2, 3, 4這三個值與cookie有關，在前一頁可取出這些值。於是程式碼需改寫成：</p><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = Request.defaults(&#123;</span><br><span class="line">  jar: <span class="literal">true</span>,</span><br><span class="line">  timeout: <span class="number">60</span> * <span class="number">1000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">request.post(&#123;</span><br><span class="line">  url: <span class="string">'http://www.laws.taipei.gov.tw/lawsystem/wfLaw_Interpretation_SearchResult.aspx'</span>,</span><br><span class="line">  form: &#123;</span><br><span class="line">    TCGC: <span class="string">'003010'</span>,</span><br><span class="line">    TLC1: <span class="string">'AND'</span>,</span><br><span class="line">    TLC2: <span class="string">'AND'</span>,</span><br><span class="line">    TADF: <span class="string">'1050101'</span>,</span><br><span class="line">    TADT: <span class="string">'1051231'</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, (error, response, body) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (response.statusCode !== <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.statusCode);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> $ = cheerio.load(body);</span><br><span class="line">  <span class="comment">// Get next page raw HTML</span></span><br><span class="line">  <span class="keyword">const</span> eventValidation = $(<span class="string">'#__EVENTVALIDATION'</span>).val();</span><br><span class="line">  <span class="keyword">const</span> viewState = $(<span class="string">'#__VIEWSTATE'</span>).val();</span><br><span class="line">  <span class="keyword">const</span> viewStateGenerator = $(<span class="string">'#__VIEWSTATEGENERATOR'</span>).val();</span><br><span class="line"></span><br><span class="line">  request.post(&#123;</span><br><span class="line">      url:  <span class="string">'http://www.laws.taipei.gov.tw/lawsystem/wfLaw_Interpretation_SearchResult.aspx'</span>,</span><br><span class="line">      form: &#123;</span><br><span class="line">        __EVENTTARGET:                                  <span class="string">'ctl00$ContentPlaceHolder1$gvList$ctl01$ddlPage'</span>,</span><br><span class="line">        __VIEWSTATE:                                    viewState,</span><br><span class="line">        __VIEWSTATEGENERATOR:                           viewStateGenerator,</span><br><span class="line">        __EVENTVALIDATION:                              eventValidation,</span><br><span class="line">        ctl00$ContentPlaceHolder1$gvList$ctl01$ddlPage: <span class="number">1</span>,</span><br><span class="line">        ctl00$ContentPlaceHolder1$gvList$ctl24$ddlPage: <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;, (err, resp, nextPage) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err);</span><br><span class="line">        callback(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(nextPage);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>取得第一個頁面後，記下view state等內容，再送出一個request並帶入剛才得到的狀態。如此可印出下一頁的內容。</p><p>最後給個提醒，面對這種動態網站時，如果我們使用async queue一次跑多個worker抓取資料，request的設定就不能使用default。原因是很有可能不同worker會用到同一個request object去query，假如A worker在抓取第二頁時，B worker送出另一個第二頁的query，會發生回傳內容不如預期的情況。<br>這時我們需要改變request object為區域變數，並且使用request.jar()取得custom cookie jar，範例如下：</p><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">crawler4DynamicPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> customJar = request.jar();</span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    jar:     customJar,</span><br><span class="line">    timeout: <span class="number">60</span> * <span class="number">1000</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>送query時再帶入options，這樣才能避免worker之間打架的情形</p><p><a href="http://yhsiang.logdown.com/posts/2014/05/10/how-to-write-a-crawler" target="_blank" rel="noopener">參考資料</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 前陣子工作上需要寫爬蟲撈政府機關的資料回來，一般的靜態網頁可以由URL的規則找到資料連結，而動態網頁常無法使用此方式。最常遇到的是client端按下button後送javascript的動作給後端，然後才render網頁。&lt;/p&gt;
&lt;p&gt; 這篇簡單記錄如何抓取這類型網站的資料。&lt;br&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="http://alexliang.me/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB初探及CRUD筆記</title>
    <link href="http://alexliang.me/MongoDB%E5%88%9D%E6%8E%A2%E5%8F%8ACRUD%E7%AD%86%E8%A8%98/"/>
    <id>http://alexliang.me/MongoDB初探及CRUD筆記/</id>
    <published>2017-01-23T13:40:58.000Z</published>
    <updated>2017-02-05T07:08:16.000Z</updated>
    
    <content type="html"><![CDATA[<p> 由於工作的關係開始使用MongoDB，我註冊官方的<a href="https://university.mongodb.com/courses/M101JS/about" target="_blank" rel="noopener">MongoDB for Node.js Developer</a>及<a href="https://university.mongodb.com/courses/M102/about" target="_blank" rel="noopener">MongoDB for DBAS</a>。這一系列文章為上課筆記和心得。</p> <a id="more"></a><p>MongoDB是NoSQL的其中一種類別，它是document-base，適合存放文檔類型的database。<br>而NoSQL主要改善傳統SQL database在join table的操作，在系統scale-out時能降低複雜度及改善效能。</p><p>一般來說，NoSQL不需要shema（專案需要加上schema的規則也是可以）採用key-value的存取方式，其格式類似json，以下介紹MongoDB CRUD的操作。</p><h2 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h2><p>假設本地端己建立一個collection名為movieDetails。其內容格式如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"_id"</span> : ObjectId(<span class="string">"569190ca24de1e0ce2dfcd4f"</span>),</span><br><span class="line"><span class="attr">"title"</span> : <span class="string">"Once Upon a Time in the West"</span>,</span><br><span class="line"><span class="attr">"year"</span> : <span class="number">1968</span>,</span><br><span class="line"><span class="attr">"rated"</span> : <span class="string">"PG-13"</span>,</span><br><span class="line"><span class="attr">"released"</span> : ISODate(<span class="string">"1968-12-21T05:00:00Z"</span>),</span><br><span class="line"><span class="attr">"runtime"</span> : <span class="number">175</span>,</span><br><span class="line"><span class="attr">"countries"</span> : [</span><br><span class="line"><span class="string">"Italy"</span>,</span><br><span class="line"><span class="string">"USA"</span>,</span><br><span class="line"><span class="string">"Spain"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"genres"</span> : [</span><br><span class="line"><span class="string">"Western"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"director"</span> : <span class="string">"Sergio Leone"</span>,</span><br><span class="line"><span class="attr">"writers"</span> : [</span><br><span class="line"><span class="string">"Sergio Donati"</span>,</span><br><span class="line"><span class="string">"Sergio Leone"</span>,</span><br><span class="line"><span class="string">"Dario Argento"</span>,</span><br><span class="line"><span class="string">"Bernardo Bertolucci"</span>,</span><br><span class="line"><span class="string">"Sergio Leone"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"actors"</span> : [</span><br><span class="line"><span class="string">"Claudia Cardinale"</span>,</span><br><span class="line"><span class="string">"Henry Fonda"</span>,</span><br><span class="line"><span class="string">"Jason Robards"</span>,</span><br><span class="line"><span class="string">"Charles Bronson"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"imdb"</span> : &#123;</span><br><span class="line"><span class="attr">"id"</span> : <span class="string">"tt0064116"</span>,</span><br><span class="line"><span class="attr">"rating"</span> : <span class="number">8.6</span>,</span><br><span class="line"><span class="attr">"votes"</span> : <span class="number">201283</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"metacritic"</span> : <span class="number">80</span>,</span><br><span class="line"><span class="attr">"awards"</span> : &#123;</span><br><span class="line"><span class="attr">"wins"</span> : <span class="number">4</span>,</span><br><span class="line"><span class="attr">"nominations"</span> : <span class="number">5</span>,</span><br><span class="line"><span class="attr">"text"</span> : <span class="string">"4 wins &amp; 5 nominations."</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"type"</span> : <span class="string">"movie"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果我要找出上映年份為2000年的電影，那該如何下指令呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.movieDetails.find(&#123;year: 2000&#125;).pretty()</span><br></pre></td></tr></table></figure><p>find為基本的query指令，{}裡是query條件，而pretty能讓輸出結果像上面那樣編排整齊。<br>如果query條件不只一個，則使用,分開。要注意的是欄位的型別，例如查詢string型別（例如<br>title）必需使用單引號包起來</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.movieDetails.find(&#123;title: <span class="string">'Once Upon a Time in the West'</span>&#125;).pretty()</span><br></pre></td></tr></table></figure><p>如果要限制query結果的數量可用limit；想依特定欄位排序則使用sort，skip可略過指定的數量的結果，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.movieDetails.find(&#123; year: 1968 &#125;).sort(&#123; runtime: -1 &#125;).skip(10).<span class="built_in">limit</span>(5)</span><br></pre></td></tr></table></figure><p>sort({ runtime: -1 })表示query結果依runtime的值做遞減排序；反之為1<br>skip(10)是省略前10筆結果；limit(5)表示只顯示5筆結果<br>要注意的是skip, sort和limit在實際運作時有預設的順序。分別為sort，skip最後才是limit</p><p>更多query方式請參考<a href="https://docs.mongodb.com/manual/tutorial/query-documents/" target="_blank" rel="noopener">官方文件</a></p><h2 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h2><p>建立資料則是使用insertOne或insertMany。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.movieDetails.insertOne(&#123; title: <span class="string">'Batman'</span>, year: 2008, runtime: 150 &#125;)</span><br></pre></td></tr></table></figure><p>上例是insertOne簡易的用法。{}裡的語法和find類似，我們可以建立指定的資料。<br>而insertMany則需要將多筆資料放在array裡：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.movieDetail.insertMany( [</span><br><span class="line">&gt;   &#123; title: <span class="string">'Batman'</span>, year: 2008, runtime: 150 &#125;,</span><br><span class="line">&gt;   &#123; title: <span class="string">'Taken'</span>, year: 2007, runtime: 124 &#125;,</span><br><span class="line">&gt;   &#123; title: <span class="string">'Iron Man'</span>, year: 2008, runtime: 130 &#125;</span><br><span class="line">&gt; ])</span><br></pre></td></tr></table></figure><h2 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h2><p>刪除資料可使用deleteOne, deleteMany和remove。<br>deleteOne及deleteMany和find一樣，必須給予query條件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.movieDetails.insertOne(&#123; title: <span class="string">'Batman'</span> &#125;)</span><br></pre></td></tr></table></figure><p>假如要刪除collection所有資料，則使用remove</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.movieDetails.remove()</span><br></pre></td></tr></table></figure><p>remove也可以只刪除一筆資料，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.movieDetails.remove(&#123; title: <span class="string">'Batman'</span> &#125;, 1)</span><br></pre></td></tr></table></figure><p>只要給予justOne參數為1即可</p><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><p>更新資料可使用updateOne和updateMany。假如加上upsert: true，如果沒找到資料會新增一筆進DB</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.movieDetails.updateOne(</span><br><span class="line">&#123; title: <span class="string">'Batman'</span> &#125;,</span><br><span class="line">&#123; title: <span class="string">'Batman 2'</span> &#125;,</span><br><span class="line">&#123;</span><br><span class="line">upsert: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>上例中，我們將”Batman”資料的title更新為”Batman 2”，假如沒找到Batman這筆資料則新增一筆Batman 2</p><p>參考來源：<br><a href="https://docs.mongodb.com/manual/crud/" target="_blank" rel="noopener">官方文件</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 由於工作的關係開始使用MongoDB，我註冊官方的&lt;a href=&quot;https://university.mongodb.com/courses/M101JS/about&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MongoDB for Node.js Developer&lt;/a&gt;及&lt;a href=&quot;https://university.mongodb.com/courses/M102/about&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MongoDB for DBAS&lt;/a&gt;。這一系列文章為上課筆記和心得。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="http://alexliang.me/tags/Node-js/"/>
    
      <category term="MongoDB" scheme="http://alexliang.me/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>The Effective Engineer讀書筆記-Optimize for Learning</title>
    <link href="http://alexliang.me/The-Effective-Engineer%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98-Optimize-for-Learning/"/>
    <id>http://alexliang.me/The-Effective-Engineer讀書筆記-Optimize-for-Learning/</id>
    <published>2016-12-13T14:55:04.000Z</published>
    <updated>2016-12-13T14:59:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者在google瀏覽source code及內部工具，學習程式語言的best practice<br>和同事們合作開發working demo並呈現給創辦人<br>二年後離開google，因為那裡己經不是適合的學習環境<br>接下來加入startup，尋求最大化自我成長</p><blockquote><p>最佳化學習是high leverage的項目 找到適合成長的環境</p></blockquote><a id="more"></a><h3 id="Adopt-a-Growth-Mindset"><a href="#Adopt-a-Growth-Mindset" class="headerlink" title="Adopt a Growth Mindset"></a>Adopt a Growth Mindset</h3><p>跨出自己的舒適圈</p><blockquote><p>別讓過去的經驗困住自己，別害怕學習新技能<br>決定論 vs 目的論<br>前者認為過去的經驗影響現在的自己；後者認為設定未來的自己才是目的<br>own your story</p></blockquote><h3 id="Invest-in-Your-Rate-of-Learning"><a href="#Invest-in-Your-Rate-of-Learning" class="headerlink" title="Invest in Your Rate of Learning"></a>Invest in Your Rate of Learning</h3><p>在學習初期，進步的幅度會很慢，但只要持續下去，後期會呈指數型成長<br>成長的百分比1%會影響結果很大<br>長期做重複性高的工作對成長沒有幫助</p><blockquote><p>thinking yourself as a startup or product<br>每天進步1%，一年後會成長37倍</p></blockquote><h3 id="Seek-Work-Environments-Conducive-to-Learning"><a href="#Seek-Work-Environments-Conducive-to-Learning" class="headerlink" title="Seek Work Environments Conducive to Learning"></a>Seek Work Environments Conducive to Learning</h3><p>六個選擇新環境的因素</p><ol><li>Fast growth</li><li>Training</li><li>開放心態</li><li>迅速回饋</li><li>同事</li><li>自主</li></ol><h3 id="Dedicate-Time-on-the-Job-to-Develop-New-Skills"><a href="#Dedicate-Time-on-the-Job-to-Develop-New-Skills" class="headerlink" title="Dedicate Time on the Job to Develop New Skills"></a>Dedicate Time on the Job to Develop New Skills</h3><p>20% time working on side project or learning new skills<br>擴展自己的能力圈(by reading, online course, writing code)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者在google瀏覽source code及內部工具，學習程式語言的best practice&lt;br&gt;和同事們合作開發working demo並呈現給創辦人&lt;br&gt;二年後離開google，因為那裡己經不是適合的學習環境&lt;br&gt;接下來加入startup，尋求最大化自我成長&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最佳化學習是high leverage的項目 找到適合成長的環境&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="讀書筆記" scheme="http://alexliang.me/tags/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>The Effective Engineer讀書筆記-Focus on High-Leverage Activities</title>
    <link href="http://alexliang.me/The-Effective-Engineer%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98-Focus-on-High-Leverage-Activities/"/>
    <id>http://alexliang.me/The-Effective-Engineer讀書筆記-Focus-on-High-Leverage-Activities/</id>
    <published>2016-12-06T13:36:48.000Z</published>
    <updated>2016-12-06T14:05:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>今年7月我參加一個雲端讀書會，主題為這本<a href="https://www.amazon.com/Effective-Engineer-Engineering-Disproportionate-Meaningful/dp/0996128107" target="_blank" rel="noopener">The Effective Engineer</a>。這本書由一位前google工程師撰寫，整本書圍繞在一個中心思想：如何讓工程師在有限的時間內產出最多的價值。</p><p>在讀這本書不僅學到一流人才的思考邏輯，同時也認識一群努力學習的好夥伴。我將這十週的讀書筆記整理在這系列的文章。</p><a id="more"></a><p>本書前言裡作者提出一個問題：是什麼原因讓那些最有效率的工程師與一般工程師的產出有很大的差距？<br>他使用leverage（槓桿）這個詞來檢視工程師的績效，意即好的工程師會將時間花在對工作和團隊最有效益的地方，工作項目leverage越高表示產出越大。</p><p>作者在章節裡提出幾項檢視的問題：</p><h2 id="3個自我檢視問題："><a href="#3個自我檢視問題：" class="headerlink" title="3個自我檢視問題："></a>3個自我檢視問題：</h2><ol><li>How can I complete this activity in a shorter amount of time?</li><li>How can I increase the value produced by this activity?</li><li>Is there something else that I could spend my time on that would produce more value?</li></ol><h2 id="提高leverage的方法："><a href="#提高leverage的方法：" class="headerlink" title="提高leverage的方法："></a>提高leverage的方法：</h2><ol><li>從縮短開會時間著手（先定義會議的目的，不要為了開會而開會）</li><li>減少開發或測試手動的比例（導入CI）</li><li>針對工作排出優先順序，找出最大價值的項目</li><li>找出客戶最大的痛點（網站裝線上客服，想辦法收集客戶的feedback）</li><li>使用profiling tool找出系統的bottleneck （或是找出客戶使用app卡住的地方）</li><li>建立onboarding flow（可設計像treehouse或其它線上程式教學網站的內容）</li></ol><h2 id="ORID練習"><a href="#ORID練習" class="headerlink" title="ORID練習"></a>ORID練習</h2><p>在讀書會中，organizer提倡使用ORID來討論事情。ORID為四個層次的問題，分別為Objective(客觀性層次)、Reflective(反應性層次)、Interpretive(詮釋性層次)、Decisional(決定性層次)。</p><ul><li>O: 作者在Quora建立onboarding flow，幫助新進工程師快速進入狀況<br>   之前待過的公司，不管團隊人數(200人或10人)，缺乏訓練規劃讓新進工程師容易犯錯</li><li>R:  新成員不敢更動code base，對產品和流程一知半解。還是得由資深RD指導</li><li>I:   如果建立onboarding flow，公司能節省training的總成本，新加入的工程師能很快就戰鬥位置</li><li>D:  在選擇公司時，將訓練這一環列入考慮(對新手來說); 公司的資深人員可討論如何建立onboarding flow</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年7月我參加一個雲端讀書會，主題為這本&lt;a href=&quot;https://www.amazon.com/Effective-Engineer-Engineering-Disproportionate-Meaningful/dp/0996128107&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Effective Engineer&lt;/a&gt;。這本書由一位前google工程師撰寫，整本書圍繞在一個中心思想：如何讓工程師在有限的時間內產出最多的價值。&lt;/p&gt;
&lt;p&gt;在讀這本書不僅學到一流人才的思考邏輯，同時也認識一群努力學習的好夥伴。我將這十週的讀書筆記整理在這系列的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="讀書筆記" scheme="http://alexliang.me/tags/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS Event Emitter介紹</title>
    <link href="http://alexliang.me/NodeJS-Event-Emitter%E4%BB%8B%E7%B4%B9/"/>
    <id>http://alexliang.me/NodeJS-Event-Emitter介紹/</id>
    <published>2016-12-04T04:54:02.000Z</published>
    <updated>2017-02-05T07:05:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>NodeJS是以非同步事件驅動為導向的設計，而基本的事件要有發射端和接受端，以下做個介紹。</p><a id="more"></a><p>NodeJS有二種event: system event和custom event<br>前者為底層操作如檔案系統和網路協定，以C++為核心寫在libuv裡<br>後者是本文要介紹的event emitter</p><p>以下範例實做簡單的event emitter</p><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Emitter = <span class="built_in">require</span>(<span class="string">'./emitter'</span>);</span><br><span class="line"><span class="keyword">var</span> emtr = <span class="keyword">new</span> Emitter();</span><br><span class="line"></span><br><span class="line">emtr.on(<span class="string">'greet'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello, this is Alex'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">emtr.on(<span class="string">'greet'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Thanks'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">emtr.emit(<span class="string">'greet'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>emitter.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Emitter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.events = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Emitter.prototype.on = <span class="function"><span class="keyword">function</span>(<span class="params">type, listener</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.events[type] = <span class="keyword">this</span>.events[type] || [];</span><br><span class="line">    <span class="keyword">this</span>.events[type].push(listener);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Emitter.prototype.emit = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.events[type]) &#123;</span><br><span class="line">        <span class="keyword">this</span>.events[type].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">listener</span>) </span>&#123;</span><br><span class="line">            listener();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Emitter;</span><br></pre></td></tr></table></figure><p>在emitter.js中，我們先宣告Emitter，其中包含一個空的events property。<br>接著定義on，此為事件的接收端，每次有人呼叫on時，將listener加入陣列中；emit則是發射端(emitter在電子學裡為電晶體的發射極，沒想到會借用這個字）負責把同類型事件的listener都執行一次</p><p>而app.js一開始先定義’greet’這個event的二個listener，再來呼叫emit，最後的結果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ Hello</span><br><span class="line">$ Hello, this is Alex</span><br><span class="line">$ Thanks</span><br></pre></td></tr></table></figure><p>從上例知道emitter的實作後，我們改用內建的events api來實作：</p><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Emitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="keyword">var</span> emtr = <span class="keyword">new</span> Emitter();</span><br><span class="line"></span><br><span class="line">emtr.on(<span class="string">'greet'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello, this is Alex'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">emtr.on(<span class="string">'greet'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Thanks'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">emtr.emit(<span class="string">'greet'</span>);</span><br></pre></td></tr></table></figure><p>其實只要改成require內建的events即可。但這個程式還有一個問題：出現很多次’greet’這個magic string。我們可以使用config.js將其包裝：</p><figure class="highlight javascript"><figcaption><span>config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    events : &#123;</span><br><span class="line">        GREET: <span class="string">'greet'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Emitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="keyword">var</span> eventConfig = <span class="built_in">require</span>(<span class="string">'./config'</span>).events;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> emtr = <span class="keyword">new</span> Emitter();</span><br><span class="line"></span><br><span class="line">emtr.on(eventConfig.GREET, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello, this is Alex'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">emtr.on(eventConfig.GREET, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Thanks'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">emtr.emit(<span class="string">'greet'</span>);</span><br></pre></td></tr></table></figure><p>如此一來，以後要加入／修改事件類型，只要改config.js就好，省去許多複製貼上和debug的時間。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NodeJS是以非同步事件驅動為導向的設計，而基本的事件要有發射端和接受端，以下做個介紹。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://alexliang.me/tags/javascript/"/>
    
      <category term="Node.js" scheme="http://alexliang.me/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>一天搞懂深度學習課後心得</title>
    <link href="http://alexliang.me/%E4%B8%80%E5%A4%A9%E6%90%9E%E6%87%82%E6%B7%B1%E5%BA%A6%E5%AD%B8%E7%BF%92%E8%AA%B2%E5%BE%8C%E5%BF%83%E5%BE%97/"/>
    <id>http://alexliang.me/一天搞懂深度學習課後心得/</id>
    <published>2016-11-27T01:11:58.000Z</published>
    <updated>2016-12-04T04:49:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>11/26參加台灣資料科學年會辦的”一天搞懂深度學習”，由台大李宏毅老師主講。<br>碩班曾接觸過機器學習，學習SVM,hMM和KNN等方法做分類和辯識，也使用matlab寫程式實作演算法。<br>那個時候才知道線性代數和機率如何應用在機器學習。而近年來深度學習的竄起，也讓我對這個題目感到好奇，所以報名這次的講座。</p><a id="more"></a><h2 id="Introduction-of-Deep-Learning"><a href="#Introduction-of-Deep-Learning" class="headerlink" title="Introduction of Deep Learning"></a>Introduction of Deep Learning</h2><p>一開始先介紹machine learning，它的目的是找出一個function可以辯識聲音，影像的內容；或是指導電腦在特定情境下做出回應，如下圍棋。<br>做過machine learning的人都知道，最大的挑戰在於針對問題找出合適的feature，然後建構function來解決特定問題。</p><p>也就是說，今天我要分辯影像中有沒有狗，那第一步得先研究狗的影像特徵是什麼？ 是形狀？顏色？或是其它空間的特徵？<br>有了特徵就能進一步建立數學式或是套用機器學習的模型，在餵給系統夠多的training data之後，丟給它一組testing data看結果如何</p><p>這個過程在deep learning就不太一樣了，我們一樣需要準備training data和testing data，但”訓練”的過程是調整deep learning的model和參數。</p><p>deep learning是由<a href="https://en.wikipedia.org/wiki/Artificial_neural_network" target="_blank" rel="noopener">Neural Network</a>建構。基本單位是neuron，是一個input * weights + bias再經過activation function的model。</p><p>Neural Network正是許多neuron所建立的網絡，將網絡決定好後也就得到一組function set。</p><p>這裡老師特別講解為何是”deep”而不是”fat”，其原因和電子電路一樣，我們可以使用簡單的邏輯閘（and,or,not)去組成複雜的電路。優點是參數的量會減少，也就是更有效率。</p><p>有了function set，便要估算它的效果。這裡會計算output和ground truth(上課是用target，在碩班時我們都習慣稱ground truth)之間的落差，也就是loss</p><p>老師用了一個非常有趣的例子說明為何找不到全域中最小的loss，在各種數學式的課程裡加進實際的例子會讓學生比較有感覺，效果也更好。</p><p>live demo使用<a href="https://keras.io/" target="_blank" rel="noopener">Keras</a>分辯手寫數字影像，在GPU和各種tuning parameter的手法下，不用一分鐘就能達到95%的正確率，心裡想如果以前有這個工具，做研究也能快上許多。</p><p>在QA時間，老師也說明遇到未知問題時，不見得要用deep learning的手法來解決，可以試著先用SVM。</p><h2 id="Deep-Learning-Model"><a href="#Deep-Learning-Model" class="headerlink" title="Deep Learning Model"></a>Deep Learning Model</h2><p>這個session介紹二種learning model: CNN和RNN<br>CNN將問題拆解成各種子問題，特別適合用在影像處理上。例如我們能建立第一層layer處理顏色；第二層處理紋路材質。<br>透過downsampling便很適合餵給CNN處理</p><p>CNN的另一種應用是套用style，網路上常有人分享使用deep learning將某種風格的畫作套用在照片上，便是使用此手法。</p><p>另一種model是RNN，擁有記憶功能，適合用在文字和語音等長度不一及前後文相關的問題上。<br>舉例來說，好棒和好棒棒這個二詞只差一個字但意思差很多的問題，便很適合用RNN來解決</p><h2 id="Beyond-Supervised-Learning"><a href="#Beyond-Supervised-Learning" class="headerlink" title="Beyond Supervised Learning"></a>Beyond Supervised Learning</h2><p>這節是我覺得deep learning最神奇的地方。</p><p>這個手法的重點是將encoder和decoder的輸出輸入接起來，讓encoder的輸入和decoder的輸出越接近越好，由此可得到一個auto-encoder<br>而auto-encoder也可以拿來當neural network的pre-train<br>最後我們能餵給大量training data情況下自動完成分類</p><p>另一種auto-encoder，Variational Auto Encoder(VAE)可幫助RNN提升正確率，而且它能透過演化讓結果越來越好</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>今天的演講充滿各種鄉民梗，也讓本來生硬的內容活潑易懂。<br>最後老師也以成為武林高手的條件來勉勵大家，要內外兼修才能達到高手的境界，也就是具備運算環境和解決問題的技巧。<br>一整天下來有點累，但也蠻多收獲的，知道現在的技術能達到什麼程度，以及該如何使用。<br>至於做的好不好就要看經驗啦 XD</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;11/26參加台灣資料科學年會辦的”一天搞懂深度學習”，由台大李宏毅老師主講。&lt;br&gt;碩班曾接觸過機器學習，學習SVM,hMM和KNN等方法做分類和辯識，也使用matlab寫程式實作演算法。&lt;br&gt;那個時候才知道線性代數和機率如何應用在機器學習。而近年來深度學習的竄起，也讓我對這個題目感到好奇，所以報名這次的講座。&lt;/p&gt;
    
    </summary>
    
    
      <category term="演講筆記" scheme="http://alexliang.me/tags/%E6%BC%94%E8%AC%9B%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS - 初探Module (2)</title>
    <link href="http://alexliang.me/NodeJS%E5%88%9D%E6%8E%A2-Module-Exports-2/"/>
    <id>http://alexliang.me/NodeJS初探-Module-Exports-2/</id>
    <published>2016-11-25T05:12:51.000Z</published>
    <updated>2017-02-05T07:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://kuroro0718.github.io/NodeJS%E5%88%9D%E6%8E%A2-Module-Exports-1/" target="_blank" rel="noopener">上一篇</a>介紹module.export的使用方式，這一篇介紹它的底層和其它用法</p><a id="more"></a><h3 id="引入整個資料夾"><a href="#引入整個資料夾" class="headerlink" title="引入整個資料夾"></a>引入整個資料夾</h3><p>我們可以將一個module拆成數個js檔案，利用一個index.js便可將整個資料夾打包給其它檔案使用</p><figure class="highlight javascript"><figcaption><span>payment/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> creditCard = <span class="built_in">require</span>(<span class="string">'credit_card'</span>);</span><br><span class="line"><span class="keyword">var</span> atmTransfer = <span class="built_in">require</span>(<span class="string">'atm'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line">creditCard: creditCard,</span><br><span class="line">atmTransfer: atmTransfer</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>payment/credit_card.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> payment = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'Pay $'</span> + price + <span class="string">'by credit card");</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">module.export = payment;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>payment/atm.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> payment = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Pay $'</span> + price + <span class="string">'by ATM transfer");</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">module.export = payment;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> payment = <span class="built_in">require</span>(<span class="string">'./payment'</span>);</span><br><span class="line"></span><br><span class="line">payment.creditCard();</span><br><span class="line">payment.atmTransfer();</span><br></pre></td></tr></table></figure><p>上例將payment底下二種不同的付款方式包在index.js檔案給外部使用</p><h3 id="利用json檔將設定包裝起來"><a href="#利用json檔將設定包裝起來" class="headerlink" title="利用json檔將設定包裝起來"></a>利用json檔將設定包裝起來</h3><figure class="highlight javascript"><figcaption><span>currency.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"tw"</span>: <span class="string">"NTD"</span>,</span><br><span class="line"><span class="string">"us"</span>: <span class="string">"USD"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>payment/credit_card.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currency = <span class="built_in">require</span>(<span class="string">'./currency.json'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> payment = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Pay $'</span> + price + <span class="string">' '</span> + currency.us + <span class="string">'by credit card");</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">module.export = payment;</span></span><br></pre></td></tr></table></figure><p>用這個方式可將設定值包裝成json檔，增加source code的可讀性</p><h3 id="原生module"><a href="#原生module" class="headerlink" title="原生module"></a>原生module</h3><p>NodeJS內建許多原生module，這裡是<a href="https://nodejs.org/dist/latest-v6.x/docs/api/" target="_blank" rel="noopener">api ducuments</a>。我們以util為例</p><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> price = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> statement = util.format(<span class="string">'The price is %s'</span>, price);</span><br><span class="line">util.log(statement);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ 28 Nov 14:54:32 - The price is 100</span><br></pre></td></tr></table></figure><p>原生module己提供一些方便的功能，遇到問題時上官網查文件說不定己有解決方案</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://kuroro0718.github.io/NodeJS%E5%88%9D%E6%8E%A2-Module-Exports-1/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上一篇&lt;/a&gt;介紹module.export的使用方式，這一篇介紹它的底層和其它用法&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://alexliang.me/tags/javascript/"/>
    
      <category term="Node.js" scheme="http://alexliang.me/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS - 初探Module (1)</title>
    <link href="http://alexliang.me/NodeJS%E5%88%9D%E6%8E%A2-Module-Exports-1/"/>
    <id>http://alexliang.me/NodeJS初探-Module-Exports-1/</id>
    <published>2016-11-22T06:13:19.000Z</published>
    <updated>2017-02-05T07:06:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>在學習NodeJS的過程中，module是結構化程式基本的組塊。<br>我們能藉由module將各function block分開來，並且在主程式引用其method或property<br>然而，要使用module的method或property有許多方式，本文整理常用的幾種並說明特性。</p><a id="more"></a><h2 id="Module基本使用方式"><a href="#Module基本使用方式" class="headerlink" title="Module基本使用方式"></a>Module基本使用方式</h2><p>假設我們有二個js程式：app.js和greet.js，想要讓app.js使用greet.js的method，則需要使用module</p><figure class="highlight javascript"><figcaption><span>greet.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = greet;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet = <span class="built_in">require</span>(<span class="string">'./greet'</span>);</span><br><span class="line">greet();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Hello</span><br></pre></td></tr></table></figure><p>要在app.js使用greet.js的greet方法，得先require greet.js<br>require預設是引入javascript檔案，所以副檔名可省略。<br>而greet.js中，將greet這個函式變數設為module.exports的參考<br>module.exports其實是個object，供其它js檔案使用其method</p><p>上述的寫法可以簡化為：<br><figure class="highlight javascript"><figcaption><span>greet.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet = <span class="built_in">require</span>(<span class="string">'./greet'</span>);</span><br><span class="line">greet();</span><br></pre></td></tr></table></figure><p>也是一樣的結果</p><h2 id="使用Function-Expression"><a href="#使用Function-Expression" class="headerlink" title="使用Function Expression"></a>使用Function Expression</h2><figure class="highlight javascript"><figcaption><span>greet2.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.greet = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet2 = <span class="built_in">require</span>(<span class="string">'./greet2'</span>).greet;</span><br><span class="line">greet2();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Hello World</span><br></pre></td></tr></table></figure><p>利用function expression讓module.exports多一個method</p><h2 id="使用Function-Constructor"><a href="#使用Function-Constructor" class="headerlink" title="使用Function Constructor"></a>使用Function Constructor</h2><figure class="highlight javascript"><figcaption><span>greet3.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greetr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.greeting = <span class="string">'Hello world!!'</span>;</span><br><span class="line"><span class="keyword">this</span>.greet = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.greeting);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> Greetr();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet3 = <span class="built_in">require</span>(<span class="string">'./greet3'</span>);</span><br><span class="line">greet3.greet();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Hello world!!</span><br></pre></td></tr></table></figure><p>使用function constructor建立object，並利用this存取function<br>module.exports則指向新的function constructor</p><p>此例有個需要注意的地方，假如我在app.js改變greeting的值，會發生什麼事？？<br><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet3 = <span class="built_in">require</span>(<span class="string">'./greet3'</span>);</span><br><span class="line">greet3.greeting = <span class="string">'Changed'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> greet3b = <span class="built_in">require</span>(<span class="string">'./greet3'</span>);</span><br><span class="line">greet3b.greet();</span><br></pre></td></tr></table></figure></p><p>改變greeting的值以後，我們再require greet3並且呼叫method，則結果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Hello world!!</span><br><span class="line">&gt; Changed</span><br></pre></td></tr></table></figure></p><p>這裡帶出一個module重要的特性：NodeJs的核心會cache同一個module的參考，所以當我們宣告greet3b為greet3的object時，其實底層是回傳上一個greet3的參考，而此時greeting己被改變。</p><p>所以在不同的js檔案使用同一個module時，需注意其實回傳的都是同一份copy</p><h2 id="Function-Constructor變形"><a href="#Function-Constructor變形" class="headerlink" title="Function Constructor變形"></a>Function Constructor變形</h2><figure class="highlight javascript"><figcaption><span>greet4.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greetr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.greeting = <span class="string">'Hello world!！!'</span>;</span><br><span class="line"><span class="keyword">this</span>.greet = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.greeting);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Greetr;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet4 = <span class="built_in">require</span>(<span class="string">'./greet4'</span>);</span><br><span class="line"><span class="keyword">var</span> greetr = <span class="keyword">new</span> greet4();</span><br><span class="line">greetr.greet();</span><br></pre></td></tr></table></figure><p>這種方式把建構子放在app.js，所以不會有二個require指向同一份copy</p><h2 id="Revealing-Module-Pattern"><a href="#Revealing-Module-Pattern" class="headerlink" title="Revealing Module Pattern"></a>Revealing Module Pattern</h2><figure class="highlight javascript"><figcaption><span>greet5.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greeting = <span class="string">'Hello JS!'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(greeting);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">greet: greet</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet5 = <span class="built_in">require</span>(<span class="string">'./greet5'</span>).greet;</span><br><span class="line">greet5();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Hello JS!</span><br></pre></td></tr></table></figure><p>這裡我們使用object並把greet指向greet methond，所以module.exports只能存取greet而不會改到其它值<br>這種方式也稱為Revealing Module Pattern，在javascript中是常用的包裝方式。</p><p>以上為NodeJS使用module.exports的幾種方式。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在學習NodeJS的過程中，module是結構化程式基本的組塊。&lt;br&gt;我們能藉由module將各function block分開來，並且在主程式引用其method或property&lt;br&gt;然而，要使用module的method或property有許多方式，本文整理常用的幾種並說明特性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://alexliang.me/tags/javascript/"/>
    
      <category term="Node.js" scheme="http://alexliang.me/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Retain cycle and capture list in Swift</title>
    <link href="http://alexliang.me/Retain-cycle-and-capture-list-in-Swift/"/>
    <id>http://alexliang.me/Retain-cycle-and-capture-list-in-Swift/</id>
    <published>2016-11-14T14:27:27.000Z</published>
    <updated>2016-11-14T14:28:18.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="swift" scheme="http://alexliang.me/tags/swift/"/>
    
      <category term="ios" scheme="http://alexliang.me/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>寄物便開發週記W3: 完成初版</title>
    <link href="http://alexliang.me/%E5%AF%84%E7%89%A9%E4%BE%BF%E9%96%8B%E7%99%BC%E9%80%B1%E8%A8%98W3-%E5%AE%8C%E6%88%90%E5%88%9D%E7%89%88/"/>
    <id>http://alexliang.me/寄物便開發週記W3-完成初版/</id>
    <published>2016-10-23T13:33:35.000Z</published>
    <updated>2016-10-23T14:21:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://kuroro0718.github.io/寄物便開發週記W2-開始動工" target="_blank" rel="noopener">上一篇</a>提到開發商家地圖和簡介的部分。</p><p>本週則是完成畫面最複雜的頁面。</p><a id="more"></a><p>依照設計師的初稿，第一個頁面要能讓使用者選擇寄物件數和寄/取物的時間</p><p>我第一版的畫面如下</p><p><img src="first-snapshot.png" alt="first-snapshot"><br>構想是使用者點選件數或時間文字時，會跑出數字picker或date picker</p><p>不囉嗦，先看完成品的操作畫面<br><img src="bagkeeper.gif" alt="Bagkeeper 操作畫面"></p><p>為了讓使用者能以最少的動作完成工作，我們將數字或時間選擇的部分做自動收合</p><p>時間的部分是參考apple內建的行事曆，更改寄物時間時，上方的時間文字和下方的取物時間會跟著變動;連取物時間的picker也有連動。</p><p>整個畫面使用tableview controller完成。使用5個section（包含最下面的送出按鈕），除了最後一個section外，其餘都有2個row，也就是picker的部分。</p><p>預設每個section只顯示一個row。當使用者點選某一個section時，會判斷該section的row number，接著改變其值，便能夠做到收合的效果。</p><p>而date picker的部分，由於寄物時間的picker會影響到其它三個元件。所以這裡使用notification來通知其它元件。</p><p>接下來就是demo day了。這三週比之前上班還累，但也蠻充實的。<br>希望demo day能夠順利介紹寄物便，為這10週畫下美好的句點！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;https://kuroro0718.github.io/寄物便開發週記W2-開始動工&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上一篇&lt;/a&gt;提到開發商家地圖和簡介的部分。&lt;/p&gt;
&lt;p&gt;本週則是完成畫面最複雜的頁面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://alexliang.me/tags/swift/"/>
    
      <category term="ios" scheme="http://alexliang.me/tags/ios/"/>
    
  </entry>
  
</feed>
