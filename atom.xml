<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alex Liang</title>
  
  <subtitle>在新創公司擔任軟體工程師，記錄我的學習歷程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://alexliang.me/"/>
  <updated>2022-11-18T00:22:10.195Z</updated>
  <id>https://alexliang.me/</id>
  
  <author>
    <name>Alex Liang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>對於轉職軟體工程師的一些體會</title>
    <link href="https://alexliang.me/%E5%B0%8D%E6%96%BC%E8%BD%89%E8%81%B7%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E4%B8%80%E4%BA%9B%E9%AB%94%E6%9C%83/"/>
    <id>https://alexliang.me/對於轉職軟體工程師的一些體會/</id>
    <published>2022-11-01T14:23:44.000Z</published>
    <updated>2022-11-18T00:22:10.195Z</updated>
    
    <content type="html"><![CDATA[<p>從 fw 工程師轉職到後端也6年了。一開始，只是因為本來的工作遇到瓶頸，又嚮往矽谷純軟公司的文化才跳出原本的圈子。</p><p>這二年在 alpha camp 擔任助教，前後也指導過 4, 50位學生。</p><p>每枇學生畢業前都會有一個 office hour，需要回答他們的問題及給出建議。</p><p>這篇文章想整理多數轉職者的問題及自己的經驗。</p><span id="more"></span><h2 id="常見問題"><a href="#常見問題" class="headerlink" title="常見問題"></a>常見問題</h2><h3 id="作品集"><a href="#作品集" class="headerlink" title="作品集"></a>作品集</h3><p>這題是後端學生常有的問題，假如是前端，網路上有一堆 xx 網站的復刻練習或是<a href="https://dev.to/frontendmentor/16-front-end-projects-with-designs-to-help-improve-your-coding-skills-5ajl">各種模版/元件的project</a>可以參考。</p><p>至於後端，我給的建議通常是二個方向:</p><ol><li>從自己過去領域/生活遇到沒效率或大量手動處理的事，寫個程式或 chrome plug-in 去解決。例如你是財會相關的，一定會遇到許多數字相關的工作，能不能寫個套件去自動化處理。</li><li>上述方向沒想到題目，那就寫支爬蟲吧。它可以訓練: <ul><li>HTTP 相關的操作，遇到需要下 query 或帶 token 的，以及如何產生目標 URL</li><li>處理 HTML，需要將有用的資訊抽出來，這部分需要了解 HTML/CSS 的結構</li><li>將有用的資訊存到 DB 裡，甚至設計 data pipeline 有效率的存放資料 (如何排程爬蟲、分階段取 raw data 和 content)</li></ul></li></ol><p>這些作品不用很大或很複雜，但可以很好地證明自己的能力。</p><h3 id="寫履歷、面試"><a href="#寫履歷、面試" class="headerlink" title="寫履歷、面試"></a>寫履歷、面試</h3><p>轉職者遇到的另一個問題是寫履歷和面試。這部分可以視為新鮮人找工作的情況，要引起用人主管/HR的興趣進而得到面試機會。</p><p>履歷基本的撰寫原則在各家工作媒合平台都有文章可參考，如<a href="https://www.yourator.co/articles/177">履歷怎麼寫？使用 STAR 原則，讓你的工作經歷 / 學歷更耀眼！</a>或<a href="https://www.yourator.co/articles/323">專長與興趣有哪些？沒有專長履歷怎麼寫？給新鮮人的專長、興趣尋找指南！</a></p><p>把自己過去做出成績的部分寫進履歷(最好能量化)，目的是說明自己有潛力能帶來貢獻。</p><p>履歷調整完後，最好請認識的工程師幫忙 review。</p><p>假如沒有認識的工程師，建議第一版可以先丟不太有興趣/可有可無的公司，先試試看水溫。</p><p>在面試前，別忘了先去找各個程式語言常考的問題，如<a href="https://www.guru99.com/javascript-interview-questions-answers.html">Top 100 JavaScript Interview Questions and Answers (2022)</a>。通常針對 junior engineer，主要是考觀念。</p><p>如果面試過程中遇到不會的問題，也不用硬擠出答案，記下來回去再找解答，確保下一次碰到時能正確回答。</p><p>這也是第一階段為何先投練兵用的公司。</p><p>不管在職涯哪個階段，面試都是需要準備和熟悉的流程，讓自己多點經驗再去面想要的工作，成功的機率會高一些。</p><h2 id="Offer-選擇"><a href="#Offer-選擇" class="headerlink" title="Offer 選擇"></a>Offer 選擇</h2><p>最後，當手上有幾個 offer 可以選擇時，該如何挑適合自己的職位？</p><p>撇開公司產品、地點和薪水(這點等等會提)，對於轉職新手工程師來說，第一份工作重要的事情只有一個: <strong>如何快速的提升自己</strong></p><p>因為不是本科系，本來在市場求職就吃虧了。如果一開始就進到不好的環境，學到錯誤的習慣和觀念。即使拿的薪水比其它間好，對將來的發展會是一大阻礙。</p><p>那要怎麼衡量手上的 offer 呢？以公司/產品時間軸和團隊成熟度區分，可以分成</p><p><img src="company_team_matrix.png" alt="company_team_matrix"></p><p><em>這只是簡單的二分法，實際上公司發展進程可以切好幾個階段。同一間公司，不同的產品線也有不同的時間軸</em></p><p>公司發展進程具體來說可以用以下幾點判斷:</p><ol><li>已經有產品的 MVP 嗎?</li><li>產品是否達到 prodcuct market fit? </li><li>公司開始賺錢？</li><li>公司已有幾個成熟產品，獲利和營收都很穩定</li></ol><p>越符合後面的要素，表示這間公司越成熟。也代表內部已有一套流程。</p><p>而工程團隊成熟度可以用下列角度思考:</p><ol><li>工程主管在業界有豐富的經驗或具體的成績</li><li>有沒有導入 CI/CD、code review 及寫文件等流程</li><li>各職位是否有專責人員，例如 QA、SRE 等等</li><li>團隊大部分成員都是有經驗的人 (可以去 Linkedin 搜尋)</li><li>團隊會定期分享技術文章或參與社群活動</li></ol><p>如果這幾個問題都是否定的答案，那表示工程團隊的成熟度較低。</p><p>從轉職工程師的角度來看，建議不要去剛起步的公司和工程團隊成熟度低的地方。</p><p>原因是這些公司通常還在摸索產品的方向，時程趕、資源少，新手進去可能會學到不好的習慣或是很快陣亡。</p><p>最理想的狀況是公司發展成熟+工程團隊很強，有很多可以學習的對象。這對轉職者來說會進步的很快。</p><p>在選擇 offer 時，別只看薪資、地點或 title，要加入未來成長性的考量。</p><p>進到好的環境，在自己肯學的情況下，會有不斷的機會可以磨練技術。只要做出成績，提高薪資也是自然而然的事。</p><p>假如自己沒拿到這種 offer 呢？以我的看法，把團隊成熟度高放在第一優先。在這個階段提升自己才是最重要的。</p><h2 id="轉職成功，然後呢？"><a href="#轉職成功，然後呢？" class="headerlink" title="轉職成功，然後呢？"></a>轉職成功，然後呢？</h2><p>這一塊也是很多學生會問的，如何在進入業界後持續進步。下一篇文章再分享可以參考的作法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;從 fw 工程師轉職到後端也6年了。一開始，只是因為本來的工作遇到瓶頸，又嚮往矽谷純軟公司的文化才跳出原本的圈子。&lt;/p&gt;
&lt;p&gt;這二年在 alpha camp 擔任助教，前後也指導過 4, 50位學生。&lt;/p&gt;
&lt;p&gt;每枇學生畢業前都會有一個 office hour，需要回答他們的問題及給出建議。&lt;/p&gt;
&lt;p&gt;這篇文章想整理多數轉職者的問題及自己的經驗。&lt;/p&gt;
    
    </summary>
    
    
      <category term="職涯發展" scheme="https://alexliang.me/tags/%E8%81%B7%E6%B6%AF%E7%99%BC%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>Kafka producer 如何避免 in-sync replicas fail 問題</title>
    <link href="https://alexliang.me/Kafka-producer-%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D-in-sync-replicas-fail-%E5%95%8F%E9%A1%8C/"/>
    <id>https://alexliang.me/Kafka-producer-如何避免-in-sync-replicas-fail-問題/</id>
    <published>2022-10-27T00:27:30.000Z</published>
    <updated>2022-10-30T05:52:26.863Z</updated>
    
    <content type="html"><![CDATA[<p>今年公司的架構開始轉為 microservice + event driven，我們選擇 <a href="https://aws.amazon.com/tw/msk/">AWS MSK</a> 託管 Kafka broker 以提供系統各 service 之間的溝通橋樑。</p><p>在一次 MSK upgrade 時，Kafka broker 重啓居然造成系統的 producer 無法 publish event，導致 streaming pipeline 短暫失常。</p><p>這篇文章記錄問題的發生原因和解決方法。</p><span id="more"></span><h2 id="Kafka-Replica"><a href="#Kafka-Replica" class="headerlink" title="Kafka Replica"></a>Kafka Replica</h2><p>在設定 Kafka broker 時，有一個參數通常會打開來，那就是 <a href="https://www.conduktor.io/kafka/kafka-topic-replication">kafka topic replication</a>。</p><p>它會複製 topic 到不同的 broker，降低一台 broker 發生問題時，event 消失的情況。</p><p>其中，replication factor 便是指定 event 會複製幾份在 broker。</p><p>假如設為 1， 表示 event 只有一份，並沒有 replication 的效果。要設幾份 replica 取決於 broker 數量及資料特性。</p><h2 id="In-Sync-Replicas-Fails"><a href="#In-Sync-Replicas-Fails" class="headerlink" title="In-Sync Replicas Fails"></a>In-Sync Replicas Fails</h2><p>假如今天 Kafka cluster 有三台 broker，replication factor 設為 2。 </p><p>在 producer publish event 時，會確保2份 replica 都寫入 broker 才回報成功。</p><p>而這次的情況是 MSK upgrade 時，重啓一台 broker，但我們的 producer 採用所有的 replica 都要寫入才算數。</p><p>這造成了不斷有 event 出現 In-Sync Replicas fails 問題，且這是無法 retry 成功的，直到 broker upgrade 完成。</p><h2 id="如何解決"><a href="#如何解決" class="headerlink" title="如何解決"></a>如何解決</h2><p>了解問題原因後，回到我們使用的 Kafka client library 官網。</p><p>找到 [produce message}(<a href="https://kafka.js.org/docs/producing#producing-messages">https://kafka.js.org/docs/producing#producing-messages</a>) 時有一個 <code>acks</code> 的選項，預設為 <code>-1</code> 表示所有 replica<br>都要完成寫入才會告知 producer publish 成功。</p><p>於是將這個參數改為 1，只要 leader broker 寫入成功便回報，這樣就能避免其中一台 broker 失效便無法完成 publish。</p><p>MSK 不定期會 upgrade，雖然都會通知用戶，但少了這個參數對系統穩定性會有很大的影響。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年公司的架構開始轉為 microservice + event driven，我們選擇 &lt;a href=&quot;https://aws.amazon.com/tw/msk/&quot;&gt;AWS MSK&lt;/a&gt; 託管 Kafka broker 以提供系統各 service 之間的溝通橋樑。&lt;/p&gt;
&lt;p&gt;在一次 MSK upgrade 時，Kafka broker 重啓居然造成系統的 producer 無法 publish event，導致 streaming pipeline 短暫失常。&lt;/p&gt;
&lt;p&gt;這篇文章記錄問題的發生原因和解決方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="kafka" scheme="https://alexliang.me/tags/kafka/"/>
    
      <category term="event-driven" scheme="https://alexliang.me/tags/event-driven/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL index 淺談及整理</title>
    <link href="https://alexliang.me/PostgreSQL-index-%E6%B7%BA%E8%AB%87%E5%8F%8A%E6%95%B4%E7%90%86/"/>
    <id>https://alexliang.me/PostgreSQL-index-淺談及整理/</id>
    <published>2022-10-16T02:48:43.000Z</published>
    <updated>2022-10-27T00:20:53.159Z</updated>
    
    <content type="html"><![CDATA[<p>前陣子遇到了 DB 效能的問題才回頭檢視 PostgreSQL index 的基本運作和注意事項。</p><p>這篇文章簡單做個記錄，介紹 PG 是如何存放資料、為何加了 index 可以加快查詢速度，以及哪些情況用 index 沒有效果。</p><span id="more"></span><h2 id="PostgreSQL-如何存取資料"><a href="#PostgreSQL-如何存取資料" class="headerlink" title="PostgreSQL 如何存取資料"></a>PostgreSQL 如何存取資料</h2><p>資料庫做為存放 persistence data 的單元，如何設計檔案系統將資料存在 HD (SSD) 便是一大課題。</p><p>先介紹 PG 的檔案系統的各個名詞：</p><ul><li>heap file(heap): 存放 table 所有資料的檔案</li><li>item(tuple): 表示 table 的單一 row </li><li>block(page): heap file 被分為許多 block，一個 block (8KB) 包含許多 rows </li></ul><p>假如系統有一張 customers 的 table, 其內容如下:</p><p><img src="customer_table.png" alt="customer"></p><p>在沒有建 index 的情況下，使用者查詢 customers 時， PG 會將整張表載入 memory 裡再根據條件一個個找</p><p><img src="pg_heap_file_mem.drawio.png" alt="load customer table to memory"></p><p>可以想像，當這張表很多記錄時，這種操作會多麼的耗時。這也就是我們說的 full table scan</p><p><strong>note: 除了上述的情況，還有其它會造成 <a href="https://en.wikipedia.org/wiki/Full_table_scan">full table scan 的情境</a></strong></p><h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2><p>為了要避免每次查詢時需要 full table scan, 我們可以選定欄位建 index</p><p>挑選欄位建 index 時，需要從查詢常用的條件下手。</p><p>PostgreSQL 提供多種 index 型態，預設使用 <a href="https://clu.gitbook.io/data-structure-note/b-tree">B tree</a> 做為 index 的資料結構</p><p>以上個例子舉例，假如塵用程式以 name 查詢 customers，以 name 建立 index 為合理的選擇。其 SQL 如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX <span class="keyword">ON</span> customers (name);</span><br></pre></td></tr></table></figure><p>建立 index 後，使用 name 查詢時，PG 會先去從 index 搜尋資料的位址:</p><p><img src="pg_heap_file_index.drawio.png" alt="index with B-Tree"></p><p>假如 SQL 為: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;ALex&#x27;</span></span><br></pre></td></tr></table></figure><p>則 PG 能從 index 知道 “Alex” 這筆記錄在 block 0, index 0 的位置。</p><h2 id="使用-Index-的限制"><a href="#使用-Index-的限制" class="headerlink" title="使用 Index 的限制"></a>使用 Index 的限制</h2><p>建完 index 後，不是每種查詢方式都能利用到它。以 <a href="https://www.postgresql.org/docs/current/indexes-types.html#INDEXES-TYPES-BTREE">B-Tree</a> 來說，它只支援 <code>&lt;   &lt;=   =   &gt;=   &gt;</code>  這幾種條件。</p><p>假如用 <code>Like</code> 這種 pattern match 的查詢，在條件是以固定字串為開始的情況，如 <code>name Like &#39;Alex%&#39;</code> 或是 <code>name Like &#39;^Alex&#39;</code> 能利用到 index。</p><p>但假如是 <code>name Like &#39;%ALex&#39;</code> 則無法利用到 index，這點要特別留意。</p><p>另外，建立 index 是需要付出代價的。它也是種存放在硬碟的檔案，隨著 table 的資料量增加，index 的用量也會增加。</p><p>在資料的 insert/update/delete 都需要更新 index，這些操作也會增加執行時間。</p><p>建議定期去整理 table 的 index，將已經沒有使用的 index 刪掉。 </p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.udemy.com/course/sql-and-postgresql/">SQL and PostgreSQL: The Complete Developer’s Guide</a></li><li><a href="https://www.postgresql.org/docs/current/indexes-types.html#INDEXES-TYPES-BTREE">B-Tree Index Type</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前陣子遇到了 DB 效能的問題才回頭檢視 PostgreSQL index 的基本運作和注意事項。&lt;/p&gt;
&lt;p&gt;這篇文章簡單做個記錄，介紹 PG 是如何存放資料、為何加了 index 可以加快查詢速度，以及哪些情況用 index 沒有效果。&lt;/p&gt;
    
    </summary>
    
    
      <category term="postgresql" scheme="https://alexliang.me/tags/postgresql/"/>
    
      <category term="database" scheme="https://alexliang.me/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>使用 babel decorator plugin 實現 Aspect-Oriented Programming</title>
    <link href="https://alexliang.me/%E4%BD%BF%E7%94%A8-babel-decorator-plugin-%E5%AF%A6%E7%8F%BE-Aspect-Oriented-Programming/"/>
    <id>https://alexliang.me/使用-babel-decorator-plugin-實現-Aspect-Oriented-Programming/</id>
    <published>2022-09-03T08:15:27.000Z</published>
    <updated>2022-09-10T14:09:21.357Z</updated>
    
    <content type="html"><![CDATA[<p>實務上經常會遇到程式流程夾雜許多非核心，但又必須得做的行為，例如 logging, auit, notification 或 cache.</p><p>這篇文章介紹如何使用 babel decorator plugin 實現 Aspect Object Programming。</p><p>將共用的功能抽到 decorator，讓整個流程變的清楚好懂。<br><span id="more"></span></p><p>開頭提到的這些行為在不同實作間會一直重複發生。對於想了解流程的人來說，這些其實不是核心的部分，如下圖所示：</p><p><img src="aspect-oriented-programming.jpeg" alt="aspect-oriented-programming"></p><p>note: <em>在 SRE 的世界同樣也會發生每個 container 需要加入非業務邏輯的功能，如提供 HTTPS。其解決方案是 <a href="https://tachingchen.com/tw/blog/desigining-distributed-systems-the-sidecar-pattern-concept/">https://tachingchen.com/tw/blog/desigining-distributed-systems-the-sidecar-pattern-concept/</a> 稱為 sidecar pattern</em></p><h2 id="Babel-Decorator-Plugin"><a href="#Babel-Decorator-Plugin" class="headerlink" title="Babel Decorator Plugin"></a>Babel Decorator Plugin</h2><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><p><strong>在安裝 babel plugin 前，請先確保已安裝 @babel/core and @babel/preset-env</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/plugin-proposal-decorators @babel/eslint-parser</span><br></pre></td></tr></table></figure><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>設定 babel config: </p><figure class="highlight javascript"><figcaption><span>babel.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [<span class="string">&quot;@babel/plugin-proposal-decorators&quot;</span>, &#123; <span class="attr">legacy</span>: <span class="literal">true</span> &#125;]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [<span class="string">&quot;@babel/preset-env&quot;</span>, &#123; <span class="attr">targets</span>: &#123; <span class="attr">node</span>: <span class="string">&quot;current&quot;</span> &#125; &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果專案有使用 ESLint，需要設定 parser 讓 ESLint 認得 decorator</p><figure class="highlight javascript"><figcaption><span>.eslint.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&quot;@babel/eslint-parser&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>我們以 log 為例，babel decorator 本筫上是一個 wrapper function。其 signature 為 <code>(value, context)</code></p><p><code>value</code> 就是包裝的對象，可以是 function 或 class，使用 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">apply</a> 取得對象的結果。</p><p>如此一來，我們可以選擇在包裝對象的前後插入程式碼，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">value, context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123; <span class="comment">// args is arguments of wrapped method</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Logged at: &quot;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString());</span><br><span class="line">    <span class="keyword">return</span> value.apply(<span class="built_in">this</span>, args);  <span class="comment">// value is wrapped method</span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @log</span><br><span class="line">  <span class="function"><span class="title">getBio</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> is a <span class="subst">$&#123;<span class="built_in">this</span>.age&#125;</span> years old`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這裡宣告 log decorator，能印出呼叫對象的時間點及 error handling。</p><p>另一個需要注意的是 <code>context</code> 參數，它是一個 object 具有包裝對象的資訊。我們可以到 <a href="https://javascriptdecorators.org/">decorator playground</a> 試玩，可以發現 <code>context</code> 有以下 property:</p><ul><li>kind</li><li>name</li><li>isStatic</li><li>isPrivate</li><li>getMetadata</li><li>setMetadata</li></ul><p>常用的有 <code>kind</code> 和 <code>name</code>，前者為包裝對象的類型，在這個範例為 <code>method</code>；後者為對象的名稱。</p><p>這些資訊能讓 decorator 做更有彈性的處理，例如針對  class 的 decorator。</p><p>需要注意的是，假如 decorator 對象是 static method，則包裝後的 method 也會是 static。</p><blockquote><p>note: babel 最近 release <a href="https://babeljs.io/blog/2022/09/05/7.19.0#stage-3-decorators-14836httpsgithubcombabelbabelpull14836">Stage 3 decorators</a>，其 <code>context</code> 有些許差異，使用上需多做留意。</p></blockquote><p>我們也可以給予 decorator 參數，讓行為有更多變化，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cached</span>(<span class="params">key</span>) =&gt; (<span class="params">value, context</span>) =&gt; </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (map.has(key)) <span class="keyword">return</span> map.get(key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = value.apply(<span class="built_in">this</span>, args);</span><br><span class="line">map.set(key, result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoppingCart</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  @cached(KEY)</span><br><span class="line">  <span class="keyword">get</span> <span class="title">amount</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://blog.logrocket.com/understanding-javascript-decorators/">https://blog.logrocket.com/understanding-javascript-decorators/</a></li><li><a href="https://docs.nestjs.com/interceptors">https://docs.nestjs.com/interceptors</a></li><li><a href="https://docs.typestack.community/typedi/02-basic-usage-guide">https://docs.typestack.community/typedi/02-basic-usage-guide</a></li><li><a href="https://tsed.io/docs/interceptors.html#interceptor-class">https://tsed.io/docs/interceptors.html#interceptor-class</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;實務上經常會遇到程式流程夾雜許多非核心，但又必須得做的行為，例如 logging, auit, notification 或 cache.&lt;/p&gt;
&lt;p&gt;這篇文章介紹如何使用 babel decorator plugin 實現 Aspect Object Programming。&lt;/p&gt;
&lt;p&gt;將共用的功能抽到 decorator，讓整個流程變的清楚好懂。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://alexliang.me/tags/javascript/"/>
    
      <category term="babel" scheme="https://alexliang.me/tags/babel/"/>
    
      <category term="aop" scheme="https://alexliang.me/tags/aop/"/>
    
  </entry>
  
  <entry>
    <title>[Working with legacy code] 使用 newman 建立整合測試</title>
    <link href="https://alexliang.me/Working-with-legacy-code-%E4%BD%BF%E7%94%A8-newman-%E5%BB%BA%E7%AB%8B%E6%95%B4%E5%90%88%E6%B8%AC%E8%A9%A6/"/>
    <id>https://alexliang.me/Working-with-legacy-code-使用-newman-建立整合測試/</id>
    <published>2021-09-12T03:05:27.000Z</published>
    <updated>2021-09-12T06:17:46.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>這陣子開始重構公司的 legacy code，應該說是porting到新的repo。但舊專案有個很大的問題: <strong>沒寫測試</strong>。</p><p>這讓重構增加一些不確定性。還好，這些 API 都有經過 QA 測試。</p><p>我們需要寫 API integration test。但在時程壓力下，有沒有方法不需要寫 test code 去檢驗 porting 的 API 呢？</p><span id="more"></span><p>於是就有了這篇文章，說明如何使用 <a href="https://www.getpostman.com/">postman</a> 和 npm package <a href="https://www.npmjs.com/package/newman">newman</a> 完成這個任務。</p><h2 id="作法"><a href="#作法" class="headerlink" title="作法"></a>作法</h2><ol><li>在 postman 建立新的 collection <img src="create-new-collection.png" alt="create new collection"></li><li>建立新的 request，填好 request 所需要的參數。這裡會以公司的dev環境為主 <img src="create-new-request.png" alt="create new request"></li><li><p>send request。得到正確的 response 後，這裡有二種作法:</p><ul><li>使用 <a href="https://autotester.softwareontheroad.com/">https://autotester.softwareontheroad.com/</a>。它會幫你產出 postman 的測項，將它貼在 postman 的 Tests</li><li><p>使用 <a href="https://jsonschema.net/home">https://jsonschema.net/home</a> 。它會產出 schema，在 postman 的 Pre-request Script 貼上 <code>schema = [產出的 schema]</code>，並且在 Tests 加上 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  pm.test(&quot;Validating is API schema correct&quot;, function() &#123;</span><br><span class="line">    var response = pm.response.json();</span><br><span class="line">    console.log(response);</span><br><span class="line">    var result=tv4.validateResult(response, schema)</span><br><span class="line">    pm.expect(result.valid).to.be.true;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>cauiion: 上述二個網站雖然只貼上response，如果有敏感的資料還是要謹慎使用</strong></p></li></ul></li><li>完成後，儲存 request 和 collection 並 export json </li><li>在 nodejs project 安裝 newman <code>npm install -g newman</code> </li><li>新增測試檔案，並且將剛才 export 的 json file移到同一個目錄</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const newman = require(&#x27;newman&#x27;)</span><br><span class="line">newman.run(&#123;</span><br><span class="line">  collection: require(&#x27;./APIContractTest.postman_collection.json&#x27;),</span><br><span class="line">  reporters: &#x27;cli&#x27;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> 到這裡，已經可以針對各 API 做 integration test。不需要寫code，也不用怕改壞 API。</p><p> 如果在本地端準備好測試資料的 seeder，還能進一步結合 CI/CD 讓測試可以自動化。之後工程師也可以安心地重構程式碼。</p><p>references:</p><ul><li><a href="https://softwareontheroad.com/simple-end-to-end-testing-node/">Practical but powerful way to test Node.js APIs without hassle</a></li><li><a href="https://medium.com/@gururajhm/contract-api-testing-with-postman-node-js-express-newman-d91f3cd51fd4">Contract API testing with Postman, Node.js, Express, Newman</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起源&quot;&gt;&lt;a href=&quot;#起源&quot; class=&quot;headerlink&quot; title=&quot;起源&quot;&gt;&lt;/a&gt;起源&lt;/h2&gt;&lt;p&gt;這陣子開始重構公司的 legacy code，應該說是porting到新的repo。但舊專案有個很大的問題: &lt;strong&gt;沒寫測試&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;這讓重構增加一些不確定性。還好，這些 API 都有經過 QA 測試。&lt;/p&gt;
&lt;p&gt;我們需要寫 API integration test。但在時程壓力下，有沒有方法不需要寫 test code 去檢驗 porting 的 API 呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://alexliang.me/tags/Node-js/"/>
    
      <category term="newman" scheme="https://alexliang.me/tags/newman/"/>
    
      <category term="postman" scheme="https://alexliang.me/tags/postman/"/>
    
      <category term="integration test" scheme="https://alexliang.me/tags/integration-test/"/>
    
  </entry>
  
  <entry>
    <title>[Design Pattern] 利用dependency injection降低耦合</title>
    <link href="https://alexliang.me/Design-Pattern-%E5%88%A9%E7%94%A8dependency-injection%E9%99%8D%E4%BD%8E%E8%80%A6%E5%90%88/"/>
    <id>https://alexliang.me/Design-Pattern-利用dependency-injection降低耦合/</id>
    <published>2021-03-14T02:23:38.000Z</published>
    <updated>2021-03-14T12:35:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://alexliang.me/Design-Pattern-工廠方法模式-Factory-介紹與應用/">前一篇文章</a>介紹如何使用工廠方法。本篇介紹另一種技巧能切開商業邏輯和資料存取的程式碼。</p><span id="more"></span><p>以之前電商平台的物流系統為例，假如此專案是外包的需求，A客戶指定用MySQL;而B客戶習慣PostgreSQL。在實作部分一開始為：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const db = require(&#x27;./db&#x27;);</span><br><span class="line"></span><br><span class="line">// 宣告超商取貨</span><br><span class="line">class ConvenienceStoreDelivery : Delivery &#123;</span><br><span class="line">   constructor(shipAddress) &#123;</span><br><span class="line">     // 略</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> get shippingRate() &#123; </span><br><span class="line">return (async() =&gt; </span><br><span class="line">db.query(&#x27;SELECT rate FROM tbl_shipment_info WHERE type = convenience_store&#x27;);  </span><br><span class="line">)(); </span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line">  get freeShipmentThreshold() &#123;</span><br><span class="line">    return (async() =&gt; </span><br><span class="line">    db.query(&#x27;SELECT free_shipment_threshold FROM tbl_shipment_info WHERE type = convenience_store&#x27;);</span><br><span class="line">    )();     </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上例中，我們依賴 db 這個檔案建立連線和設定。而這也帶來缺點: 寫測試時必須依賴實體的 database、不同的實作要使用另一個連線時要給額外的參數。</p><p>此時可以應用 dependency injection。在 Node.js 裡有三種方式可以達成</p><ol><li>constructor</li><li>setter</li><li>bind</li></ol><p>本文使用 constructor 當範例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">class ConvenienceStoreDelivery : Delivery &#123;</span><br><span class="line">   constructor(shipAddress, db) &#123;</span><br><span class="line">     this.db = db;</span><br><span class="line">     this.shipAddress = shipAddress;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> get shippingRate() &#123; </span><br><span class="line">return (async() =&gt; </span><br><span class="line">this.db.query(&#x27;SELECT rate FROM tbl_shipment_info WHERE type = convenience_store&#x27;);  </span><br><span class="line">)(); </span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line">  get freeShipmentThreshold() &#123;</span><br><span class="line">    return (async() =&gt; </span><br><span class="line">    this.db.query(&#x27;SELECT free_shipment_threshold FROM tbl_shipment_info WHERE type = convenience_store&#x27;);</span><br><span class="line">    )();     </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// database.js</span><br><span class="line">class Database &#123;</span><br><span class="line">  constructor(config) &#123;</span><br><span class="line">     this._config = config;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  connect() &#123; // connect db &#125;</span><br><span class="line">  </span><br><span class="line">  query() &#123; // 略 &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// config.js</span><br><span class="line">const config = &#123;</span><br><span class="line">  MYSQL_CONFIG: &#123;</span><br><span class="line">    server: process.env.DB_SERVER,</span><br><span class="line">    database: process.env.DB_NAME,</span><br><span class="line">    user: process.env.DB_USER,</span><br><span class="line">    password: process.env.DB_PW</span><br><span class="line">  &#125;,</span><br><span class="line">  POSTGRES_CONFIG: &#123;</span><br><span class="line">    // 略</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 用戶端</span><br><span class="line">const config = require(&#x27;./config&#x27;);</span><br><span class="line">const Database = require(&#x27;./database&#x27;);</span><br><span class="line"></span><br><span class="line">const db = new Database(config.MYSQL_CONFIG);</span><br><span class="line">db.connect();</span><br><span class="line"></span><br><span class="line">const factory = new ConvenienceStoreDeliveryFactory();</span><br><span class="line">const convenienceStoreDelivery = factory.createDeliveryService(shipAddress, db);</span><br></pre></td></tr></table></figure><p>這樣就能把 database 和實作隔開，如果專案要換其它的 db，只要改設定值 (或用環境變數) 即可。<br>應用此技巧能把二個不必要的耦合分開來，讓之後的修改更有彈性，<a href="https://nestjs.com/">nest.js</a>也採用這種方式設計框架。</p><p>ref: <a href="https://medium.com/@magnusjt/dependency-injection-in-nodejs-9601a19c1f36">Dependency Injection in nodejs</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://alexliang.me/Design-Pattern-工廠方法模式-Factory-介紹與應用/&quot;&gt;前一篇文章&lt;/a&gt;介紹如何使用工廠方法。本篇介紹另一種技巧能切開商業邏輯和資料存取的程式碼。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://alexliang.me/tags/Node-js/"/>
    
      <category term="design pattern" scheme="https://alexliang.me/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>[Design Pattern] 工廠方法模式(Factory)介紹與應用</title>
    <link href="https://alexliang.me/Design-Pattern-%E5%B7%A5%E5%BB%A0%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F-Factory-%E4%BB%8B%E7%B4%B9%E8%88%87%E6%87%89%E7%94%A8/"/>
    <id>https://alexliang.me/Design-Pattern-工廠方法模式-Factory-介紹與應用/</id>
    <published>2021-02-28T01:35:15.000Z</published>
    <updated>2021-03-14T02:42:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://alexliang.me/Design-Pattern-簡單工廠方法模式-Simple-Factory-介紹與應用/">上一篇</a>講到簡單工廠方法，這篇文章介紹它的延申: 工廠方法</p><span id="more"></span><h3 id="適合場景"><a href="#適合場景" class="headerlink" title="適合場景"></a>適合場景</h3><p>有二個以上、功能相近但細節稍有不同的資料結構或實作，且隨著業務增長會不斷增加實作的情況。例如本來只服務台灣的電商平台，需要擴展到海外，其寄送方式和服務商會大幅增加。</p><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>一樣以電商的物流為例，如何使用工廠模式解決不斷增加的寄送方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 宣告基本的物流類別</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Delivery</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="title">constructor</span>(<span class="params">shipAddress</span>)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.shipAddress = shipAddress;</span><br><span class="line">     <span class="built_in">this</span>.shippingRate = <span class="number">0</span>;</span><br><span class="line">     <span class="built_in">this</span>.freeShipmentThreshold = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.traceNumber = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">get</span> <span class="title">shippingRate</span>() &#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.shippingRate; </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title">freeShipmentThreshold</span>() &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">this</span>.freeShipmentThreshold;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">set</span> <span class="title">traceNumber</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">get</span> <span class="title">traceNumber</span>() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.traceNumber;</span><br><span class="line"> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 宣告超商取貨</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ConvenienceStoreDelivery</span> : <span class="title">Delivery</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="title">constructor</span>(<span class="params">shipAddress</span>)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.shipAddress = shipAddress;</span><br><span class="line">       <span class="built_in">this</span>.shippingRate = <span class="number">100</span>;</span><br><span class="line">       <span class="built_in">this</span>.freeShipmentThreshold = <span class="number">2000</span>;</span><br><span class="line">      <span class="built_in">this</span>.traceNumber = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">set</span> <span class="title">traceNumber</span>() &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 宣告郵局寄送</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">PostOfficeDelivery</span> : <span class="title">Delivery</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="title">constructor</span>(<span class="params">shipAddress</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.shipAddress = shipAddress;</span><br><span class="line">        <span class="built_in">this</span>.shippingRate = <span class="number">80</span>;</span><br><span class="line">        <span class="built_in">this</span>.freeShipmentThreshold = <span class="number">1000</span>;</span><br><span class="line">       <span class="built_in">this</span>.traceNumber = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">           </span><br><span class="line">     <span class="keyword">set</span> <span class="title">traceNumber</span>() &#123;&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>宣告各物流服務後，接下來是建立工廠類別介面和實作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 宣告工廠類別介面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IDeliveryFactory</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="title">createDeliveryService</span>(<span class="params">shipAddress</span>)</span> &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Implement me!&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 宣告超商取貨工廠</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ConvenienceStoreDeliveryFactory</span> : <span class="title">IDeliveryFactory</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="title">createDeliveryService</span>(<span class="params">shipAddress</span>)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> ConvenienceStoreDelivery(shipAddress);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 宣告郵局寄送工廠</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">PostOfficeDeliveryFactory</span> : <span class="title">IDeliveryFactory</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="title">createDeliveryService</span>(<span class="params">shipAddress</span>)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> PostOfficeDelivery(shipAddress);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>用戶端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果要換其它物流方式，修改這裡即可</span></span><br><span class="line"><span class="keyword">const</span> factory = <span class="keyword">new</span> ConvenienceStoreDeliveryFactory();</span><br><span class="line"><span class="keyword">const</span> convenienceStoreDelivery = factory.createDeliveryService(shipAddress);</span><br></pre></td></tr></table></figure><p>乍看之下多了不少程式碼，但工廠方法的優點在於新增實作不會違反開放-封閉原則，不用每次都要修改switch case，將判斷拉到用戶端。 </p><h3 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h3><ul><li>不建議一開始就使用工廠方法，也許簡單工廠方法就能應付，等到業務需求大增再改就好</li><li>此方法對用戶端有額外的判斷，若太多用戶端都需要使用會造成負擔，要靠其它方法解決</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://alexliang.me/Design-Pattern-簡單工廠方法模式-Simple-Factory-介紹與應用/&quot;&gt;上一篇&lt;/a&gt;講到簡單工廠方法，這篇文章介紹它的延申: 工廠方法&lt;/p&gt;
    
    </summary>
    
    
      <category term="design pattern" scheme="https://alexliang.me/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>[商業思維學院] Ant-技術人的職涯規劃心得</title>
    <link href="https://alexliang.me/%E5%95%86%E6%A5%AD%E6%80%9D%E7%B6%AD%E5%AD%B8%E9%99%A2-%E6%8A%80%E8%A1%93%E4%BA%BA%E7%9A%84%E8%81%B7%E6%B6%AF%E8%A6%8F%E5%8A%83%E5%BF%83%E5%BE%97/"/>
    <id>https://alexliang.me/商業思維學院-技術人的職涯規劃心得/</id>
    <published>2021-02-07T14:19:19.000Z</published>
    <updated>2021-02-08T14:06:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>週四參加商業思維學院的線上講座，𨘋請到<a href="https://www.facebook.com/yftzeng.tw">Ant 曾義峰</a>分享技術人的職涯規劃。Ant是我有在追蹤的技術人，對於這位橫跨技術、法律、資安和商業的高手只有敬佩。</p><span id="more"></span><p>管理職 vs. 技術職一直是技術人熱衷討論的話題。在台灣，大多數公司給予管理職較高的薪水和權責。但某些技術人對於管理團隊又興趣缺缺，深怕自己的技術力不斷退步而被時代淘汰。</p><p>Ant提出一個概念: <code>升遷體系 不等於 職涯發展</code>。升遷體系隨著外在環境變化；而職涯發展要配適內在自我</p><p>不同於要求技術工作者一路往公司的階梯上爬，這個框架是同時注意外在和內在的發展。在獲得升遷、加薪的同時，也要顧好成就感及發揮最大潛力。對技術人來說，最浪費的莫過於給予高薪但被放在無法發揮實力的地方，這也是Ant要大家關注的點。</p><p>演講中最讓我受到啟發的是Ant把技術職和管理職視為二個互為關聯的階梯。你不必一直在單一軌道往上爬，而是能夠在二者之間轉換。對於職涯規劃來說是更靈活的手段和方法。</p><p>接下來Ant說明如何避免技術人最害怕的事: <code>跟不上新技術、手中的工具已經落伍了。</code></p><p>這裡的心法我覺得和Amazon的Jeff Bazos在2012年re.invent大會所講的話類似:</p><blockquote><p>我常被問一個問題：「在接下來的10年裡，會有什麼樣的變化？」……但我很少被問到「在接下來的10年裡，什麼是不變的？」我認為第二個問題比第一個問題更加重要，因為你需要將你的戰略建立在不變的事物上。</p></blockquote><p>在軟體開發來說，不變的事物便是design pattern, refactor和其它各種新技術底層的理論。像最近幾年引領AI的深度學習，其底層是1980年代就出現的類神經網路，只不過當時的環境和技術沒辦法有突破性的應用。</p><p>這幾年下來有一個體會，當程式語言或碰過的技術到一定的程度時，你能辨識出它設計的哲學及適合的場景。將來用到類似的新工具時，能很快上手並且知道它的限制。</p><p>從OOP的角度來看，我們關注的是全局及結構；而不是細節。對於新技術/工具，能儘快掌握特性和應用場景才是技術人生存之道。</p><p>Ant也分享幾個面試可以請教對方的問題，例如:</p><ul><li>最近離職者離開的原因？開除員工的原因？</li><li>最近的升遷/加薪情況，週期/幅度</li><li>測試覆蓋率、流程自動化和指導文化</li></ul><p>還有一個take away question: </p><blockquote><p>如果有人拿一百萬鎂請你組一個團隊，在一年內推出產品，你有這個能力嗎？ 或是說你該如何做到？ </p></blockquote><p>這是一個很棒的練習，讓我們思考自己在業界的高度和人脈是否達到一個水準。</p><p>最後，我在QA時問了一題： 如果嚮往的工作有某項條件/經驗(例如碰過 DAU &gt; 100K的系統)，面試時該怎麼回答？ 老師給的答案是: 可以先問做過的人，並且在面試時誠實說出，重點是讓對方感受到自己是能解決問題的人。</p><p>期許自己也能成為厲害的技術人</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;週四參加商業思維學院的線上講座，𨘋請到&lt;a href=&quot;https://www.facebook.com/yftzeng.tw&quot;&gt;Ant 曾義峰&lt;/a&gt;分享技術人的職涯規劃。Ant是我有在追蹤的技術人，對於這位橫跨技術、法律、資安和商業的高手只有敬佩。&lt;/p&gt;
    
    </summary>
    
    
      <category term="演講筆記" scheme="https://alexliang.me/tags/%E6%BC%94%E8%AC%9B%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[Design Pattern] 簡單工廠方法模式(Simple Factory)介紹與應用 </title>
    <link href="https://alexliang.me/Design-Pattern-%E7%B0%A1%E5%96%AE%E5%B7%A5%E5%BB%A0%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F-Simple-Factory-%E4%BB%8B%E7%B4%B9%E8%88%87%E6%87%89%E7%94%A8/"/>
    <id>https://alexliang.me/Design-Pattern-簡單工廠方法模式-Simple-Factory-介紹與應用/</id>
    <published>2020-10-26T13:38:16.000Z</published>
    <updated>2021-02-28T01:47:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近重溫<a href="https://www.tenlong.com.tw/products/9789866761799">大話設計模式</a>，對各個design pattern有更深的了解，試著介紹常用的幾種模式並說明適合的場景。</p><p>第一篇要介紹的是簡單工廠方法模式。</p><span id="more"></span><h3 id="適合場景"><a href="#適合場景" class="headerlink" title="適合場景"></a>適合場景</h3><p>有二個以上、功能相近但細節稍有不同的資料結構或實作，適合用簡單工廠方法模式。如薪資計算(正職、工讀生)、電商平台的寄件方式(宅急便、超商或郵局)。</p><p>以電商平台的寄件舉例，其共通的屬性有: </p><ol><li>收件地址 (一般地址/超商門市)</li><li>運費</li><li>免運門檻</li><li>物流追蹤碼</li></ol><p>若平台增加新的寄件方式，專案中有關寄件的程式碼都要新增條件才能避免錯誤。</p><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ConvenienceStoreDelivery</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">shipAddress</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.shipAddress = shipAddress;</span><br><span class="line">      <span class="built_in">this</span>.shippingRate = <span class="number">100</span>;</span><br><span class="line">      <span class="built_in">this</span>.freeShipmentThreshold = <span class="number">2000</span>;</span><br><span class="line">    <span class="built_in">this</span>.traceNumber = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">get</span> <span class="title">shippingRate</span>() &#123; </span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">this</span>.shippingRate; </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">get</span> <span class="title">freeShipmentThreshold</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.freeShipmentThreshold;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">set</span> <span class="title">traceNumber</span>() &#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">get</span> <span class="title">traceNumber</span>() &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">this</span>.traceNumber;</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">DeliveryFactory</span>(<span class="params">provider, address</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> deliveryProvider = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">switch</span> (provider) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;convenience store&#x27;</span>:</span><br><span class="line">        deliveryProvider = <span class="keyword">new</span> ConvenienceStoreDelivery(address);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;post office&#x27;</span></span><br><span class="line">        deliveryProvider = <span class="keyword">new</span> PostOfficeDelivery(address);  </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Cannot recongize delivery provider <span class="subst">$&#123;provider&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> deliveryProvider</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用戶端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deliveryProvider = DeliveryFactory(provider, address);</span><br><span class="line"><span class="comment">// 其餘操作</span></span><br></pre></td></tr></table></figure><h3 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h3><ul><li>假如實作端會隨著業務、流程不斷增加數量，則此方法每新增實作類別就必須增加case的分支。這會破壞開放-封閉原則。此時可考慮改用工廠方法 </li><li>此方法只針對物件建立問題，若實作類別的函式經常更動(如免運、折價)，可考慮使用策略模式封裝實作。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近重溫&lt;a href=&quot;https://www.tenlong.com.tw/products/9789866761799&quot;&gt;大話設計模式&lt;/a&gt;，對各個design pattern有更深的了解，試著介紹常用的幾種模式並說明適合的場景。&lt;/p&gt;
&lt;p&gt;第一篇要介紹的是簡單工廠方法模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="design pattern" scheme="https://alexliang.me/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS使用ESM Import載入模組</title>
    <link href="https://alexliang.me/NodeJS%E4%BD%BF%E7%94%A8ESM-Import%E8%BC%89%E5%85%A5%E6%A8%A1%E7%B5%84/"/>
    <id>https://alexliang.me/NodeJS使用ESM-Import載入模組/</id>
    <published>2020-07-05T13:26:48.000Z</published>
    <updated>2020-09-21T13:11:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://alexliang.me/NodeJS-%E8%A7%A3%E6%B1%BArequire%E7%9B%B8%E5%B0%8D%E8%B7%AF%E5%BE%91%E5%95%8F%E9%A1%8C/">上一篇</a>介紹如何解決CommonJS相對路徑問題。假如你偏好ES6的export/import，從NodeJS 12開始支援實驗性質的解決方法。</p><!-- more  --><p>二個地方需要修改:</p><ol><li>package.json 加入 <code>&quot;type&quot;: &quot;module&quot;</code></li><li>執行程式時加入 <code>--experimental-modules</code> 或修改package.json的start script</li></ol><p>以上是不用修改副檔名的方式，否則NodeJS預設只認<code>.mjs</code>的檔案能使用export/import</p><p>接下來介紹 export/import 的基本語法</p><p>有二種 export 方式: <strong>named</strong> 和 <strong>default</strong>, 一個檔案可以有許多 named export, 但只能有一個 default export</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下是 named export</span></span><br><span class="line"><span class="keyword">export</span> funcA = <span class="function"><span class="params">val</span> =&gt;</span> <span class="built_in">Math</span>.sqrt(val);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> seed = <span class="built_in">Math</span>.random();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下是 default export, 注意結尾不加分號</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>named export 會強制使用同樣的名稱 import, 而 default export 可用任意名稱輸入, 例如:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> str = <span class="string">&#x27;default&#x27;</span>; <span class="comment">// module1.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">&#x27;./module1&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.info(a); <span class="comment">// &#x27;default&#x27;</span></span><br></pre></td></tr></table></figure></p><p>如果一個檔案有許多 named export, 如果要選擇部分物件, 則:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// constant.js</span></span><br><span class="line"><span class="keyword">export</span> VALID_TYPES = [...];</span><br><span class="line"><span class="keyword">export</span> VALID_STATUS = [...];</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js, 只輸入 VALID_TYPES</span></span><br><span class="line"><span class="keyword">import</span> &#123; VALID_TYPES &#125; <span class="keyword">from</span> <span class="string">&#x27;./constant&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app2.js, 將 VALID_STATUS 改名</span></span><br><span class="line"><span class="keyword">import</span> &#123; VALID_STATUS <span class="keyword">as</span> ALERT_STATUS &#125; <span class="keyword">from</span> <span class="string">&#x27;./constant&#x27;</span></span><br></pre></td></tr></table></figure><p>reference:</p><ol><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/import">import document</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/export">export document</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://alexliang.me/NodeJS-%E8%A7%A3%E6%B1%BArequire%E7%9B%B8%E5%B0%8D%E8%B7%AF%E5%BE%91%E5%95%8F%E9%A1%8C/&quot;&gt;上一篇&lt;/a&gt;介紹如何解決Commo
      
    
    </summary>
    
    
      <category term="Node.js" scheme="https://alexliang.me/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS 解決require相對路徑問題</title>
    <link href="https://alexliang.me/NodeJS-%E8%A7%A3%E6%B1%BArequire%E7%9B%B8%E5%B0%8D%E8%B7%AF%E5%BE%91%E5%95%8F%E9%A1%8C/"/>
    <id>https://alexliang.me/NodeJS-解決require相對路徑問題/</id>
    <published>2020-06-14T11:35:02.000Z</published>
    <updated>2020-06-14T12:57:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Node.JS目前有二種方式載入module: CommonJS(也就是本文會介紹的方式)及<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/import">ES6的import/export</a>。</p><p>CommonJS是預設的module載入方式，其使用方式為 require &amp; module.exports</p><figure class="highlight javascript"><figcaption><span>funcA.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = funcA;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> funcA = <span class="built_in">require</span>(<span class="string">&#x27;funcA&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  funcA();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相信大家對此都不陌生，然而此方法最大的問題是module如果是專案的source file，其require的路徑為相對路徑。假如專案結構有許多階層，在使用上會相當不便</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|- src</span><br><span class="line">|--utils</span><br><span class="line">|---moduleA.js</span><br><span class="line">|--routes</span><br><span class="line">|---v1</span><br><span class="line">|----admin</span><br><span class="line">|-----singIn.js</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// singIn.js</span></span><br><span class="line"><span class="keyword">const</span> moduleA = <span class="built_in">require</span>(<span class="string">&#x27;../../../utils/moduleA&#x27;</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>今天介紹在npm script使用symlink解決此問題</p><p>在package.json 加入 <code>&quot;postinstall&quot; : &quot;node -e \&quot;var s=&#39;../src&#39;,d=&#39;node_modules/src&#39;,fs=require(&#39;fs&#39;);fs.exists(d,function(e)&#123;e||fs.symlinkSync(s,d,&#39;dir&#39;)&#125;);\&quot;&quot;</code>並且 npm install</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// singIn.js</span></span><br><span class="line"><span class="keyword">const</span> moduleA = <span class="built_in">require</span>(<span class="string">&#x27;src/utils/moduleA&#x27;</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>是不是好看很多？</p><p>此方法建立一個symlink連結到專案的source folder，讓CommonJS在node_module下找到要載入的module</p><p>但是這樣設定有另一個副作用，如果專案有裝eslint的話，它會跳出<a href="https://github.com/benmosher/eslint-plugin-import/blob/v2.21.2/docs/rules/no-extraneous-dependencies.md">import/no-extraneous-dependencies</a>的錯誤。eslint預設禁止載入不在package.json的dependencies, devDependencies,  optionalDependencies, peerDependencies或bundledDependencies的模組</p><p>如果想忽略此警告，在.eslintrc加上 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;rules&quot;: &#123;</span><br><span class="line">    &quot;import/no-extraneous-dependencies&quot;: [0]</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>以上是修正require不能使用絕對路徑的問題，如果覺得此方式太hack，下一篇介紹import/export來載入module</p><p>參考資料: <a href="https://gist.github.com/branneman/8048520#3-the-module">Better local require() paths for Node.js</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node.JS目前有二種方式載入module: CommonJS(也就是本文會介紹的方式)及&lt;a href=&quot;https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;ES6的import/export&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;CommonJS是預設的module載入方式，其使用方式為 require &amp;amp; module.exports&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;funcA.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;funcA&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = funcA;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;index.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; funcA = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;funcA&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  funcA();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;相信大家對此都不陌生，然而此方法最大的問題是module如果是專案的source file，其require的路徑為相對路徑。假如專案結構有許多階層，在使用上會相當不便&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://alexliang.me/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>使用ELK監控MongoDB service</title>
    <link href="https://alexliang.me/%E4%BD%BF%E7%94%A8ELK%E7%9B%A3%E6%8E%A7MongoDB-service/"/>
    <id>https://alexliang.me/使用ELK監控MongoDB-service/</id>
    <published>2019-01-31T03:26:14.000Z</published>
    <updated>2019-02-16T09:48:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://alexliang.me/使用ELK-Metricbeat收集MongoDB-Log">上一篇</a>提到如何安裝ELK和Metricbeat收集DB的log，接下來介紹如何在Kibana設定watcher讓系統有問題時自動通知管理者。</p><span id="more"></span><h2 id="設定Watcher"><a href="#設定Watcher" class="headerlink" title="設定Watcher"></a>設定Watcher</h2><p>進入SENTINL的頁面，在右上角點選<code>New</code>新增watcher</p><p><img src="sentinl_setting.png" alt="sentinl_setting"></p><p>使用watcher wizard設定watcher的名稱和使用的index</p><p><img src="watcher_wizard.png" alt="watcher_wizard"></p><p>設定完可以看到下方出現折線圖</p><p><img src="chart.png" alt="chart"></p><p>可以針對內建指標做監控並設定觸發條件。</p><p>接下來是設定通知的動作，這裡以email為例，可設定寄件人(也就是在<code>kibana.yml</code>設定的user email)和收件人及訊息內容</p><p><img src="action.png" alt="action"></p><h2 id="設定特殊條件的Watcher"><a href="#設定特殊條件的Watcher" class="headerlink" title="設定特殊條件的Watcher"></a>設定特殊條件的Watcher</h2><p>當你要監控的指標需要自行計算時(如磯碟己用空間的百分比，該數值在dashboard是由磁碟空間和己用空間計算出來)便需要自行修改query語法</p><p>我們使用wizard新增watcher，<strong>WHEN</strong>選擇max，此時可看到<strong>AGG</strong>多了一個field，選擇<code>system.ffstat.total_size.total</code></p><p><img src="system_total.png" alt="system_total"></p><p>點選<strong>Watcher Query</strong>，然後conver to advanced，開始修改query條件。此時畫面會回到watcher清單，再點選剛才建立的watcher，會發現看到類似DSL語法的畫面</p><p>在<code>metricAgg</code>下可看到剛才設定的<code>system.ffstat.total_size.total</code>。我們新增一項指標並修改<code>condition</code>的script在磁碟空間己用80%時發通知</p><p><img src="advanced_watcher.png" alt="advanced_watcher"></p><p>修改後別忘了儲存，可以回到watcher清單列表，在<strong>Alarms</strong>可以看到通知有無正確的發出。</p><p>這個機制可用在其它後端服務上，對於管理機器是個方便的工具。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://alexliang.me/使用ELK-Metricbeat收集MongoDB-Log&quot;&gt;上一篇&lt;/a&gt;提到如何安裝ELK和Metricbeat收集DB的log，接下來介紹如何在Kibana設定watcher讓系統有問題時自動通知管理者。&lt;/p&gt;
    
    </summary>
    
    
      <category term="devops" scheme="https://alexliang.me/tags/devops/"/>
    
      <category term="mongodb" scheme="https://alexliang.me/tags/mongodb/"/>
    
      <category term="ELK" scheme="https://alexliang.me/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>使用ELK + Metricbeat收集MongoDB Log</title>
    <link href="https://alexliang.me/%E4%BD%BF%E7%94%A8ELK%20+%20Metricbeat%E6%94%B6%E9%9B%86MongoDB%20Log/"/>
    <id>https://alexliang.me/使用ELK + Metricbeat收集MongoDB Log/</id>
    <published>2019-01-26T08:14:12.000Z</published>
    <updated>2019-02-16T09:52:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近研究如何使用ELK(Elasticsearch, Logstash和Kibana)監控MongoDB的效能，之前公司己經使用ELK監控爬蟲，這次試著擴大範圍並加入告警的通知。<br><span id="more"></span></p><h2 id="安裝ELK"><a href="#安裝ELK" class="headerlink" title="安裝ELK"></a>安裝ELK</h2><p>我們使用<a href="https://github.com/deviantony/docker-elk">docker-elk</a>安裝ELK stack</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:deviantony/docker-elk.git</span><br></pre></td></tr></table></figure><h2 id="安裝SENTINL-Plugin"><a href="#安裝SENTINL-Plugin" class="headerlink" title="安裝SENTINL Plugin"></a>安裝SENTINL Plugin</h2><p>Kibana需要安裝<a href="https://sentinl.readthedocs.io/en/latest/">SENTINL</a>這套plugin才能加上watcher的功能</p><p>修改kibana資料夾的Dockerfile，讓docker-compose在build的時候能安裝plugin</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> ELK_VERSION</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://github.com/elastic/kibana-docker</span></span><br><span class="line"><span class="keyword">FROM</span> docker.elastic.co/kibana/kibana-oss:$&#123;ELK_VERSION&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add your kibana plugins setup here</span></span><br><span class="line"><span class="comment"># Example: RUN kibana-plugin install &lt;name|url&gt;</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> kibana-plugin install https://github.com/sirensolutions/sentinl/releases/download/tag-6.5.0-0/sentinl-v6.5.4.zip</span></span><br></pre></td></tr></table></figure><p>SENTINL的版本建議和ELK一致，<a href="https://github.com/sirensolutions/sentinl/releases">這裡</a>可以找到所有版本的release</p><h2 id="設定SENTINL"><a href="#設定SENTINL" class="headerlink" title="設定SENTINL"></a>設定SENTINL</h2><p>為了讓事件發生時能發出通知，需要設定如email、slack等平台的存取權限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">## Default Kibana configuration from kibana-docker.</span><br><span class="line">## from https://github.com/elastic/kibana-docker/blob/master/build/kibana/config/kibana.yml</span><br><span class="line">#</span><br><span class="line">server.name: kibana</span><br><span class="line">server.host: &quot;0&quot;</span><br><span class="line">elasticsearch.url: elasticsearch:9200</span><br><span class="line">sentinl:</span><br><span class="line">  settings:</span><br><span class="line">    email:</span><br><span class="line">      active: true</span><br><span class="line">      host: &quot;smtp.gmail.com&quot;</span><br><span class="line">      user: &quot;user@gmail.com&quot;</span><br><span class="line">      port: 587</span><br><span class="line">      password: password</span><br><span class="line">      tls: true</span><br><span class="line">      timeout: 20000  # mail server connection timeout</span><br><span class="line">    slack:</span><br><span class="line">      active: true</span><br><span class="line">      token: [your token]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p>這裡以GMAIL和slack做為通知平台，<a href="https://sentinl.readthedocs.io/en/latest/Config-Example/#kibana-config-for-sentinl-v6">官網</a>有其它範例。</p><p>連上管理介面應該能看到左側多了SENTINL的欄位如下:</p><p><img src="sentinl.png" alt="sentinl"></p><h2 id="使用Metricbeat收集log"><a href="#使用Metricbeat收集log" class="headerlink" title="使用Metricbeat收集log"></a>使用Metricbeat收集log</h2><p><a href="https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-modules.html">Metricbeat</a>用來收集後端服務的log，舉凡MongoDB, Apache, Docker和Kubernetes都有相關的模組可以使用</p><ul><li>安裝Metricbeat，一樣使用docker image</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">docker stop metricbeat</span><br><span class="line">docker rm -v metricbeat</span><br><span class="line">docker run -d \</span><br><span class="line">  --name=metricbeat \</span><br><span class="line">  --hostname=</span><br><span class="line">  --volume=&quot;$(pwd)/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro&quot; \</span><br><span class="line">  --volume=&quot;/var/run/docker.sock:/var/run/docker.sock:ro&quot; \</span><br><span class="line">  --volume=&quot;/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro&quot; \</span><br><span class="line">  --volume=&quot;/proc:/hostfs/proc:ro&quot; \</span><br><span class="line">  --volume=&quot;/:/hostfs:ro&quot; \</span><br><span class="line">  docker.elastic.co/beats/metricbeat:6.5.4 metricbeat -e -c metricbeat.yml</span><br><span class="line">docker exec -d metricbeat metricbeat setup</span><br></pre></td></tr></table></figure><ul><li>修改metricbeat config<br>進入docker image環境，根目錄有<code>metricbeat.reference.yml</code>和<code>metricbeat.yml</code>二個檔案，前者為各種服務的設定參考；後者為乾淨的設定檔。我們在<code>metricbeat.yml</code>加入mongodb和system的設定(你也可以自訂檔名)</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">metricbeat.modules:</span></span><br><span class="line">  <span class="comment">#------------ MongoDB Module ------------------------</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">module:</span> <span class="string">mongodb</span></span><br><span class="line">    <span class="attr">metricsets:</span> [<span class="string">&quot;dbstats&quot;</span>, <span class="string">&quot;status&quot;</span>, <span class="string">&quot;collstats&quot;</span>, <span class="string">&quot;metrics&quot;</span>, <span class="string">&quot;replstatus&quot;</span>]</span><br><span class="line">    <span class="attr">period:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The hosts must be passed as MongoDB URLs in the format:</span></span><br><span class="line">    <span class="comment"># [mongodb://][user:pass@]host[:port].</span></span><br><span class="line">    <span class="comment"># The username and password can also be set using the respective configuration</span></span><br><span class="line">    <span class="comment"># options. The credentials in the URL take precedence over the username and</span></span><br><span class="line">    <span class="comment"># password configuration options.</span></span><br><span class="line">    <span class="attr">hosts:</span> [<span class="string">&quot;localhost:27017&quot;</span>]</span><br><span class="line">    </span><br><span class="line">  <span class="comment">#============ System ===============================</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">module:</span> <span class="string">system</span></span><br><span class="line">    <span class="attr">metricsets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cpu</span> <span class="comment"># CPU usage</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">load</span> <span class="comment"># CPU load averages</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">memory</span> <span class="comment"># Memory usage</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">network</span> <span class="comment"># Network IO</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">process</span> <span class="comment"># Per process metrics</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">process_summary</span> <span class="comment"># Process summary</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">uptime</span> <span class="comment"># System Uptime</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">core</span> <span class="comment"># Per CPU core usage</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">diskio</span> <span class="comment"># Disk IO</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">filesystem</span> <span class="comment"># File system usage for each mountpoint</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">fsstat</span> <span class="comment"># File system summary metrics</span></span><br><span class="line">      <span class="comment">#- raid           # Raid</span></span><br><span class="line">      <span class="comment">#- socket         # Sockets and connection info (linux only)</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">period:</span> <span class="string">1m</span></span><br><span class="line">    <span class="attr">processes:</span> [<span class="string">&quot;.*&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Configure the metric types that are included by these metricsets.</span></span><br><span class="line">    <span class="attr">cpu.metrics:</span> [<span class="string">&quot;percentages&quot;</span>] <span class="comment"># The other available options are normalized_percentages and ticks.</span></span><br><span class="line">    <span class="attr">core.metrics:</span> [<span class="string">&quot;percentages&quot;</span>] <span class="comment"># The other available option is ticks</span></span><br></pre></td></tr></table></figure><p>這裡節錄module的部分，Kibana和Elasticsearch的host需要根據環境修改</p><ul><li>啓動 Metricbeat</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh docker_metricbeat.sh</span><br></pre></td></tr></table></figure><h2 id="Kibana-dashboard"><a href="#Kibana-dashboard" class="headerlink" title="Kibana dashboard"></a>Kibana dashboard</h2><p>在瀏覽器進入kibana的介面，在<strong>Management</strong>/<strong>Index Patterns</strong>確認有<code>metricbeat-*</code>的index，將它設為default index。</p><p>在<strong>Dashboard</strong>裡可以找到<code>[Metricbeat System] Overview</code>與<code>[Metricbeat MongoDB] Overview</code>這二個dashboard，點進去應該能看到以下的畫面</p><p><img src="mongodb.png" alt="mongodb"></p><p><img src="system.png" alt="system"></p><p>到這裡己經能看到系統的狀態，接下來要設定watcher讓狀況發生時能通知管理者。</p><p>參考:</p><p><a href="https://dzone.com/articles/watchingalerting-on-real-time-data-in-elasticsearc">Watching/Alerting on Real-Time Data in Elasticsearch Using Kibana and SentiNL</a></p><p><a href="https://blog.yowko.com/elk-mongodb-monitor/">使用Elastic Stack(ELK)來監控MongoDB</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近研究如何使用ELK(Elasticsearch, Logstash和Kibana)監控MongoDB的效能，之前公司己經使用ELK監控爬蟲，這次試著擴大範圍並加入告警的通知。&lt;br&gt;
    
    </summary>
    
    
      <category term="mongodb" scheme="https://alexliang.me/tags/mongodb/"/>
    
      <category term="elk" scheme="https://alexliang.me/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>Mocha跑測試時hang住的偵錯方法</title>
    <link href="https://alexliang.me/Mocha%E8%B7%91%E6%B8%AC%E8%A9%A6%E6%99%82hang%E4%BD%8F%E7%9A%84%E5%81%B5%E9%8C%AF%E6%96%B9%E6%B3%95/"/>
    <id>https://alexliang.me/Mocha跑測試時hang住的偵錯方法/</id>
    <published>2019-01-16T00:29:16.000Z</published>
    <updated>2019-01-19T03:15:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>前陣子同事改完API server，local跑完測試沒問題後便推上CI/CD，沒想到mocha跑完測項卻沒正常結束而hang住。</p><p>檢查了環境(node版本,package)都沒差異後，另一位同事找到<a href="https://gist.github.com/boneskull/7fe75b63d613fa940db7ec990a5f5843">async hooks</a>來偵錯</p><span id="more"></span><p>此手法利用<code>async_hooks</code>建立hook監聽非同步事件的生命週期</p><p>在範例中，將async hook抓到的error log放在mocha的<code>after</code> block印出來。可以發現是該程式碼連上server server開始監聽某個port之後卻沒結束連線，造成測試過了卻停住。</p><p>同事遇到的情況也是如此，API service的測試因某些原因造成Kibana的連線沒有結束，導致測試停住。</p><p><code>async_hooks</code>在node 8以後才支援，如果要監聽非同步事件可以參考。</p><p>參考資料: <a href="https://nodejs.org/api/async_hooks.html">NodeJS Async Hooks官方文件</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前陣子同事改完API server，local跑完測試沒問題後便推上CI/CD，沒想到mocha跑完測項卻沒正常結束而hang住。&lt;/p&gt;
&lt;p&gt;檢查了環境(node版本,package)都沒差異後，另一位同事找到&lt;a href=&quot;https://gist.github.com/boneskull/7fe75b63d613fa940db7ec990a5f5843&quot;&gt;async hooks&lt;/a&gt;來偵錯&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://alexliang.me/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript: Understaning the Weird Parts上課筆記</title>
    <link href="https://alexliang.me/JavaScript-Understaning-the-Weird-Parts%E4%B8%8A%E8%AA%B2%E7%AD%86%E8%A8%98/"/>
    <id>https://alexliang.me/JavaScript-Understaning-the-Weird-Parts上課筆記/</id>
    <published>2018-10-28T23:49:03.000Z</published>
    <updated>2018-11-24T09:52:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>這篇記錄我在<a href="https://www.udemy.com/understand-javascript/">Udemy的JS課程</a>上課筆記 (不斷更新)</p><span id="more"></span><h3 id="call-by-value-amp-call-by-reference"><a href="#call-by-value-amp-call-by-reference" class="headerlink" title="call by value &amp; call by reference"></a>call by value &amp; call by reference</h3><p>在js中，任何基本型別的變數皆為call by value，而object或是函式的參數則是call by reference</p><p>call by value: 當一個變數使用 = 指向另一個變數時，二者在記憶體存放的位址是分開的，也就是說變數b改變了並不會影響變數a</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>call by reference: 二個物件皆放在同一個記憶體位址，當一個物件改變也會影響到另一個物件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123; <span class="attr">greeting</span>: <span class="string">&#x27;Hi&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> b = a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// &#123; greeting: &#x27;Hi&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">// &#123; greeting: &#x27;Hi&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line">b.greeting = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// &#123; greeting: &#x27;Hello&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">// &#123; greeting: &#x27;Hello&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>有了這個觀念之後，之後操作物件或傳參數至function時就要注意會不會動到原來的值。</p><h3 id="object-function-and-this"><a href="#object-function-and-this" class="headerlink" title="object, function and this"></a>object, function and this</h3><p>javascript的this常讓人感到困惑，先看個例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a();  </span><br></pre></td></tr></table></figure><p>當呼叫a時會印出window object</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Object&#x27;</span>,</span><br><span class="line">  <span class="attr">log</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b.log();</span><br></pre></td></tr></table></figure><p>上面這個例子，this印出來會是b object的內容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Object&#x27;</span>,</span><br><span class="line">  <span class="attr">log</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> setName = <span class="function"><span class="params">newName</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = newName;</span><br><span class="line">    &#125;</span><br><span class="line">    setName(<span class="string">&#x27;Updated object&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b.log();</span><br></pre></td></tr></table></figure><p>這次加入setName函式至log method中，並且該函式會改變this.name，此時結果會如何呢？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object &#123; name: &#x27;Object&#x27;, log: function &#125;</span><br><span class="line">Object &#123; name: &#x27;Object&#x27;, log: function &#125;</span><br></pre></td></tr></table></figure><p>setName並沒有改變b object，而是改到window object</p><p>這也是js原始設計的小缺點，如果我們要讓setName改變b object，則需要加個變數:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Object&#x27;</span>,</span><br><span class="line">  <span class="attr">log</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> self = <span class="built_in">this</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(self);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> setName = <span class="function"><span class="params">newName</span> =&gt;</span> &#123;</span><br><span class="line">      self.name = newName;</span><br><span class="line">    &#125;</span><br><span class="line">    setName(<span class="string">&#x27;Updated object&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(self);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過self指向b的記憶體位址，在setName函式裡即可正確的更動name。</p><h3 id="call-apply-and-bind"><a href="#call-apply-and-bind" class="headerlink" title="call(), apply() and bind()"></a>call(), apply() and bind()</h3><p>11/24更新<br>在Javascript裡Function是一種特殊的object，它有可執行的程式碼(CODE property),NAME(可為空，即是匿名著函式)以及這裡要介紹的call, apply和bind</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;Alex&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;Liang&#x27;</span>,</span><br><span class="line">  <span class="attr">getFullName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="built_in">this</span>.lastName&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接呼叫此函式,this會是undefined</span></span><br><span class="line"><span class="keyword">const</span> logName = <span class="function">(<span class="params">lang1, lang2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`Logged: <span class="subst">$&#123;<span class="built_in">this</span>.getFullName()&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logPersonName = logName.bind(person);</span><br><span class="line"></span><br><span class="line">logPersonName(); <span class="comment">// Logged: Alex Liang</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用call達成一樣的效果</span></span><br><span class="line">logName.call(person, <span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;cht&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// apply則是將參數放在array裡</span></span><br><span class="line">logName.apply(person, [<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;cht&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>此段程式碼使用bind將logName函式和person物件結合並產生新的函式logPersonName<br>這也表示透過bind能改變函式內this的對象</p><p>而call不需要做出一個新的函式，直接將person傳入也能達成一樣的效果；apply和call不同之處在於傳入的參數放在array裡，其效果也是一樣。</p><p>這三個函式的應用可以參考下列程式碼</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接續上一段</span></span><br><span class="line"><span class="comment">// function borrowing</span></span><br><span class="line"><span class="keyword">const</span> person2 = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;Ben&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;Simmons&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.getFullName.apply(person2); <span class="comment">// Logged: Ben Simmons</span></span><br></pre></td></tr></table></figure><p>透過apply，我們讓person2使用getFullName </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function currying</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a*b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> multipleByTwo = multiply.bind(<span class="built_in">this</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.info(multipleByTwo(<span class="number">4</span>)); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p>透過事先設定的參數，我們可以建立許多函式做組合，這也是functional programming的基礎。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這篇記錄我在&lt;a href=&quot;https://www.udemy.com/understand-javascript/&quot;&gt;Udemy的JS課程&lt;/a&gt;上課筆記 (不斷更新)&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://alexliang.me/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>使用shouldComponentUpdate提高React效能</title>
    <link href="https://alexliang.me/%E4%BD%BF%E7%94%A8shouldComponent%E6%8F%90%E9%AB%98React%E6%95%88%E8%83%BD/"/>
    <id>https://alexliang.me/使用shouldComponent提高React效能/</id>
    <published>2018-06-25T23:27:10.000Z</published>
    <updated>2018-06-25T23:45:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>前陣子遇到一個React效能調教問題，一個後端API花不到一秒完成request，但整個畫面要5秒左右才會render完成。<br>後來發現每次只有一個項目需要更新，而全部重render的結果就是卡在browser，我們改用shouldComponentUpdate來改善此問題。</p><span id="more"></span><p>// 簡短介紹 react life cycle<br>在React life cycle中，</p><p>// 如何使用shouldComponentUpdate及注意事項</p><p>// etc</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前陣子遇到一個React效能調教問題，一個後端API花不到一秒完成request，但整個畫面要5秒左右才會render完成。&lt;br&gt;後來發現每次只有一個項目需要更新，而全部重render的結果就是卡在browser，我們改用shouldComponentUpdate來改善此問題。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://alexliang.me/tags/javascript/"/>
    
      <category term="front-end" scheme="https://alexliang.me/tags/front-end/"/>
    
      <category term="React" scheme="https://alexliang.me/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React Context API 介紹</title>
    <link href="https://alexliang.me/React-Context-API-%E4%BB%8B%E7%B4%B9/"/>
    <id>https://alexliang.me/React-Context-API-介紹/</id>
    <published>2018-06-13T14:06:02.000Z</published>
    <updated>2018-06-24T09:16:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>在React裡，如果Parent和Child Component之間需要傳data，最直覺的方式是透過props傳進去，然而在結構複雜的頁面中，如果得一層一層傳下去，對於之後的維謢相當的麻煩。<br>而Context API便是用來解決資料傳遞的問題。</p><span id="more"></span><p>在React 16.3之前，context API的使用較為不便，得在parent component class定義若干函式，</p><p>而新的context API只要定義: </p><ol><li>context provider，提供要傳遞的data</li><li>context consumer，接收data</li></ol><p>下面是一個簡單的範例，假如頁面上有三個component，分別為書藉清單、書的簡介和內容試閱，它們為階層式架構，最底層的試閱得拿到書名。</p><p>在使用context前，必須先建立實體，createContext可傳入data的預設值。接著引入context至component</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BookContext = React.createContext();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookList</span> <span class="keyword">extends</span> <span class="title">Componet</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">     <span class="attr">bookName</span>: <span class="string">&#x27;Javascript the good part&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 傳遞資料的Component使用Provider</span></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">BookContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;this.state&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">BookBrief</span> /&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">BookContext.Provider</span>&gt;</span></span>    </span><br><span class="line">  );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中間這一層不需要傳context下去</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BookBrief</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ContentFragment</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"> );  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要用到context這層使用Consumer接收資料</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ContentFragment</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> (</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">BookContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;context =&gt; context.bookName&#125;</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">BookContext.Consumer</span>&gt;</span></span></span><br><span class="line"> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一來即可從BookList直接傳遞資料至底層的ContentFragment<br>不只是資料，我們也能傳函式下去，可以更方便的由Child Component呼叫Parent的函式。</p><p>參考資料: </p><ol><li><a href="https://reactjs.org/docs/context.html">官方文件</a></li><li><a href="https://hackernoon.com/how-to-use-the-new-react-context-api-fce011e7d87">How to use the new react contenxt API</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在React裡，如果Parent和Child Component之間需要傳data，最直覺的方式是透過props傳進去，然而在結構複雜的頁面中，如果得一層一層傳下去，對於之後的維謢相當的麻煩。&lt;br&gt;而Context API便是用來解決資料傳遞的問題。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://alexliang.me/tags/javascript/"/>
    
      <category term="front-end" scheme="https://alexliang.me/tags/front-end/"/>
    
      <category term="React" scheme="https://alexliang.me/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Mongoose Schema 設計:如何讓 array 能被移除</title>
    <link href="https://alexliang.me/MongoDB-Schema-%E8%A8%AD%E8%A8%88-%E5%A6%82%E4%BD%95%E8%AE%93-array-%E8%83%BD%E8%A2%AB%E7%A7%BB%E9%99%A4/"/>
    <id>https://alexliang.me/MongoDB-Schema-設計-如何讓-array-能被移除/</id>
    <published>2018-06-07T23:57:19.000Z</published>
    <updated>2018-06-08T00:22:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在MongoDB的操作裡，如果要清除某個欄位，我們可以用 $unset。而日前對著文件裡的 array 做此動作時，array只被清空但還是留下該欄位。</p><p>要解決此問題，在定義schema時，將array的default value設為undefined即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CarSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  <span class="attr">cars</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">Array</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>參考資料： <a href="http://mongoosejs.com/docs/schematypes.html#arrays">Mongoose文件</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在MongoDB的操作裡，如果要清除某個欄位，我們可以用 $unset。而日前對著文件裡的 array 做此動作時，array只被清空但還是留下該欄位。&lt;/p&gt;
&lt;p&gt;要解決此問題，在定義schema時，將array的default value設為undefined即可&lt;/
      
    
    </summary>
    
    
      <category term="MongoDB" scheme="https://alexliang.me/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Restful API 檢查清單 </title>
    <link href="https://alexliang.me/Restful-API-%E6%AA%A2%E6%9F%A5%E6%B8%85%E5%96%AE/"/>
    <id>https://alexliang.me/Restful-API-檢查清單/</id>
    <published>2018-04-09T23:59:04.000Z</published>
    <updated>2018-05-21T14:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>後端工程師的工作之一便是規劃API，不論是公司內部提供給前端或是第三方的溝通。這篇文章整設計API前要注意的事項</p><span id="more"></span><h3 id="在API設計之前"><a href="#在API設計之前" class="headerlink" title="在API設計之前"></a>在API設計之前</h3><p>提供給前端的API請先和前端工程師及UI/UX 討論流程和需要的功能。一般來說，UI/UX會先出圖，再來才是前後端工程師討論，此時要從用戶(前端和UI/UX)的角度思考：</p><ol><li>為什麼他們需要這個功能</li><li>此功能要完成什麼工作，如果讓後端邏輯變複雜，有沒有其它替代方案？</li><li>之後會不會擴展API功能（如增加第三方支付廠商，或是為其它客戶做客製化）</li></ol><p>這個階段得具體和詳細的討論，在流程和功能沒結果前不動手寫code<br>如果此API只是單純後端的需要，那只是討論的對象不同，其思考方式一樣。</p><h3 id="API設計"><a href="#API設計" class="headerlink" title="API設計"></a>API設計</h3><p>與用戶討論完API的功能後，下一步就要設計介面<br><a href="https://tw.twincl.com/programming/*641y">這篇文章</a>談到Restful API在設計需注意的事。先分清楚此API是跟資源有關還是utility的功能，這會影響到URI的設計</p><p>跟資源相關的就是CRUD操作，例如註冊會員或刪除文章</p><p>而utility的API可能不特別針對哪個資源，例如 background job</p><p>至於使用哪個http動詞就看該行為了，例如註冊一個會員帳號你可能會使用 POST /1/members<br>一切先以用戶的角度看待介面的合理性。</p><p>設計時需要針對各操作構思後端的邏輯，列出該操作所有的選項，思考使用的DB資源，此時對於整個API應該有清楚的規劃。</p><h3 id="API實作之前"><a href="#API實作之前" class="headerlink" title="API實作之前"></a>API實作之前</h3><p>在API實作之前還需要 </p><ol><li>寫unit test </li><li>撰寫API文件，讓前端人員參考</li></ol><p>單元測試有幾點須注意： </p><ol><li>測試應涵蓋設計階段討論的 corner case </li><li>測試資料應盡可能簡明</li><li>API上線後如果遇到當初沒討論的狀況，先寫測試再解bug</li></ol><p>在撰寫文件方面，我們團隊使用<a href="http://apidocjs.com/">API Doc</a>幫助產出document。不用另外存放文件，用註解的方式就能產出文件，對於前後端人員都是很方便的作法。</p><p>以上是這陣子和同事討論API到實作的心得，這篇記錄將來還會持續更新，讓每次的工作都能更順利。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;後端工程師的工作之一便是規劃API，不論是公司內部提供給前端或是第三方的溝通。這篇文章整設計API前要注意的事項&lt;/p&gt;
    
    </summary>
    
    
      <category term="backend" scheme="https://alexliang.me/tags/backend/"/>
    
  </entry>
  
  <entry>
    <title>React初探 以Todo app為例 </title>
    <link href="https://alexliang.me/React%E5%88%9D%E6%8E%A2-%E4%BB%A5Todo-app%E7%82%BA%E4%BE%8B/"/>
    <id>https://alexliang.me/React初探-以Todo-app為例/</id>
    <published>2018-04-05T02:17:28.000Z</published>
    <updated>2018-04-05T04:21:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近有個功能需要前端的畫面，功能不複雜而且是給內部使用，趁這個機會玩一下React讓腦袋有不同的刺激。</p><span id="more"></span><p>同事丟給我<a href="https://www.youtube.com/watch?v=XCCW2y4wXNg">教學影片</a>，由實作一個可新增/刪除的todo list app開始，範例的程式碼在<a href="https://www.youtube.com/redirect?event=video_description&amp;v=XCCW2y4wXNg&amp;redir_token=DQ-0VpI5r3QKGGxQEsWfOJx1WyN8MTUyMjk4MjUyNkAxNTIyODk2MTI2&amp;q=https%3A%2F%2Fgithub.com%2FMyNameIsURL%2Freact-todo-app">這裡</a>。</p><h3 id="產生-React-App"><a href="#產生-React-App" class="headerlink" title="產生 React App"></a>產生 React App</h3><p>首先，使用create-react-app 這個npm module幫忙生成app的骨架</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br><span class="line"></span><br><span class="line">create-react-app todo-list</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> todo-list</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>在瀏覽器輸入 <a href="http://localhost:3000/">http://localhost:3000/</a> 即可看到 app 的畫面</p><h3 id="解析程式碼"><a href="#解析程式碼" class="headerlink" title="解析程式碼"></a>解析程式碼</h3><figure class="highlight javascript"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&#x27;./components/header&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.addTodo = <span class="built_in">this</span>.addTodo.bind(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.removeTodo = <span class="built_in">this</span>.removeTodo.bind(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">addTodo</span>(<span class="params">todoText</span>)</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">`Add <span class="subst">$&#123;todoText&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">removeTodo</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Removing <span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">     );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>1~3行將需要的module和css檔案載入專案</p><p>Class App 繼承React.Component, 所以在constructor裡需要先呼叫super才能使用父類別的成員函式 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super">super的說明</a></p><p>接下來需要綁定 addTodo 和 removeTodo這二個成員函式讓之後的操作能正確使用<a href="http://andyyou.logdown.com/posts/233010-understanding-javascript-functionprototypebind">bind的說明</a> <a href="https://reactjs.org/docs/react-without-es6.html#Autobinding">Autobinding</a></p><p>render function將我們想呈現的畫面渲染出來，這也是React.Component中必需要實作的函式。其中，Header放在另一個js檔案裡</p><figure class="highlight javascript"><figcaption><span>header.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>React Todo<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><p>看到這裡，相信有學過rails的人一定會對React的邏輯感覺到有所不同</p><p>在rails的view裡，前端基本上還是HTML的架構為主；而React則是以js搭配<a href="https://reactjs.org/docs/introducing-jsx.html">JSX</a>操作component以呈現畫面</p><figure class="highlight javascript"><figcaption><span>todoItem.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./todoItem.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">removeTodo</span>(<span class="params">_id</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.props.removeTodo(_id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todoWrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;removeTodo&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;(e)</span> =&gt;</span> this.removeTodo(this.props.id)&#125;&gt;remove<span class="tag">&lt;/<span class="name">button</span>&gt;</span>&#123;this.props.todo.text&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程式碼用來處理todo list的各個事項。在render裡可以看到HTML的class被換成className，這是為了和javascript的class做區別</p><p>而button的部分，在onClick事件觸發時會執行<code>&#123;(e) =&gt; this.removeTodo(this.props.id)&#125;</code>，<br>這是javascript的語法，表示當button被點擊時會呼叫removeTodo，傳入待辦事項的id以移除。在removeTodo function裡又呼叫了<code>this.props.removeTodo(_id)</code>，props是用來當作傳入component的參數，也就是說這裡將_id傳入App.js的removeTodo裡</p><figure class="highlight javascript"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&#x27;./components/header&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> TodoInput <span class="keyword">from</span> <span class="string">&#x27;./components/todoInput&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> TodoItem <span class="keyword">from</span> <span class="string">&#x27;./components/todoItem&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 略</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">addTodo</span>(<span class="params">todoText</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> todos = <span class="built_in">this</span>.state.todos.slice();</span><br><span class="line">    todos.push(&#123;</span><br><span class="line">      <span class="attr">_id</span>: <span class="built_in">this</span>.state.nextId,</span><br><span class="line">      <span class="attr">text</span>: todoText</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> nextId = <span class="built_in">this</span>.state.nextId + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      todos,</span><br><span class="line">      nextId</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">removeTodo</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      <span class="attr">todos</span>: <span class="built_in">this</span>.state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo._id !== id),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">TodoInput</span> <span class="attr">todoText</span>=<span class="string">&quot;&quot;</span> <span class="attr">addTodo</span>=<span class="string">&#123;this.addTodo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;</span></span><br><span class="line"><span class="xml">      this.state.todos.map((todo) =&gt; &#123;</span></span><br><span class="line"><span class="xml">        return <span class="tag">&lt;<span class="name">TodoItem</span> <span class="attr">todo</span>=<span class="string">&#123;todo&#125;</span> <span class="attr">key</span>=<span class="string">&#123;todo._id&#125;</span> <span class="attr">id</span>=<span class="string">&#123;todo._id&#125;</span> <span class="attr">removeTodo</span>=<span class="string">&#123;this.removeTodo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#125;)</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>以上就是React的初次介紹，其實學新東西最主要的目的不是為了跟上潮流，而是讓自己的腦袋活化，把其它知識做比較和整理並擴展認知邊界。</p><p>參考資料：</p><ul><li><a href="https://reactjs.org/docs/hello-world.html">官方文件</a></li><li><a href="https://blog.techbridge.cc/2016/04/21/react-jsx-introduction/">JSX介紹-繁</a></li><li><a href="https://hulufei.gitbooks.io/react-tutorial/content/jsx-in-depth.html">JSX介紹-簡</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有個功能需要前端的畫面，功能不複雜而且是給內部使用，趁這個機會玩一下React讓腦袋有不同的刺激。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://alexliang.me/tags/javascript/"/>
    
      <category term="front-end" scheme="https://alexliang.me/tags/front-end/"/>
    
      <category term="React" scheme="https://alexliang.me/tags/React/"/>
    
  </entry>
  
</feed>
